{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:8000';\nfunction App() {\n  _s();\n  const [step, setStep] = useState('connect');\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [notionProperties, setNotionProperties] = useState([]);\n  const [selectedExcelId, setSelectedExcelId] = useState('');\n  const [notionDbId, setNotionDbId] = useState('');\n  const [message, setMessage] = useState('');\n  const [userId, setUserId] = useState(null);\n  const [mappings, setMappings] = useState([]);\n  // Mevcut state'lerin altına ekleyin\n  const [unmatchedColumns, setUnmatchedColumns] = useState([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState([]);\n\n  // Excel sütunlarını ve Notion özelliklerini aldıktan sonra bu değişkeni kullanacağız\n  const allExcelColumnNames = excelColumns.map(col => col.name);\n  const allNotionPropertyNames = notionProperties.map(prop => prop.name);\n\n  // Yeni state: Otomatik sütun oluşturma için\n  const [autoCreateColumns, setAutoCreateColumns] = useState(false);\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const authError = params.get('auth_error');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (authError === 'true') {\n      setMessage(`Yetkilendirme hatası: ${params.get('message')}`);\n      setStep('connect');\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else {\n      setStep('connect');\n    }\n  }, []);\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n  const handleNotionConnect = () => {\n    setMessage('Notion hesabınızı bağlamak için, Notion\\'da herhangi bir veritabanı veya sayfasına gidin, \"...\" menüsünden \"Add connections\"ı seçin ve oluşturduğunuz entegrasyonu (\"Excel Sync\") ekleyin.');\n  };\n  const fetchExcelFiles = async currentUserId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setExcelFiles(data.files);\n      } else {\n        setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchExcelColumns = async fileId => {\n    if (!userId) return;\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await response.json();\n      if (response.ok) {\n        const columns = data.columns.map(name => ({\n          name\n        }));\n        const hasIdColumn = columns.some(col => col.name.toLowerCase() === 'id');\n        if (!hasIdColumn) {\n          setMessage('Seçtiğiniz Excel dosyasında \"ID\" adında bir sütun bulunmuyor. Senkronizasyon için bir \"ID\" sütunu gereklidir. Lütfen dosyanızı güncelleyin veya başka bir dosya seçin.');\n          setExcelColumns([]);\n          setMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setMappings(data.columns.map(name => ({\n          excel_column: name,\n          notion_property: '',\n          data_type: ''\n        })));\n        setMessage('');\n      } else {\n        setMessage(`Excel sütunları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  // Mevcut fetchNotionProperties fonksiyonunu tamamen değiştirin\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen bir Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setNotionProperties(data.properties);\n\n        // Eşleşmeyen sütunları bulma mantığı\n        const matchedNotionProps = new Set(mappings.map(m => m.notion_property));\n        const notionPropNames = data.properties.map(p => p.name);\n        const unmatched = excelColumns.filter(col => !notionPropNames.includes(col.name) && col.name.toLowerCase() !== 'id').map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate(unmatched); // Varsayılan olarak hepsini seçili yap\n\n        setStep('mapping');\n        setMessage('');\n      } else {\n        setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n  const handleExcelFileChange = e => {\n    const fileId = e.target.value;\n    setSelectedExcelId(fileId);\n    if (fileId) {\n      fetchExcelColumns(fileId);\n    }\n  };\n  const handleMappingChange = (excelColumnName, notionPropertyName) => {\n    setMappings(prevMappings => {\n      const newMappings = [...prevMappings];\n      const mappingIndex = newMappings.findIndex(m => m.excel_column === excelColumnName);\n      if (mappingIndex > -1) {\n        const selectedNotionProp = notionProperties.find(p => p.name === notionPropertyName);\n        newMappings[mappingIndex] = {\n          ...newMappings[mappingIndex],\n          notion_property: notionPropertyName,\n          data_type: (selectedNotionProp === null || selectedNotionProp === void 0 ? void 0 : selectedNotionProp.type) || ''\n        };\n      }\n      return newMappings;\n    });\n  };\n\n  // Mevcut saveMappingAndStartSync fonksiyonunu tamamen değiştirin\n  const saveMappingAndStartSync = async syncDirection => {\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı. Lütfen tekrar giriş yapın.');\n      return;\n    }\n    try {\n      const syncResponse = await fetch(`${API_BASE_URL}/sync/${syncDirection}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          mappings: mappings,\n          columns_to_create: selectedColumnsToCreate\n        })\n      });\n      if (!syncResponse.ok) {\n        const syncError = await syncResponse.json();\n        setMessage(`Senkronizasyon başlatılamadı: ${syncError.detail || syncError.error}`);\n        return;\n      }\n      setStep('complete');\n      setMessage('Senkronizasyon başarıyla tamamlandı!');\n    } catch (error) {\n      setMessage('Senkronizasyon başlatma sırasında ağ hatası oluştu.');\n    }\n  };\n  const renderConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMicrosoftConnect,\n      children: \"Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n  const renderSelectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Excel Dosyas\\u0131n\\u0131 ve Notion Veritaban\\u0131n\\u0131 Se\\xE7in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Excel Dosyas\\u0131 Se\\xE7in:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedExcelId,\n          onChange: handleExcelFileChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Dosya Se\\xE7iniz...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), excelFiles.map(file => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: file.id,\n            children: file.name\n          }, file.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Notion Veritaban\\u0131 ID'si:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: notionDbId,\n          onChange: e => setNotionDbId(e.target.value),\n          placeholder: \"Veritaban\\u0131 ID'sini yap\\u0131\\u015Ft\\u0131r\\u0131n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchNotionProperties,\n      disabled: !selectedExcelId || !notionDbId,\n      children: \"Notion \\xD6zelliklerini Getir\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n  const renderMappingStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"S\\xFCtunlar\\u0131 E\\u015Fle\\u015Ftirin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mapping-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Excel S\\xFCtunlar\\u0131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: excelColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"excel-name\",\n              children: column.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notion \\xD6zellikleri\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: mappings.map((mapping, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: mapping.notion_property,\n              onChange: e => handleMappingChange(mapping.excel_column, e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Se\\xE7iniz...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 19\n              }, this), notionProperties.map(prop => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: prop.name,\n                children: [prop.name, \" (\", prop.type, \")\"]\n              }, prop.name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sync-buttons-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"auto-create\",\n          checked: autoCreateColumns,\n          onChange: e => setAutoCreateColumns(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"auto-create\",\n          children: \"E\\u015Fle\\u015Fmeyen s\\xFCtunlar\\u0131 Notion'da otomatik olu\\u015Ftur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveMappingAndStartSync('excel-to-notion'),\n        disabled: !mappings.length,\n        children: \"Excel'den Notion'a E\\u015Fitle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveMappingAndStartSync('notion-to-excel'),\n        disabled: !mappings.length,\n        children: \"Notion'dan Excel'e E\\u015Fitle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n  const renderCompleteStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Senkronizasyon Ba\\u015Far\\u0131l\\u0131!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Se\\xE7ti\\u011Finiz y\\xF6nde senkronizasyon tamamland\\u0131. Uygulama, dosyan\\u0131zdaki de\\u011Fi\\u015Fiklikleri takip etmeye ve verileri otomatik olarak senkronize etmeye devam edecektir.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setStep('select'),\n      children: \"Yeni Senkronizasyon Ba\\u015Flat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Notion & Excel Senkronizasyonu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 21\n      }, this), step === 'connect' && renderConnectStep(), step === 'select' && renderSelectStep(), step === 'mapping' && renderMappingStep(), step === 'complete' && renderCompleteStep()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 304,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"I4vup3vjPzudoW2Iq6VFuplhKGI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","step","setStep","excelFiles","setExcelFiles","excelColumns","setExcelColumns","notionProperties","setNotionProperties","selectedExcelId","setSelectedExcelId","notionDbId","setNotionDbId","message","setMessage","userId","setUserId","mappings","setMappings","unmatchedColumns","setUnmatchedColumns","selectedColumnsToCreate","setSelectedColumnsToCreate","allExcelColumnNames","map","col","name","allNotionPropertyNames","prop","autoCreateColumns","setAutoCreateColumns","params","URLSearchParams","window","location","search","authSuccess","get","authError","receivedUserId","storedUserId","localStorage","getItem","setItem","fetchExcelFiles","history","replaceState","document","title","pathname","handleMicrosoftConnect","href","handleNotionConnect","currentUserId","response","fetch","data","json","ok","files","error","fetchExcelColumns","fileId","columns","hasIdColumn","some","toLowerCase","excel_column","notion_property","data_type","fetchNotionProperties","properties","matchedNotionProps","Set","m","notionPropNames","p","unmatched","filter","includes","handleExcelFileChange","e","target","value","handleMappingChange","excelColumnName","notionPropertyName","prevMappings","newMappings","mappingIndex","findIndex","selectedNotionProp","find","type","saveMappingAndStartSync","syncDirection","syncResponse","method","headers","body","JSON","stringify","excel_file_id","notion_database_id","user_id","parseInt","columns_to_create","syncError","detail","renderConnectStep","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","renderSelectStep","onChange","file","id","placeholder","disabled","renderMappingStep","column","index","mapping","checked","htmlFor","length","renderCompleteStep","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\ntype AppStep = 'connect' | 'select' | 'mapping' | 'complete';\ntype ExcelFile = { id: string; name: string };\ntype ExcelColumn = { name: string };\ntype NotionProperty = { name: string; type: string };\ntype Mapping = { excel_column: string; notion_property: string; data_type: string };\n\nconst API_BASE_URL = 'http://127.0.0.1:8000';\n\nfunction App() {\n  const [step, setStep] = useState<AppStep>('connect');\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\n  const [excelColumns, setExcelColumns] = useState<ExcelColumn[]>([]);\n  const [notionProperties, setNotionProperties] = useState<NotionProperty[]>([]);\n  const [selectedExcelId, setSelectedExcelId] = useState<string>('');\n  const [notionDbId, setNotionDbId] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n  const [userId, setUserId] = useState<string | null>(null);\n  const [mappings, setMappings] = useState<Mapping[]>([]);\n  // Mevcut state'lerin altına ekleyin\n  const [unmatchedColumns, setUnmatchedColumns] = useState<string[]>([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState<string[]>([]);\n\n  // Excel sütunlarını ve Notion özelliklerini aldıktan sonra bu değişkeni kullanacağız\n  const allExcelColumnNames = excelColumns.map(col => col.name);\n  const allNotionPropertyNames = notionProperties.map(prop => prop.name);\n\n\n  // Yeni state: Otomatik sütun oluşturma için\n  const [autoCreateColumns, setAutoCreateColumns] = useState<boolean>(false);\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const authError = params.get('auth_error');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } \n    else if (authError === 'true') {\n      setMessage(`Yetkilendirme hatası: ${params.get('message')}`);\n      setStep('connect');\n    }\n    else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    }\n    else {\n      setStep('connect');\n    }\n\n  }, []);\n\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n\n  const handleNotionConnect = () => {\n    setMessage('Notion hesabınızı bağlamak için, Notion\\'da herhangi bir veritabanı veya sayfasına gidin, \"...\" menüsünden \"Add connections\"ı seçin ve oluşturduğunuz entegrasyonu (\"Excel Sync\") ekleyin.');\n  };\n\n  const fetchExcelFiles = async (currentUserId: string) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setExcelFiles(data.files);\n      } else {\n        setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchExcelColumns = async (fileId: string) => {\n    if (!userId) return;\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await response.json();\n      if (response.ok) {\n        const columns = data.columns.map((name: string) => ({ name }));\n        \n        const hasIdColumn = columns.some((col: any) => col.name.toLowerCase() === 'id');\n        if (!hasIdColumn) {\n            setMessage('Seçtiğiniz Excel dosyasında \"ID\" adında bir sütun bulunmuyor. Senkronizasyon için bir \"ID\" sütunu gereklidir. Lütfen dosyanızı güncelleyin veya başka bir dosya seçin.');\n            setExcelColumns([]);\n            setMappings([]);\n            return;\n        }\n\n        setExcelColumns(columns);\n        setMappings(data.columns.map((name: string) => ({ excel_column: name, notion_property: '', data_type: '' })));\n        setMessage('');\n\n      } else {\n        setMessage(`Excel sütunları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  // Mevcut fetchNotionProperties fonksiyonunu tamamen değiştirin\nconst fetchNotionProperties = async () => {\n  if (!notionDbId) {\n    setMessage('Lütfen bir Notion Veritabanı ID\\'si girin.');\n    return;\n  }\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n    const data = await response.json();\n    if (response.ok) {\n      setNotionProperties(data.properties);\n      \n      // Eşleşmeyen sütunları bulma mantığı\n      const matchedNotionProps = new Set(mappings.map(m => m.notion_property));\n      const notionPropNames = data.properties.map((p: any) => p.name);\n      \n      const unmatched = excelColumns\n        .filter(col => !notionPropNames.includes(col.name) && col.name.toLowerCase() !== 'id')\n        .map(col => col.name);\n      \n      setUnmatchedColumns(unmatched);\n      setSelectedColumnsToCreate(unmatched); // Varsayılan olarak hepsini seçili yap\n\n      setStep('mapping');\n      setMessage('');\n    } else {\n      setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    }\n  } catch (error) {\n    setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n  }\n};\n\n  const handleExcelFileChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const fileId = e.target.value;\n    setSelectedExcelId(fileId);\n    if (fileId) {\n      fetchExcelColumns(fileId);\n    }\n  };\n\n  const handleMappingChange = (excelColumnName: string, notionPropertyName: string) => {\n    setMappings(prevMappings => {\n      const newMappings = [...prevMappings];\n      const mappingIndex = newMappings.findIndex(m => m.excel_column === excelColumnName);\n\n      if (mappingIndex > -1) {\n        const selectedNotionProp = notionProperties.find(p => p.name === notionPropertyName);\n        newMappings[mappingIndex] = {\n          ...newMappings[mappingIndex],\n          notion_property: notionPropertyName,\n          data_type: selectedNotionProp?.type || ''\n        };\n      }\n      return newMappings;\n    });\n  };\n\n // Mevcut saveMappingAndStartSync fonksiyonunu tamamen değiştirin\nconst saveMappingAndStartSync = async (syncDirection: 'excel-to-notion' | 'notion-to-excel') => {\n  if (!userId) {\n    setMessage('Kullanıcı kimliği bulunamadı. Lütfen tekrar giriş yapın.');\n    return;\n  }\n\n  try {\n    const syncResponse = await fetch(`${API_BASE_URL}/sync/${syncDirection}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        excel_file_id: selectedExcelId,\n        notion_database_id: notionDbId,\n        user_id: parseInt(userId, 10),\n        mappings: mappings,\n        columns_to_create: selectedColumnsToCreate,\n      }),\n    });\n\n    if (!syncResponse.ok) {\n      const syncError = await syncResponse.json();\n      setMessage(`Senkronizasyon başlatılamadı: ${syncError.detail || syncError.error}`);\n      return;\n    }\n\n    setStep('complete');\n    setMessage('Senkronizasyon başarıyla tamamlandı!');\n\n  } catch (error) {\n    setMessage('Senkronizasyon başlatma sırasında ağ hatası oluştu.');\n  }\n};\n\n  const renderConnectStep = () => (\n    <div className=\"step-container\">\n      <button onClick={handleMicrosoftConnect}>Microsoft Hesabını Bağla</button>\n    </div>\n  );\n\n  const renderSelectStep = () => (\n    <div className=\"step-container\">\n      <h2>Excel Dosyasını ve Notion Veritabanını Seçin</h2>\n      <div>\n        <label>\n          Excel Dosyası Seçin:\n          <select value={selectedExcelId} onChange={handleExcelFileChange}>\n            <option value=\"\">Dosya Seçiniz...</option>\n            {excelFiles.map(file => (\n              <option key={file.id} value={file.id}>{file.name}</option>\n            ))}\n          </select>\n        </label>\n      </div>\n      <div>\n        <label>\n          Notion Veritabanı ID'si:\n          <input\n            type=\"text\"\n            value={notionDbId}\n            onChange={(e) => setNotionDbId(e.target.value)}\n            placeholder=\"Veritabanı ID'sini yapıştırın\"\n          />\n        </label>\n      </div>\n      <button onClick={fetchNotionProperties} disabled={!selectedExcelId || !notionDbId}>Notion Özelliklerini Getir</button>\n    </div>\n  );\n\n  const renderMappingStep = () => (\n    <div className=\"step-container\">\n      <h2>Sütunları Eşleştirin</h2>\n      <div className=\"mapping-grid\">\n        <div className=\"mapping-section\">\n          <h3>Excel Sütunları</h3>\n          <ul>\n            {excelColumns.map((column, index) => (\n              <li key={index}>\n                <span className=\"excel-name\">{column.name}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"mapping-section\">\n          <h3>Notion Özellikleri</h3>\n          <ul>\n            {mappings.map((mapping, index) => (\n              <li key={index}>\n                <select\n                  value={mapping.notion_property}\n                  onChange={(e) => handleMappingChange(mapping.excel_column, e.target.value)}\n                >\n                  <option value=\"\">Seçiniz...</option>\n                  {notionProperties.map(prop => (\n                    <option key={prop.name} value={prop.name}>{prop.name} ({prop.type})</option>\n                  ))}\n                </select>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n      <div className=\"sync-buttons-container\">\n        {/* Otomatik oluşturma onay kutusu */}\n        <div className=\"checkbox-container\">\n          <input \n            type=\"checkbox\" \n            id=\"auto-create\" \n            checked={autoCreateColumns} \n            onChange={(e) => setAutoCreateColumns(e.target.checked)} \n          />\n          <label htmlFor=\"auto-create\">Eşleşmeyen sütunları Notion'da otomatik oluştur</label>\n        </div>\n        <button onClick={() => saveMappingAndStartSync('excel-to-notion')} disabled={!mappings.length}>\n          Excel'den Notion'a Eşitle\n        </button>\n        <button onClick={() => saveMappingAndStartSync('notion-to-excel')} disabled={!mappings.length}>\n          Notion'dan Excel'e Eşitle\n        </button>\n      </div>\n    </div>\n  );\n  \n  const renderCompleteStep = () => (\n    <div className=\"step-container\">\n      <h2>Senkronizasyon Başarılı!</h2>\n      <p>Seçtiğiniz yönde senkronizasyon tamamlandı. Uygulama, dosyanızdaki değişiklikleri takip etmeye ve verileri otomatik olarak senkronize etmeye devam edecektir.</p>\n      <button onClick={() => setStep('select')}>Yeni Senkronizasyon Başlat</button>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Notion & Excel Senkronizasyonu</h1>\n        \n        {message && <p className=\"message\">{message}</p>}\n\n        {step === 'connect' && renderConnectStep()}\n        {step === 'select' && renderSelectStep()}\n        {step === 'mapping' && renderMappingStep()}\n        {step === 'complete' && renderCompleteStep()}\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}