{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport Dashboard from './AutoSyncDashboard';\nimport Home from './Home'; // Yeni Home bileşenini import ediyoruz!\nimport PrivacyPolicy from './PrivacyPolicy';\nimport TermsAndConditions from './TermsAndConditions';\n// YENİ İMPORTLAR\nimport HeaderComponent from './HeaderComponent';\nimport FooterComponent from './FooterComponent';\nimport Profile from './Profile';\nimport Pricing from './Pricing';\nimport QuickStart from './QuickStart';\nimport FAQPage from './FAQPage';\n\n// 'home' adımını AppStep türüne ekliyoruz\n// YENİ TİP EKLENTİLERİ: 'privacy' ve 'terms' eklendi\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'https://127.0.0.1:8000';\nconst getInitialStep = userId => {\n  // 1. URL'deki mevcut hash'i kontrol et\n  const hash = window.location.hash.replace('#', '');\n  if (hash === 'privacy' || hash === 'terms' || hash === 'profile' || hash === 'pricing' || hash === 'quick_start' || hash === 'faq') {\n    return hash;\n  }\n\n  // 2. Hash yoksa, normal başlangıç mantığını uygula\n  return userId ? 'connect' : 'home';\n};\nfunction App() {\n  _s();\n  // Başlangıç adımını, localStorage'daki user_id'ye göre belirliyoruz.\n  const initialUserId = localStorage.getItem('user_id');\n  // ID varsa 'connect' adımında başla, yoksa 'home' (giriş) sayfasında başla.\n  const initialStep = getInitialStep(initialUserId);\n  const [step, setStep] = useState(getInitialStep(localStorage.getItem('user_id')));\n  const [userEmail, setUserEmail] = useState(localStorage.getItem('user_email'));\n  const [syncDirection, setSyncDirection] = useState('excel-to-notion');\n  const [autoSyncToggle, setAutoSyncToggle] = useState(false);\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [notionProperties, setNotionProperties] = useState([]);\n  const [selectedExcelId, setSelectedExcelId] = useState('');\n  const [excelWorksheets, setExcelWorksheets] = useState([]); // Yeni\n  const [selectedWorksheetName, setSelectedWorksheetName] = useState(''); // Yeni\n\n  const [message, setMessage] = useState('');\n  const [userId, setUserId] = useState(initialUserId); // initialUserId'yi kullanıyoruz\n\n  const [excelToNotionMappings, setExcelToNotionMappings] = useState([]);\n  const [notionToExcelMappings, setNotionToExcelMappings] = useState([]);\n  const [unmatchedColumns, setUnmatchedColumns] = useState([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState([]);\n  const [autoSyncColumns, setAutoSyncColumns] = useState([]);\n  const [notionDbId, setNotionDbId] = useState(null);\n  const [notionDatabases, setNotionDatabases] = useState([]);\n  const [notionDatabasesLoading, setNotionDatabasesLoading] = useState(false);\n  const [notionDatabasesError, setNotionDatabasesError] = useState(null);\n  const loggedIn = !!userId; // Kullanıcı oturum açmış mı?\n\n  const handleMappingChange = useCallback((leftItemName, selectedRightItem) => {\n    // Mevcut mappings'i al\n    const currentMappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    const setMappings = syncDirection === 'excel-to-notion' ? setExcelToNotionMappings : setNotionToExcelMappings;\n\n    // Yeni mapping objesi oluştur\n    const newMapping = {\n      excel_column: syncDirection === 'excel-to-notion' ? leftItemName : selectedRightItem,\n      notion_property: syncDirection === 'excel-to-notion' ? selectedRightItem : leftItemName,\n      data_type: 'Text' // Bu, varsayılan değerdir, Notion property tipine göre değiştirilebilir\n    };\n\n    // Var olan mapping'i bul ve güncelle veya yeni mapping'i ekle\n    const updatedMappings = currentMappings.filter(m => syncDirection === 'excel-to-notion' ? m.excel_column !== leftItemName : m.notion_property !== leftItemName);\n\n    // Eğer \"Eşleştirme Yapma\" (boş değer) seçilmediyse ekle\n    if (selectedRightItem) {\n      setMappings([...updatedMappings, newMapping]);\n    } else {\n      // Eşleşme kaldırıldığında AutoSync'ten de kaldır\n      if (autoSyncColumns.includes(leftItemName)) {\n        setAutoSyncColumns(cols => cols.filter(c => c !== leftItemName));\n      }\n      setMappings(updatedMappings);\n    }\n  }, [syncDirection, excelToNotionMappings, notionToExcelMappings, autoSyncColumns, setExcelToNotionMappings, setNotionToExcelMappings, setAutoSyncColumns]);\n\n  // 2. Auto Sync Sütun Seçimini Yöneten Fonksiyon\n  const handleAutoSyncColumnChange = useCallback((columnName, isChecked) => {\n    setAutoSyncColumns(prevCols => {\n      if (isChecked && !prevCols.includes(columnName)) {\n        return [...prevCols, columnName];\n      } else if (!isChecked && prevCols.includes(columnName)) {\n        return prevCols.filter(c => c !== columnName);\n      }\n      return prevCols;\n    });\n  }, [setAutoSyncColumns]);\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const receivedUserId = params.get('user_id');\n    const notionAuthSuccess = params.get('notion_auth_success') === 'true';\n    const notionAuthError = params.get('notion_auth_error') === 'true';\n    const authSuccess = params.get('auth_success') === 'true';\n\n    // Helper: Kullanıcı verilerini kaydeder ve Notion bağlantısını kontrol eder.\n    const initializeApp = async (id, isNewLogin) => {\n      setUserId(id);\n      localStorage.setItem('user_id', id);\n      const hasNotionKey = await checkNotionStatus(id);\n      if (!hasNotionKey) {\n        setStep('notion_connect');\n        if (isNewLogin) setMessage('Microsoft bağlantısı başarılı. Şimdi Notion hesabınızı bağlayın.');\n      } else {\n        setStep('select');\n        fetchExcelFiles(id);\n        if (isNewLogin) setMessage('Bağlantılar tamam! Excel dosyanızı seçin.');\n      }\n    };\n\n    // --- 1. Notion Callback Handling (Notion'dan döndüğünde) ---\n    if (notionAuthSuccess) {\n      const currentId = localStorage.getItem('user_id');\n      if (currentId) {\n        setStep('pricing');\n        fetchExcelFiles(currentId);\n        setMessage('Notion bağlantısı başarılı! Şimdi bir plan seçin.');\n      } else {\n        setMessage('Hata: Notion bağlantısı başarılı ancak kullanıcı ID kayıp.');\n        setStep('home');\n      }\n      window.history.replaceState(null, '', window.location.pathname + window.location.hash);\n      return;\n    }\n    if (notionAuthError) {\n      setMessage(`Notion bağlantı hatası: ${params.get('message') || 'Bilinmeyen hata.'}`);\n      setStep('notion_connect');\n      window.history.replaceState(null, '', window.location.pathname);\n      return;\n    }\n\n    // --- 2. Microsoft Callback Handling (Microsoft'tan döndüğünde) ---\n    if (authSuccess && receivedUserId) {\n      initializeApp(receivedUserId, true);\n\n      // 💡 Kullanıcı bilgilerini backend'den al (örnek endpoint)\n      fetch(`${API_BASE_URL}/get-user?user_id=${receivedUserId}`).then(async res => {\n        if (!res.ok) throw new Error(\"Kullanıcı bilgisi alınamadı\");\n        const data = await res.json();\n\n        // E-posta bilgisi geldiyse kaydet\n        if (data.email) {\n          localStorage.setItem(\"user_email\", data.email);\n          setUserEmail(data.email);\n        } else {\n          console.warn(\"E-posta bilgisi boş döndü:\", data);\n        }\n      }).catch(err => console.error(\"Kullanıcı bilgisi alınamadı:\", err));\n      window.history.replaceState(null, '', window.location.pathname);\n      return;\n    }\n\n    // --- 3. Persistent Session / Initial Load Handling ---\n    const storedUserId = localStorage.getItem('user_id');\n    // Eğer localStorage'da ID varsa ve mevcut adım 'home' değilse (yani oturum açma akışına girmişse)\n    if (storedUserId && step !== 'home') {\n      initializeApp(storedUserId, false);\n      return;\n    }\n\n    // --- 4. Default: Show Home Page ---\n    // Eğer hiçbir şey tetiklenmediyse ve ID yoksa, Home'u göster.\n    if (!storedUserId) {\n      setStep('home');\n    }\n  }, []);\n  useEffect(() => {\n    // ID sütun adını küçük harfle kontrol ediyoruz\n    const idColumnName = 'id';\n    const isMappingStep = step === 'mapping';\n\n    // 🚨 Düzeltme 1: leftItems ve rightItems'ı useEffect içinde tanımla\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n\n    // 1. OTOMATİK ID EŞLEŞTİRME KONTROLÜ\n    if (isMappingStep && excelColumns.length > 0 && notionProperties.length > 0) {\n      // ID sütununun zaten eşlenip eşlenmediğini kontrol et.\n      const isIdMapped = mappings.some(m => syncDirection === 'excel-to-notion' ? m.excel_column.toLowerCase() === idColumnName : m.notion_property.toLowerCase() === idColumnName);\n      if (!isIdMapped) {\n        const leftItem = leftItems.find(item => item.name.toLowerCase() === idColumnName);\n        const autoMapTarget = rightItems.find(item => item.name.toLowerCase() === idColumnName);\n\n        // Hem sol hem sağ tarafta \"ID\" sütunu varsa, otomatik eşleştirmeyi yap\n        if (leftItem && autoMapTarget) {\n          handleMappingChange(leftItem.name, autoMapTarget.name);\n          setMessage('ID sütunu otomatik olarak eşleştirildi.');\n        }\n      }\n    }\n\n    // 2. ID SÜTUNU OTOMATİK SYNC MANTIK\n    // Global AutoSync açıldığında ID'yi otomatik sync listesine ekle.\n    if (isMappingStep) {\n      if (autoSyncToggle && !autoSyncColumns.includes(idColumnName)) {\n        // ID'yi otomatik sync listesine ekle\n        handleAutoSyncColumnChange(idColumnName, true);\n      } else if (!autoSyncToggle && autoSyncColumns.includes(idColumnName)) {\n        // ID'yi otomatik sync listesinden çıkar (Global kapatıldı)\n        handleAutoSyncColumnChange(idColumnName, false);\n      }\n    }\n\n    // 🚨 DÜZELTME 2: Dependency array'i düzeltildi. setMessage kaldırıldı.\n  }, [step, syncDirection, excelColumns, notionProperties, autoSyncToggle, autoSyncColumns, excelToNotionMappings, notionToExcelMappings, handleMappingChange,\n  // Artık useCallback ile stabil!\n  handleAutoSyncColumnChange,\n  // Artık useCallback ile stabil!\n  setMessage // 🚨 setMessage bir state setter'dır ve dependency array'e eklenmemelidir.\n  ]);\n\n  // App.tsx içinde, useState ve diğer useEffect'lerden sonra herhangi bir yere ekleyin:\n  useEffect(() => {\n    const handleHashChange = () => {\n      const newHash = window.location.hash.replace('#', '');\n\n      // Sadece beklenen adımlardan biriyse set et\n      const validSteps = ['home', 'connect', 'notion_connect', 'select', 'mapping', 'complete', 'dashboard', 'privacy', 'terms', 'profile', 'pricing', 'quick_start'];\n      if (validSteps.includes(newHash)) {\n        setStep(newHash);\n      } else if (newHash === '') {\n        // Hash tamamen temizlenirse (örn: back butonu ile) home'a dön\n        setStep('home');\n      }\n    };\n\n    // Dinleyiciyi ekle\n    window.addEventListener('hashchange', handleHashChange);\n\n    // Temizlik fonksiyonu (componentWillUnmount)\n    return () => {\n      window.removeEventListener('hashchange', handleHashChange);\n    };\n  }, [setStep]); // setStep değişmediği için tek sefer çalışır, ama dependency listesine eklenmelidir.\n\n  const fetchNotionDatabases = useCallback(async userId => {\n    setNotionDatabasesLoading(true);\n    setNotionDatabasesError(null);\n    try {\n      // Yeni backend endpoint'ini çağırıyoruz\n      const response = await fetch(`${API_BASE_URL}/get-notion-databases?user_id=${userId}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        // Backend'den gelen hata mesajını kullanıyoruz.\n        const errorMsg = errorData.error || 'Veritabanları yüklenemedi.';\n        throw new Error(errorMsg);\n      }\n      const data = await response.json();\n      const databases = data.databases || [];\n      setNotionDatabases(databases);\n\n      // Veritabanı varsa ve henüz seçili değilse, ilkini varsayılan olarak seç\n      if (databases.length > 0 && !notionDbId) {\n        setNotionDbId(databases[0].id);\n      }\n    } catch (err) {\n      // Kullanıcıya gösterilecek hata mesajı\n      setNotionDatabasesError(`Notion veritabanları alınamadı. Lütfen Notion entegrasyon ayarlarınızı kontrol edin. Hata: ${err instanceof Error ? err.message : 'Bilinmeyen Hata'}`);\n    } finally {\n      setNotionDatabasesLoading(false);\n    }\n  }, [notionDbId]); // Dependency olarak notinDbId ve setNotionDbId'yi (implicit) ekliyoruz.\n\n  // 🔑 YENİ: Notion veritabanlarını yüklemek için useEffect\n  useEffect(() => {\n    // Adım 'select' olduğunda, kullanıcı ID'si varsa ve veritabanları henüz yüklenmemişse/yükleniyorsa yüklemeyi başlat\n    if (step === 'select' && userId && notionDatabases.length === 0 && !notionDatabasesLoading && !notionDatabasesError) {\n      fetchNotionDatabases(userId);\n    }\n    // NOT: fetchNotionDatabases useCallback içinde olduğu için buraya eklemiyoruz.\n  }, [userId, step, notionDatabases.length, notionDatabasesLoading, notionDatabasesError, fetchNotionDatabases]); // fetchNotionDatabases dependency'si eklendi\n\n  // ... (Tüm fetch ve handler fonksiyonları burada devam eder)\n\n  // 1. Yeni Sayfa Çekme Fonksiyonu\n  const fetchExcelWorksheets = async (fileId, currentUserId) => {\n    try {\n      // Backend'deki yeni endpoint'i çağırın\n      const res = await fetch(`${API_BASE_URL}/get-excel-worksheets?excel_file_id=${fileId}&user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) {\n        // Data'nın [\"Sayfa1\", \"Sayfa2\"] formatında geldiğini varsayıyoruz\n        const worksheets = data.worksheets.map(name => ({\n          name\n        }));\n        setExcelWorksheets(worksheets);\n        if (worksheets.length === 1) {\n          // Tek sayfa varsa otomatik seç ve sütunları çek\n          setSelectedWorksheetName(worksheets[0].name);\n          fetchExcelColumns(fileId, worksheets[0].name);\n        } else {\n          // Sütunları temizle ve kullanıcının seçmesini bekle\n          setExcelColumns([]);\n        }\n      } else setMessage(`Excel sayfaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sayfaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n  const checkNotionStatus = async currentUserId => {\n    // DEV MODE: Notion bağlantısı kontrolü atlanıyor.\n    // return true; // Eğer test amaçlı Notion bağlantısını atlamak isterseniz\n    try {\n      const res = await fetch(`${API_BASE_URL}/check-notion-status?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) {\n        // Backend'den { has_notion_key: true/false } şeklinde bir yanıt bekliyoruz.\n        return data.has_notion_key;\n      }\n      return false;\n    } catch {\n      setMessage('Bağlantı kontrolü sırasında ağ hatası oluştu.');\n      return false;\n    }\n  };\n  const fetchExcelFiles = async currentUserId => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchExcelColumns = async (fileId, worksheetName) => {\n    if (!userId || !worksheetName) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&worksheet_name=${worksheetName}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map(name => ({\n          name\n        }));\n        const hasId = columns.some(c => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setExcelToNotionMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setExcelToNotionMappings(columns.map(c => ({\n          excel_column: c.name,\n          notion_property: '',\n          data_type: ''\n        })));\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n        const notionPropNames = data.properties.map(p => p.name.toLowerCase());\n        const unmatched = excelColumns.filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id').map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate([]);\n        setNotionToExcelMappings(data.properties.map(prop => ({\n          excel_column: '',\n          notion_property: prop.name,\n          data_type: prop.type || ''\n        })));\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n  const handleCreateColumnChange = (colName, checked) => {\n    setSelectedColumnsToCreate(prev => checked ? [...prev, colName] : prev.filter(c => c !== colName));\n  };\n  const saveMappings = async () => {\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı.');\n      return;\n    }\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    const validMappings = mappings.filter(m => syncDirection === 'excel-to-notion' ? m.notion_property.trim() !== '' : m.excel_column.trim() !== '');\n    if (validMappings.length === 0) {\n      setMessage(\"En az bir sütunu eşleştirin.\");\n      return;\n    }\n    const idMappingExists = validMappings.some(m => syncDirection === 'excel-to-notion' && m.excel_column.toLowerCase() === 'id' || syncDirection === 'notion-to-excel' && m.notion_property.toLowerCase() === 'id');\n    if (!idMappingExists) {\n      setMessage(\"Senkronizasyon için 'ID' sütununun eşleştirilmesi zorunludur.\");\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/save-mapping?user_id=${userId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(validMappings)\n      });\n      const data = await res.json();\n      if (res.ok) {\n        const allSavedMappings = data.saved_mappings || [];\n        setMessage(\"Eşleşmeler başarıyla kaydedildi. Senkronizasyon başlatılıyor...\");\n        startSync(syncDirection, allSavedMappings);\n      } else {\n        const err = data;\n        setMessage(`Eşleşmeler kaydedilemedi: ${err.error || err.detail}`);\n      }\n    } catch {\n      setMessage('Eşleşmeleri kaydederken ağ hatası oluştu.');\n    }\n  };\n  const startSync = async (direction, allSavedMappings) => {\n    var _excelFiles$find;\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı.');\n      return;\n    }\n    let successMessage = 'Senkronizasyon başarıyla tamamlandı.';\n    const cleanAutoSyncColumnsSet = new Set(autoSyncColumns.map(name => name.toLowerCase().trim()));\n    const autoSyncMappingIds = allSavedMappings.filter(m => {\n      const columnName = direction === 'excel-to-notion' ? m.excel_column : m.notion_property;\n      const cleanBackendName = columnName.toLowerCase().trim();\n      return cleanAutoSyncColumnsSet.has(cleanBackendName);\n    }).map(m => m.id);\n    const autoSyncCreationData = {\n      user_id: parseInt(userId, 10),\n      excel_file_id: selectedExcelId,\n      excel_file_name: ((_excelFiles$find = excelFiles.find(f => f.id === selectedExcelId)) === null || _excelFiles$find === void 0 ? void 0 : _excelFiles$find.name) || '',\n      notion_database_id: notionDbId,\n      direction: direction,\n      interval_minutes: 60,\n      mapping_ids: autoSyncMappingIds,\n      excel_worksheet_name: selectedWorksheetName\n    };\n    try {\n      // 1. MANUEL SENKRONİZASYONU BAŞLAT\n      const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          excel_worksheet_name: selectedWorksheetName,\n          columns_to_create: direction === 'excel-to-notion' ? selectedColumnsToCreate : []\n        })\n      });\n      if (!res.ok) {\n        const err = await res.json();\n        throw new Error(`Manuel Senkronizasyon başarısız: ${err.detail || err.error}`);\n      }\n\n      // 2. OTOMATİK SYNC KONFİGÜRASYONUNU OLUŞTUR\n      if (autoSyncToggle && autoSyncMappingIds.length > 0) {\n        const autoSyncRes = await fetch(`${API_BASE_URL}/autosync/create`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(autoSyncCreationData)\n        });\n        const autoSyncData = await autoSyncRes.json();\n        if (!autoSyncRes.ok) {\n          successMessage += ` Ancak Otomatik Sync yapılandırılamadı: ${autoSyncData.detail || 'Bilinmeyen Hata'}`;\n        } else {\n          successMessage = `Manuel senkronizasyon tamamlandı ve Otomatik Sync yapılandırıldı. (${autoSyncData.message})`;\n        }\n      }\n      setStep('complete');\n      setMessage(successMessage);\n    } catch (e) {\n      setMessage(`Senkronizasyon İşlemi Sırasında Hata: ${e.message || e.toString()}`);\n    }\n  };\n  const renderConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Ad\\u0131m 1: Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Devam etmek i\\xE7in OneDrive/Excel hesab\\u0131n\\u0131za eri\\u015Fim izni vermelisiniz.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: handleMicrosoftConnect,\n      children: \"Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 595,\n    columnNumber: 5\n  }, this);\n  const handleNotionConnect = () => {\n    // Backend'deki /connect/notion endpoint'ine yönlendiriyoruz\n    window.location.href = `${API_BASE_URL}/connect/notion?user_id=${userId}`;\n  };\n  const renderNotionConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Ad\\u0131m 2: Notion Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Senkronizasyonun \\xE7al\\u0131\\u015Fmas\\u0131 i\\xE7in Notion API anahtar\\u0131n\\u0131z\\u0131 ba\\u011Flaman\\u0131z gerekiyor. L\\xFCtfen t\\xFCm veritabanlar\\u0131n\\u0131z i\\xE7in izin verdi\\u011Finizden emin olun.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: handleNotionConnect,\n      disabled: !userId,\n      children: \"Notion Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 609,\n    columnNumber: 7\n  }, this);\n  const renderSelectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Ad\\u0131m 3: Dosya Se\\xE7imi\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"step-description\",\n      children: \"L\\xFCtfen senkronize etmek istedi\\u011Finiz Excel dosyas\\u0131n\\u0131/sayfas\\u0131n\\u0131 ve Notion Veritaban\\u0131n\\u0131 se\\xE7in.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-step-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `selection-card ${selectedExcelId ? 'is-selected' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"1. Excel Dosyas\\u0131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"OneDrive Dosyas\\u0131 Se\\xE7in:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedExcelId,\n            onChange: e => {\n              setSelectedExcelId(e.target.value);\n              if (e.target.value) {\n                // Dosya seçildiğinde sayfaları getir\n\n                fetchExcelWorksheets(e.target.value, userId);\n                setSelectedWorksheetName('');\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Dosya Se\\xE7iniz...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 27\n            }, this), excelFiles.map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: f.id,\n              children: f.name\n            }, f.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 48\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `selection-card ${selectedWorksheetName ? 'is-selected' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"2. \\xC7al\\u0131\\u015Fma Sayfas\\u0131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-hint\",\n          children: \"Dosyan\\u0131n hangi sayfas\\u0131n\\u0131 sync edece\\u011Finizi se\\xE7in.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 19\n        }, this), selectedExcelId ? excelWorksheets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Sayfa Se\\xE7in:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedWorksheetName,\n            onChange: e => {\n              setSelectedWorksheetName(e.target.value);\n\n              // Sayfa seçildiğinde sütunları getir\n\n              fetchExcelColumns(selectedExcelId, e.target.value);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Sayfa Se\\xE7iniz...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 35\n            }, this), excelWorksheets.map(ws => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: ws.name,\n              children: ws.name\n            }, ws.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 709,\n              columnNumber: 62\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 27\n        }, this) :\n        /*#__PURE__*/\n        // Loading state için bir kontrol ekledik, eğer yükleme state'i mevcut değilse bu şekilde kalabilir.\n        _jsxDEV(\"p\", {\n          className: \"loading-state\",\n          children: \"Sayfalar y\\xFCkleniyor...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"disabled-state\",\n          children: \"\\xD6nce Excel dosyas\\u0131n\\u0131 se\\xE7in.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `selection-card notion-card ${notionDbId ? 'is-selected' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"3. Notion Veritaban\\u0131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-hint\",\n          children: \"Senkronize edilecek hedef veritaban\\u0131n\\u0131 se\\xE7in.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 19\n        }, this), notionDatabasesError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message error-message\",\n          children: notionDatabasesError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 44\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"notion-db-select\",\n            children: \"Hedef Notion Veritaban\\u0131:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 23\n          }, this), notionDatabasesLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"loading-state\",\n            children: \"Notion veritabanlar\\u0131 y\\xFCkleniyor...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 751,\n            columnNumber: 29\n          }, this) : notionDatabases.length > 0 ?\n          /*#__PURE__*/\n          // KRİTİK DEĞİŞİKLİK: Dropdown Menü\n          _jsxDEV(\"select\", {\n            id: \"notion-db-select\"\n            // notionDbId state'inizin adını kullandık\n            ,\n            value: notionDbId || '',\n            onChange: e => setNotionDbId(e.target.value),\n            className: \"input-select\",\n            disabled: notionDatabasesLoading,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Bir veritaban\\u0131 se\\xE7in\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 762,\n              columnNumber: 33\n            }, this), notionDatabases.map(db => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: db.id,\n              children: [db.name, \" (ID: ...\", db.id.slice(-4), \")\"]\n            }, db.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 765,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 754,\n            columnNumber: 29\n          }, this) :\n          // Veritabanı bulunamazsa uyarı\n          !notionDatabasesError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"disabled-state\",\n            children: \"NotiXel'in eri\\u015Febilece\\u011Fi bir veritaban\\u0131 bulunamad\\u0131. L\\xFCtfen hedef Notion veritaban\\u0131n\\u0131z\\u0131 **NotiXel entegrasyonu** ile **payla\\u015Ft\\u0131\\u011F\\u0131n\\u0131zdan** emin olun.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary btn-lg\",\n        onClick: fetchNotionProperties,\n        disabled: !selectedExcelId || !selectedWorksheetName || !notionDbId,\n        children: \"Notion \\xD6zelliklerini Getir ve E\\u015Fle\\u015Ftirmeye Ge\\xE7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 788,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 786,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 621,\n    columnNumber: 7\n  }, this);\n  const renderMappingStep = () => {\n    var _mappings$find, _mappings$find2;\n    // `leftItems` ve `idMappingItem`'ı burada türetiyoruz\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n\n    // ID sütununu dışarıda tutarak haritalama listesini oluştur\n    const mappableLeftItems = leftItems.filter(item => item.name.toLowerCase() !== 'id');\n    const idMappingItem = leftItems.find(item => item.name.toLowerCase() === 'id');\n\n    // Eğer ID sütunu bulunamıyorsa veya mapping yoksa bir uyarı göster\n    if (!idMappingItem) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"step-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            color: 'red'\n          },\n          children: \"HATA!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Senkronizasyonun \\xE7al\\u0131\\u015Fmas\\u0131 i\\xE7in Excel dosyas\\u0131nda bir \\\"ID\\\" s\\xFCtunu zorunludur. L\\xFCtfen dosyan\\u0131z\\u0131 kontrol edin veya yeni bir dosya se\\xE7in.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"secondary-btn\",\n          onClick: () => setStep('select'),\n          children: \"Geri Git\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 822,\n        columnNumber: 15\n      }, this);\n    }\n\n    // ID sütunu için Notion tarafında eşleşme aranacak\n    const idSelectedRight = idMappingItem ? syncDirection === 'excel-to-notion' ? (_mappings$find = mappings.find(m => m.excel_column.toLowerCase() === 'id')) === null || _mappings$find === void 0 ? void 0 : _mappings$find.notion_property : (_mappings$find2 = mappings.find(m => m.notion_property.toLowerCase() === 'id')) === null || _mappings$find2 === void 0 ? void 0 : _mappings$find2.excel_column : '';\n\n    // 🚨 Hata Düzeltmesi: setMessage çağrısı buradan kaldırıldı.\n\n    // Eğer ID seçiliyse VE global sync açıksa, ID de otomatik sync'e dahildir.\n    const isIDAutoSynced = !!idSelectedRight && autoSyncToggle;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Ad\\u0131m 4: S\\xFCtunlar\\u0131 E\\u015Fle\\u015Ftirin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 845,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-control-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `btn-toggle ${syncDirection === 'excel-to-notion' ? 'active' : ''}`,\n            onClick: () => setSyncDirection('excel-to-notion'),\n            children: [\"Excel \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"arrow\",\n              children: \"\\u2192\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 854,\n              columnNumber: 33\n            }, this), \" Notion\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 850,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `btn-toggle ${syncDirection === 'notion-to-excel' ? 'active' : ''}`,\n            onClick: () => setSyncDirection('notion-to-excel'),\n            children: [\"Notion \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"arrow\",\n              children: \"\\u2192\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 860,\n              columnNumber: 34\n            }, this), \" Excel\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 856,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"auto-sync-toggle-global\",\n          children: [\"Otomatik Sync'i A\\xE7\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: autoSyncToggle\n            // useEffect hook'u bu çağrıdan sonra ID'yi autoSyncColumns'a ekleyecektir.\n            ,\n            onChange: e => setAutoSyncToggle(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 866,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 848,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"step-description\",\n        children: \"Senkronize etmek istedi\\u011Finiz her bir s\\xFCtunu kar\\u015F\\u0131 taraftaki uygun s\\xFCtunla e\\u015Fle\\u015Ftirin.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 876,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-list-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mapping-list-left-title\",\n          children: syncDirection === 'excel-to-notion' ? 'EXCEL SÜTUNLARI' : 'NOTION ÖZELLİKLERİ'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 881,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mapping-list-right-title\",\n          children: \"E\\u015ELE\\u015ET\\u0130R\\u0130LEN S\\xDCTUN / \\xD6ZELL\\u0130K\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 882,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mapping-list-autosync-title\",\n          children: \"OTOMAT\\u0130K SYNC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 883,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 880,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-list-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mapping-row mapping-row-critical\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mapping-left\",\n            children: \"ID (Kritik E\\u015Fle\\u015Fme)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 889,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mapping-right\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: idSelectedRight || '',\n              onChange: e => handleMappingChange(idMappingItem.name, e.target.value)\n              // ID eşleşmesi her zaman olmalı\n              ,\n              style: {\n                backgroundColor: idSelectedRight ? '#e6fff0' : '#ffe6e6'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Se\\xE7iniz...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 897,\n                columnNumber: 31\n              }, this), rightItems.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: p.name,\n                children: [p.name, syncDirection === 'excel-to-notion' && 'type' in p && p.type ? ` (${p.type})` : '']\n              }, p.name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 899,\n                columnNumber: 35\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 891,\n              columnNumber: 27\n            }, this), !idSelectedRight && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"info-text\",\n              style: {\n                margin: '5px 0 0 0',\n                textAlign: 'left',\n                color: '#dc3545'\n              },\n              children: \"KR\\u0130T\\u0130K: ID s\\xFCtununu e\\u015Fle\\u015Ftirmelisiniz.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 908,\n              columnNumber: 48\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mapping-autosync\",\n            children: isIDAutoSynced ? /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: '#28a745',\n                fontWeight: 'bold'\n              },\n              children: \"A\\xE7\\u0131k (Zorunlu)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 914,\n              columnNumber: 31\n            }, this) :\n            /*#__PURE__*/\n            // Global Sync kapalıysa veya ID seçili değilse: Uyarı\n            _jsxDEV(\"span\", {\n              className: \"info-text\",\n              children: autoSyncToggle ? 'Eşleştirme bekleniyor' : 'Global Kapalı'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 917,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 911,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 19\n        }, this), mappableLeftItems.map(item => {\n          const leftName = item.name;\n          const mapping = mappings.find(m => syncDirection === 'excel-to-notion' ? m.excel_column === leftName : m.notion_property === leftName) || {\n            excel_column: '',\n            notion_property: '',\n            data_type: ''\n          };\n          const selectedRight = syncDirection === 'excel-to-notion' ? mapping.notion_property : mapping.excel_column;\n\n          // ID zaten ayrı bir bölümde işlendiği için burada tekrar kontrol etmiyoruz\n          const isAutoSynced = autoSyncColumns.includes(leftName);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `mapping-row ${selectedRight ? 'is-mapped' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-left\",\n              children: leftName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 941,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-right\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedRight || '',\n                onChange: e => handleMappingChange(leftName, e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"E\\u015Fle\\u015Ftirme Yapma\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 947,\n                  columnNumber: 39\n                }, this), rightItems.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: p.name,\n                  children: syncDirection === 'excel-to-notion' && 'type' in p && p.type ? `${p.name} (${p.type})` : p.name\n                }, p.name, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 949,\n                  columnNumber: 43\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 943,\n                columnNumber: 35\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 942,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-autosync\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"auto-sync-checkbox-label\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  disabled: !autoSyncToggle || !selectedRight // Global kapalıysa veya eşleşme yapılmadıysa devre dışı\n                  ,\n                  checked: isAutoSynced,\n                  onChange: e => handleAutoSyncColumnChange(leftName, e.target.checked)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 959,\n                  columnNumber: 39\n                }, this), isAutoSynced ? 'Açık' : 'Kapalı']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 958,\n                columnNumber: 35\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 957,\n              columnNumber: 31\n            }, this)]\n          }, leftName, true, {\n            fileName: _jsxFileName,\n            lineNumber: 940,\n            columnNumber: 27\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 15\n      }, this), syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unmatched-columns-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notion'da Olmayan Excel S\\xFCtunlar\\u0131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 976,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Bu s\\xFCtunlar\\u0131, Notion'da yeni \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Zengin Metin (Rich Text)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 977,\n            columnNumber: 55\n          }, this), \" \\xF6zelli\\u011Fi olarak eklemek i\\xE7in i\\u015Faretleyin:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 977,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column-creation-options\",\n          children: unmatchedColumns.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"checkbox-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedColumnsToCreate.includes(c),\n              onChange: e => handleCreateColumnChange(c, e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 981,\n              columnNumber: 35\n            }, this), c]\n          }, c, true, {\n            fileName: _jsxFileName,\n            lineNumber: 980,\n            columnNumber: 31\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 978,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 975,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sync-buttons step-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary btn-lg\",\n          onClick: saveMappings,\n          disabled: !idSelectedRight,\n          children: \"Senkronizasyonu Ba\\u015Flat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 995,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 994,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 844,\n      columnNumber: 11\n    }, this);\n  };\n  const renderCompleteStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Senkr. Tamamland\\u0131!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1009,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1010,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: () => setStep('select'),\n      children: \"Yeni Senkronizasyon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1011,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"secondary-btn\",\n      onClick: () => setStep('dashboard'),\n      style: {\n        marginLeft: '10px'\n      },\n      children: \"Dashboard'a Git\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1012,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1008,\n    columnNumber: 5\n  }, this);\n  const renderConnectStepHomeOrApp = () => {\n    // Diğer uygulama adımları\n    switch (step) {\n      case 'home':\n        return /*#__PURE__*/_jsxDEV(Home, {\n          setStep: setStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1025,\n          columnNumber: 22\n        }, this);\n      case 'privacy':\n        return /*#__PURE__*/_jsxDEV(PrivacyPolicy, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1027,\n          columnNumber: 22\n        }, this);\n      case 'quick_start':\n        // 👈 YENİ\n        return /*#__PURE__*/_jsxDEV(QuickStart, {\n          setStep: setStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1029,\n          columnNumber: 22\n        }, this);\n      case 'terms':\n        return /*#__PURE__*/_jsxDEV(TermsAndConditions, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1031,\n          columnNumber: 22\n        }, this);\n      case 'connect':\n        return renderConnectStep();\n      case 'notion_connect':\n        return renderNotionConnectStep();\n      case 'pricing':\n        return /*#__PURE__*/_jsxDEV(Pricing, {\n          setStep: setStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1037,\n          columnNumber: 22\n        }, this);\n      case 'select':\n        return renderSelectStep();\n      case 'mapping':\n        return renderMappingStep();\n      case 'complete':\n        return renderCompleteStep();\n      case 'dashboard':\n        return /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1045,\n          columnNumber: 22\n        }, this);\n      case 'profile':\n        // YENİ EKLENTİ\n        return /*#__PURE__*/_jsxDEV(Profile, {\n          setStep: function (step) {\n            throw new Error('Function not implemented.');\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1047,\n          columnNumber: 24\n        }, this);\n      case 'faq':\n        return /*#__PURE__*/_jsxDEV(FAQPage, {\n          setStep: setStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1051,\n          columnNumber: 24\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(HeaderComponent, {\n      setStep: setStep,\n      userEmail: userEmail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1061,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: renderConnectStepHomeOrApp()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1067,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FooterComponent, {\n      setStep: setStep\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1073,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1059,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8CtOJy57GU9dP5IRX3tlZcoH9mY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Dashboard","Home","PrivacyPolicy","TermsAndConditions","HeaderComponent","FooterComponent","Profile","Pricing","QuickStart","FAQPage","jsxDEV","_jsxDEV","API_BASE_URL","getInitialStep","userId","hash","window","location","replace","App","_s","initialUserId","localStorage","getItem","initialStep","step","setStep","userEmail","setUserEmail","syncDirection","setSyncDirection","autoSyncToggle","setAutoSyncToggle","excelFiles","setExcelFiles","excelColumns","setExcelColumns","notionProperties","setNotionProperties","selectedExcelId","setSelectedExcelId","excelWorksheets","setExcelWorksheets","selectedWorksheetName","setSelectedWorksheetName","message","setMessage","setUserId","excelToNotionMappings","setExcelToNotionMappings","notionToExcelMappings","setNotionToExcelMappings","unmatchedColumns","setUnmatchedColumns","selectedColumnsToCreate","setSelectedColumnsToCreate","autoSyncColumns","setAutoSyncColumns","notionDbId","setNotionDbId","notionDatabases","setNotionDatabases","notionDatabasesLoading","setNotionDatabasesLoading","notionDatabasesError","setNotionDatabasesError","loggedIn","handleMappingChange","leftItemName","selectedRightItem","currentMappings","setMappings","newMapping","excel_column","notion_property","data_type","updatedMappings","filter","m","includes","cols","c","handleAutoSyncColumnChange","columnName","isChecked","prevCols","params","URLSearchParams","search","receivedUserId","get","notionAuthSuccess","notionAuthError","authSuccess","initializeApp","id","isNewLogin","setItem","hasNotionKey","checkNotionStatus","fetchExcelFiles","currentId","history","replaceState","pathname","fetch","then","res","ok","Error","data","json","email","console","warn","catch","err","error","storedUserId","idColumnName","isMappingStep","leftItems","rightItems","mappings","length","isIdMapped","some","toLowerCase","leftItem","find","item","name","autoMapTarget","handleHashChange","newHash","validSteps","addEventListener","removeEventListener","fetchNotionDatabases","response","errorData","errorMsg","databases","fetchExcelWorksheets","fileId","currentUserId","worksheets","map","fetchExcelColumns","handleMicrosoftConnect","href","has_notion_key","files","worksheetName","columns","hasId","fetchNotionProperties","properties","notionPropNames","p","unmatched","col","prop","type","handleCreateColumnChange","colName","checked","prev","saveMappings","validMappings","trim","idMappingExists","method","headers","body","JSON","stringify","allSavedMappings","saved_mappings","startSync","detail","direction","_excelFiles$find","successMessage","cleanAutoSyncColumnsSet","Set","autoSyncMappingIds","cleanBackendName","has","autoSyncCreationData","user_id","parseInt","excel_file_id","excel_file_name","f","notion_database_id","interval_minutes","mapping_ids","excel_worksheet_name","columns_to_create","autoSyncRes","autoSyncData","e","toString","renderConnectStep","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","handleNotionConnect","renderNotionConnectStep","disabled","renderSelectStep","value","onChange","target","ws","htmlFor","db","slice","renderMappingStep","_mappings$find","_mappings$find2","mappableLeftItems","idMappingItem","style","color","idSelectedRight","isIDAutoSynced","backgroundColor","margin","textAlign","fontWeight","leftName","mapping","selectedRight","isAutoSynced","renderCompleteStep","marginLeft","renderConnectStepHomeOrApp","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback  } from 'react';\nimport './App.css';\nimport Dashboard from './AutoSyncDashboard';\nimport Home from './Home'; // Yeni Home bileşenini import ediyoruz!\nimport PrivacyPolicy from './PrivacyPolicy';\nimport TermsAndConditions from './TermsAndConditions';\n// YENİ İMPORTLAR\nimport HeaderComponent from './HeaderComponent'; \nimport FooterComponent from './FooterComponent'; \nimport Profile from './Profile';\nimport Pricing from './Pricing';\nimport QuickStart from './QuickStart'\nimport FAQPage from './FAQPage';\n\n// 'home' adımını AppStep türüne ekliyoruz\n// YENİ TİP EKLENTİLERİ: 'privacy' ve 'terms' eklendi\ntype AppStep = 'home' | 'connect' | 'notion_connect' | 'select' | 'mapping' | 'complete' | 'dashboard' | 'privacy' | 'terms' | 'profile' | 'pricing' | 'quick_start' | 'faq';\ntype ExcelFile = { id: string; name: string };\ntype ExcelColumn = { name: string };\ntype NotionProperty = { name: string; type?: string };\ntype Mapping = { excel_column: string; notion_property: string; data_type: string };\ntype ExcelWorksheet = { name: string };\ntype NotionDatabase = { id: string; name: string }; \n\nconst API_BASE_URL = 'https://127.0.0.1:8000';\n\n\n\nconst getInitialStep = (userId: string | null): AppStep => {\n  // 1. URL'deki mevcut hash'i kontrol et\n  const hash = window.location.hash.replace('#', '');\n  if (hash === 'privacy' || hash === 'terms' || hash === 'profile' || hash === 'pricing' || hash === 'quick_start' || hash === 'faq') {\n    return hash as AppStep;\n  }\n  \n  // 2. Hash yoksa, normal başlangıç mantığını uygula\n  return userId ? 'connect' : 'home';\n};\n\nfunction App() {\n  // Başlangıç adımını, localStorage'daki user_id'ye göre belirliyoruz.\n  const initialUserId = localStorage.getItem('user_id');\n  // ID varsa 'connect' adımında başla, yoksa 'home' (giriş) sayfasında başla.\n  const initialStep: AppStep = getInitialStep(initialUserId);\n  \n  const [step, setStep] = useState<AppStep>(getInitialStep(localStorage.getItem('user_id')));\n  const [userEmail, setUserEmail] = useState<string | null>(localStorage.getItem('user_email'));\n  const [syncDirection, setSyncDirection] = useState<'excel-to-notion' | 'notion-to-excel'>('excel-to-notion');\n  const [autoSyncToggle, setAutoSyncToggle] = useState(false);\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\n  const [excelColumns, setExcelColumns] = useState<ExcelColumn[]>([]);\n  const [notionProperties, setNotionProperties] = useState<NotionProperty[]>([]);\n  const [selectedExcelId, setSelectedExcelId] = useState<string>('');\n  const [excelWorksheets, setExcelWorksheets] = useState<ExcelWorksheet[]>([]); // Yeni\n  const [selectedWorksheetName, setSelectedWorksheetName] = useState<string>(''); // Yeni\n  \n  const [message, setMessage] = useState<string>('');\n  const [userId, setUserId] = useState<string | null>(initialUserId); // initialUserId'yi kullanıyoruz\n\n  const [excelToNotionMappings, setExcelToNotionMappings] = useState<Mapping[]>([]);\n  const [notionToExcelMappings, setNotionToExcelMappings] = useState<Mapping[]>([]);\n  \n  const [unmatchedColumns, setUnmatchedColumns] = useState<string[]>([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState<string[]>([]);\n  \n  const [autoSyncColumns, setAutoSyncColumns] = useState<string[]>([]);\n  const [notionDbId, setNotionDbId] = useState<string | null>(null); \n  const [notionDatabases, setNotionDatabases] = useState<NotionDatabase[]>([]);\n  const [notionDatabasesLoading, setNotionDatabasesLoading] = useState<boolean>(false);\n  const [notionDatabasesError, setNotionDatabasesError] = useState<string | null>(null);\n  \n\n  const loggedIn = !!userId; // Kullanıcı oturum açmış mı?\n\n  const handleMappingChange = useCallback((leftItemName: string, selectedRightItem: string) => {\n    // Mevcut mappings'i al\n    const currentMappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    const setMappings = syncDirection === 'excel-to-notion' ? setExcelToNotionMappings : setNotionToExcelMappings;\n    \n    // Yeni mapping objesi oluştur\n    const newMapping = {\n        excel_column: syncDirection === 'excel-to-notion' ? leftItemName : selectedRightItem,\n        notion_property: syncDirection === 'excel-to-notion' ? selectedRightItem : leftItemName,\n        data_type: 'Text', // Bu, varsayılan değerdir, Notion property tipine göre değiştirilebilir\n    };\n    \n    // Var olan mapping'i bul ve güncelle veya yeni mapping'i ekle\n    const updatedMappings = currentMappings.filter(m => \n        syncDirection === 'excel-to-notion' \n            ? m.excel_column !== leftItemName \n            : m.notion_property !== leftItemName\n    );\n    \n    // Eğer \"Eşleştirme Yapma\" (boş değer) seçilmediyse ekle\n    if (selectedRightItem) {\n        setMappings([...updatedMappings, newMapping]);\n    } else {\n        // Eşleşme kaldırıldığında AutoSync'ten de kaldır\n        if (autoSyncColumns.includes(leftItemName)) {\n            setAutoSyncColumns(cols => cols.filter(c => c !== leftItemName));\n        }\n        setMappings(updatedMappings);\n    }\n\n}, [syncDirection, excelToNotionMappings, notionToExcelMappings, autoSyncColumns, setExcelToNotionMappings, setNotionToExcelMappings, setAutoSyncColumns]);\n\n\n// 2. Auto Sync Sütun Seçimini Yöneten Fonksiyon\nconst handleAutoSyncColumnChange = useCallback((columnName: string, isChecked: boolean) => {\n    setAutoSyncColumns(prevCols => {\n        if (isChecked && !prevCols.includes(columnName)) {\n            return [...prevCols, columnName];\n        } else if (!isChecked && prevCols.includes(columnName)) {\n            return prevCols.filter(c => c !== columnName);\n        }\n        return prevCols;\n    });\n}, [setAutoSyncColumns]);\n  \n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const receivedUserId = params.get('user_id');\n    const notionAuthSuccess = params.get('notion_auth_success') === 'true';\n    const notionAuthError = params.get('notion_auth_error') === 'true';\n    const authSuccess = params.get('auth_success') === 'true';\n\n    // Helper: Kullanıcı verilerini kaydeder ve Notion bağlantısını kontrol eder.\n    const initializeApp = async (id: string, isNewLogin: boolean) => {\n        setUserId(id);\n        localStorage.setItem('user_id', id);\n\n        const hasNotionKey = await checkNotionStatus(id);\n\n        if (!hasNotionKey) {\n            setStep('notion_connect');\n            if (isNewLogin) setMessage('Microsoft bağlantısı başarılı. Şimdi Notion hesabınızı bağlayın.');\n        } else {\n            setStep('select');\n            fetchExcelFiles(id);\n            if (isNewLogin) setMessage('Bağlantılar tamam! Excel dosyanızı seçin.');\n        }\n    };\n    \n    // --- 1. Notion Callback Handling (Notion'dan döndüğünde) ---\n    if (notionAuthSuccess) {\n        const currentId = localStorage.getItem('user_id');\n        if (currentId) {\n            setStep('pricing');\n            fetchExcelFiles(currentId);\n            setMessage('Notion bağlantısı başarılı! Şimdi bir plan seçin.');\n        } else {\n            setMessage('Hata: Notion bağlantısı başarılı ancak kullanıcı ID kayıp.');\n            setStep('home');\n        }\n        window.history.replaceState(null, '', window.location.pathname + window.location.hash);\n        return;\n    }\n   \n    \n    if (notionAuthError) {\n         setMessage(`Notion bağlantı hatası: ${params.get('message') || 'Bilinmeyen hata.'}`);\n         setStep('notion_connect'); \n         window.history.replaceState(null, '', window.location.pathname);\n         return;\n    }\n\n    // --- 2. Microsoft Callback Handling (Microsoft'tan döndüğünde) ---\n    if (authSuccess && receivedUserId) {\n    initializeApp(receivedUserId, true);\n\n    // 💡 Kullanıcı bilgilerini backend'den al (örnek endpoint)\n    fetch(`${API_BASE_URL}/get-user?user_id=${receivedUserId}`)\n        .then(async (res) => {\n            if (!res.ok) throw new Error(\"Kullanıcı bilgisi alınamadı\");\n            const data = await res.json();\n\n            // E-posta bilgisi geldiyse kaydet\n            if (data.email) {\n                localStorage.setItem(\"user_email\", data.email);\n                setUserEmail(data.email);\n            } else {\n                console.warn(\"E-posta bilgisi boş döndü:\", data);\n            }\n        })\n        .catch((err) => console.error(\"Kullanıcı bilgisi alınamadı:\", err));\n\n    window.history.replaceState(null, '', window.location.pathname);\n    return;\n    }\n    \n    // --- 3. Persistent Session / Initial Load Handling ---\n    const storedUserId = localStorage.getItem('user_id');\n    // Eğer localStorage'da ID varsa ve mevcut adım 'home' değilse (yani oturum açma akışına girmişse)\n    if (storedUserId && step !== 'home') {\n         initializeApp(storedUserId, false);\n         return;\n    }\n\n    // --- 4. Default: Show Home Page ---\n    // Eğer hiçbir şey tetiklenmediyse ve ID yoksa, Home'u göster.\n    if (!storedUserId) {\n        setStep('home');\n    }\n    \n  }, []); \n\n  useEffect(() => {\n    // ID sütun adını küçük harfle kontrol ediyoruz\n    const idColumnName = 'id'; \n    const isMappingStep = step === 'mapping';\n\n    // 🚨 Düzeltme 1: leftItems ve rightItems'ı useEffect içinde tanımla\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    \n    // 1. OTOMATİK ID EŞLEŞTİRME KONTROLÜ\n    if (isMappingStep && excelColumns.length > 0 && notionProperties.length > 0) {\n        \n        // ID sütununun zaten eşlenip eşlenmediğini kontrol et.\n        const isIdMapped = mappings.some(m => \n            syncDirection === 'excel-to-notion' \n                ? m.excel_column.toLowerCase() === idColumnName \n                : m.notion_property.toLowerCase() === idColumnName\n        );\n        \n        if (!isIdMapped) {\n            const leftItem = leftItems.find(item => item.name.toLowerCase() === idColumnName);\n            const autoMapTarget = rightItems.find(item => item.name.toLowerCase() === idColumnName);\n            \n            // Hem sol hem sağ tarafta \"ID\" sütunu varsa, otomatik eşleştirmeyi yap\n            if (leftItem && autoMapTarget) {\n                handleMappingChange(leftItem.name, autoMapTarget.name);\n                setMessage('ID sütunu otomatik olarak eşleştirildi.');\n            }\n        }\n    }\n\n    // 2. ID SÜTUNU OTOMATİK SYNC MANTIK\n    // Global AutoSync açıldığında ID'yi otomatik sync listesine ekle.\n    if (isMappingStep) {\n        if (autoSyncToggle && !autoSyncColumns.includes(idColumnName)) {\n            // ID'yi otomatik sync listesine ekle\n            handleAutoSyncColumnChange(idColumnName, true);\n        } else if (!autoSyncToggle && autoSyncColumns.includes(idColumnName)) {\n            // ID'yi otomatik sync listesinden çıkar (Global kapatıldı)\n            handleAutoSyncColumnChange(idColumnName, false);\n        }\n    }\n\n\n// 🚨 DÜZELTME 2: Dependency array'i düzeltildi. setMessage kaldırıldı.\n}, [\n    step, \n    syncDirection, \n    excelColumns, \n    notionProperties, \n    autoSyncToggle, \n    autoSyncColumns,\n    excelToNotionMappings,\n    notionToExcelMappings,\n    handleMappingChange, // Artık useCallback ile stabil!\n    handleAutoSyncColumnChange, // Artık useCallback ile stabil!\n    setMessage // 🚨 setMessage bir state setter'dır ve dependency array'e eklenmemelidir.\n]);\n\n// App.tsx içinde, useState ve diğer useEffect'lerden sonra herhangi bir yere ekleyin:\nuseEffect(() => {\n    const handleHashChange = () => {\n        const newHash = window.location.hash.replace('#', '');\n        \n        // Sadece beklenen adımlardan biriyse set et\n        const validSteps = ['home', 'connect', 'notion_connect', 'select', 'mapping', 'complete', 'dashboard', 'privacy', 'terms', 'profile', 'pricing', 'quick_start'];\n        if (validSteps.includes(newHash as AppStep)) {\n            setStep(newHash as AppStep);\n        } else if (newHash === '') {\n            // Hash tamamen temizlenirse (örn: back butonu ile) home'a dön\n            setStep('home');\n        }\n    };\n\n    // Dinleyiciyi ekle\n    window.addEventListener('hashchange', handleHashChange);\n\n    // Temizlik fonksiyonu (componentWillUnmount)\n    return () => {\n        window.removeEventListener('hashchange', handleHashChange);\n    };\n}, [setStep]); // setStep değişmediği için tek sefer çalışır, ama dependency listesine eklenmelidir.\n\nconst fetchNotionDatabases = useCallback(async (userId: string) => {\n    setNotionDatabasesLoading(true);\n    setNotionDatabasesError(null);\n    try {\n        // Yeni backend endpoint'ini çağırıyoruz\n        const response = await fetch(`${API_BASE_URL}/get-notion-databases?user_id=${userId}`);\n        \n        if (!response.ok) {\n            const errorData = await response.json();\n            // Backend'den gelen hata mesajını kullanıyoruz.\n            const errorMsg = errorData.error || 'Veritabanları yüklenemedi.'; \n            throw new Error(errorMsg);\n        }\n        \n        const data = await response.json();\n        const databases: NotionDatabase[] = data.databases || [];\n        setNotionDatabases(databases);\n        \n        // Veritabanı varsa ve henüz seçili değilse, ilkini varsayılan olarak seç\n        if (databases.length > 0 && !notionDbId) {\n            setNotionDbId(databases[0].id);\n        }\n        \n    } catch (err) {\n        // Kullanıcıya gösterilecek hata mesajı\n        setNotionDatabasesError(`Notion veritabanları alınamadı. Lütfen Notion entegrasyon ayarlarınızı kontrol edin. Hata: ${err instanceof Error ? err.message : 'Bilinmeyen Hata'}`);\n    } finally {\n        setNotionDatabasesLoading(false);\n    }\n}, [notionDbId]); // Dependency olarak notinDbId ve setNotionDbId'yi (implicit) ekliyoruz.\n\n// 🔑 YENİ: Notion veritabanlarını yüklemek için useEffect\nuseEffect(() => {\n    // Adım 'select' olduğunda, kullanıcı ID'si varsa ve veritabanları henüz yüklenmemişse/yükleniyorsa yüklemeyi başlat\n    if (step === 'select' && userId && notionDatabases.length === 0 && !notionDatabasesLoading && !notionDatabasesError) {\n        fetchNotionDatabases(userId);\n    }\n    // NOT: fetchNotionDatabases useCallback içinde olduğu için buraya eklemiyoruz.\n}, [userId, step, notionDatabases.length, notionDatabasesLoading, notionDatabasesError, fetchNotionDatabases]); // fetchNotionDatabases dependency'si eklendi\n\n\n  // ... (Tüm fetch ve handler fonksiyonları burada devam eder)\n\n  // 1. Yeni Sayfa Çekme Fonksiyonu\n  const fetchExcelWorksheets = async (fileId: string, currentUserId: string) => {\n    try {\n      // Backend'deki yeni endpoint'i çağırın\n      const res = await fetch(`${API_BASE_URL}/get-excel-worksheets?excel_file_id=${fileId}&user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) {\n        // Data'nın [\"Sayfa1\", \"Sayfa2\"] formatında geldiğini varsayıyoruz\n        const worksheets = data.worksheets.map((name: string) => ({ name }));\n        setExcelWorksheets(worksheets);\n\n        if (worksheets.length === 1) {\n            // Tek sayfa varsa otomatik seç ve sütunları çek\n            setSelectedWorksheetName(worksheets[0].name);\n            fetchExcelColumns(fileId, worksheets[0].name);\n        } else {\n             // Sütunları temizle ve kullanıcının seçmesini bekle\n             setExcelColumns([]);\n        }\n\n      } else setMessage(`Excel sayfaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sayfaları alınırken ağ hatası oluştu.');\n    }\n  };\n\n\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n\n  const checkNotionStatus = async (currentUserId: string): Promise<boolean> => {\n    // DEV MODE: Notion bağlantısı kontrolü atlanıyor.\n    // return true; // Eğer test amaçlı Notion bağlantısını atlamak isterseniz\n    try {\n        const res = await fetch(`${API_BASE_URL}/check-notion-status?user_id=${currentUserId}`);\n        const data = await res.json();\n        if (res.ok) {\n            // Backend'den { has_notion_key: true/false } şeklinde bir yanıt bekliyoruz.\n            return data.has_notion_key;\n        }\n        return false;\n    } catch {\n        setMessage('Bağlantı kontrolü sırasında ağ hatası oluştu.');\n        return false;\n    }\n  };\n\n  const fetchExcelFiles = async (currentUserId: string) => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);\n      else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchExcelColumns = async (fileId: string, worksheetName: string) => {\n    if (!userId || !worksheetName) return; \n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&worksheet_name=${worksheetName}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map((name: string) => ({ name }));\n        const hasId = columns.some((c: ExcelColumn) => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setExcelToNotionMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setExcelToNotionMappings(columns.map((c: ExcelColumn) => ({\n          excel_column: c.name,\n          notion_property: '',\n          data_type: ''\n        })));\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n\n        const notionPropNames = data.properties.map((p: NotionProperty) => p.name.toLowerCase());\n        const unmatched = excelColumns\n          .filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id')\n          .map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate([]);\n\n        setNotionToExcelMappings(data.properties.map((prop: NotionProperty) => ({\n          excel_column: '',\n          notion_property: prop.name,\n          data_type: prop.type || ''\n        })));\n\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n\n  \n\n  const handleCreateColumnChange = (colName: string, checked: boolean) => {\n    setSelectedColumnsToCreate(prev =>\n      checked ? [...prev, colName] : prev.filter(c => c !== colName)\n    );\n  };\n\n  \n  \n\n  \n  \n\nconst saveMappings = async () => {\n    if (!userId) { setMessage('Kullanıcı kimliği bulunamadı.'); return; }\n\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    const validMappings = mappings.filter(m =>\n        syncDirection === 'excel-to-notion' ? m.notion_property.trim() !== '' : m.excel_column.trim() !== ''\n    );\n    \n    if (validMappings.length === 0) { setMessage(\"En az bir sütunu eşleştirin.\"); return; }\n    \n    const idMappingExists = validMappings.some(m => \n        (syncDirection === 'excel-to-notion' && m.excel_column.toLowerCase() === 'id') ||\n        (syncDirection === 'notion-to-excel' && m.notion_property.toLowerCase() === 'id')\n    );\n    \n    if (!idMappingExists) {\n        setMessage(\"Senkronizasyon için 'ID' sütununun eşleştirilmesi zorunludur.\");\n        return;\n    }\n\n    try {\n        const res = await fetch(`${API_BASE_URL}/save-mapping?user_id=${userId}`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(validMappings),\n        });\n        \n        const data = await res.json(); \n        \n        if (res.ok) {\n            const allSavedMappings: { id: number, excel_column: string, notion_property: string }[] = data.saved_mappings || []; \n            \n            setMessage(\"Eşleşmeler başarıyla kaydedildi. Senkronizasyon başlatılıyor...\");\n            startSync(syncDirection, allSavedMappings); \n        } else {\n            const err = data;\n            setMessage(`Eşleşmeler kaydedilemedi: ${err.error || err.detail}`);\n        }\n    } catch {\n        setMessage('Eşleşmeleri kaydederken ağ hatası oluştu.');\n    }\n};\n\n\nconst startSync = async (\n    direction: 'excel-to-notion' | 'notion-to-excel',\n    allSavedMappings: { id: number, excel_column: string, notion_property: string }[] \n  ) => {\n    if (!userId) {\n        setMessage('Kullanıcı kimliği bulunamadı.');\n        return;\n    }\n\n    let successMessage = 'Senkronizasyon başarıyla tamamlandı.';\n\n    const cleanAutoSyncColumnsSet = new Set(\n        autoSyncColumns.map(name => name.toLowerCase().trim())\n    );\n\n    const autoSyncMappingIds = allSavedMappings\n        .filter(m => {\n            const columnName = direction === 'excel-to-notion' ? m.excel_column : m.notion_property;\n            const cleanBackendName = columnName.toLowerCase().trim();\n            \n            return cleanAutoSyncColumnsSet.has(cleanBackendName);\n        })\n        .map(m => m.id);\n\n\n    const autoSyncCreationData = {\n        user_id: parseInt(userId, 10),\n        excel_file_id: selectedExcelId,\n        excel_file_name: excelFiles.find(f => f.id === selectedExcelId)?.name || '',\n        notion_database_id: notionDbId,\n        direction: direction,\n        interval_minutes: 60,\n        mapping_ids: autoSyncMappingIds,\n        excel_worksheet_name: selectedWorksheetName, \n    };\n    \n    try {\n        // 1. MANUEL SENKRONİZASYONU BAŞLAT\n        const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                 excel_file_id: selectedExcelId,\n                 notion_database_id: notionDbId,\n                 user_id: parseInt(userId, 10),\n                 excel_worksheet_name: selectedWorksheetName,\n                 columns_to_create:\n                     direction === 'excel-to-notion' ? selectedColumnsToCreate : [],\n            }),\n        });\n\n        if (!res.ok) {\n            const err = await res.json();\n            throw new Error(`Manuel Senkronizasyon başarısız: ${err.detail || err.error}`);\n        }\n\n        // 2. OTOMATİK SYNC KONFİGÜRASYONUNU OLUŞTUR\n        if (autoSyncToggle && autoSyncMappingIds.length > 0) { \n            const autoSyncRes = await fetch(`${API_BASE_URL}/autosync/create`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(autoSyncCreationData),\n            });\n\n            const autoSyncData = await autoSyncRes.json();\n\n            if (!autoSyncRes.ok) {\n                successMessage += ` Ancak Otomatik Sync yapılandırılamadı: ${autoSyncData.detail || 'Bilinmeyen Hata'}`;\n            } else {\n                successMessage = `Manuel senkronizasyon tamamlandı ve Otomatik Sync yapılandırıldı. (${autoSyncData.message})`;\n            }\n        }\n\n        setStep('complete');\n        setMessage(successMessage);\n    } catch (e: any) {\n        setMessage(`Senkronizasyon İşlemi Sırasında Hata: ${e.message || e.toString()}`);\n    }\n};\n\n\n\n\n\n\n  const renderConnectStep = () => (\n    <div className=\"step-container\">\n        <h2>Adım 1: Microsoft Hesabını Bağla</h2>\n        <p>Devam etmek için OneDrive/Excel hesabınıza erişim izni vermelisiniz.</p>\n        <button className=\"primary-btn\" onClick={handleMicrosoftConnect}>Microsoft Hesabını Bağla</button>\n    </div>\n  );\n\n  const handleNotionConnect = () => {\n    // Backend'deki /connect/notion endpoint'ine yönlendiriyoruz\n    window.location.href = `${API_BASE_URL}/connect/notion?user_id=${userId}`; \n  };\n\n\n  const renderNotionConnectStep = () => (\n      <div className=\"step-container\">\n          <h2>Adım 2: Notion Hesabını Bağla</h2>\n          <p>Senkronizasyonun çalışması için Notion API anahtarınızı bağlamanız gerekiyor. Lütfen tüm veritabanlarınız için izin verdiğinizden emin olun.</p>\n          <button className=\"primary-btn\" onClick={handleNotionConnect} disabled={!userId}>\n              Notion Hesabını Bağla\n          </button>\n      </div>\n  );\n\n  \n  const renderSelectStep = () => (\n\n      <div className=\"step-container\">\n\n          <h2>Adım 3: Dosya Seçimi</h2>\n\n          <p className=\"step-description\">Lütfen senkronize etmek istediğiniz Excel dosyasını/sayfasını ve Notion Veritabanını seçin.</p>\n\n\n\n          <div className=\"select-step-grid\">\n\n              {/* 1. EXCEL DOSYA SEÇİM KARTI (DEĞİŞMEDİ) */}\n\n              <div className={`selection-card ${selectedExcelId ? 'is-selected' : ''}`}>\n\n                  <h3>1. Excel Dosyası</h3>\n\n                  <div className=\"field\">\n\n                      <label>OneDrive Dosyası Seçin:</label>\n\n                      <select \n\n                          value={selectedExcelId} \n\n                          onChange={e => { \n\n                              setSelectedExcelId(e.target.value); \n\n                              if (e.target.value) {\n\n                                  // Dosya seçildiğinde sayfaları getir\n\n                                  fetchExcelWorksheets(e.target.value, userId!);\n\n                                  setSelectedWorksheetName(''); \n\n                              }\n\n                          }}\n\n                      >\n\n                          <option value=\"\">Dosya Seçiniz...</option>\n\n                          {excelFiles.map(f => <option key={f.id} value={f.id}>{f.name}</option>)}\n\n                      </select>\n\n                  </div>\n\n              </div>\n\n              \n\n              {/* 2. EXCEL ÇALIŞMA SAYFASI SEÇİM KARTI (DEĞİŞMEDİ) */}\n\n              <div className={`selection-card ${selectedWorksheetName ? 'is-selected' : ''}`}>\n\n                  <h3>2. Çalışma Sayfası</h3>\n\n                  <p className=\"card-hint\">Dosyanın hangi sayfasını sync edeceğinizi seçin.</p>\n\n                  {selectedExcelId ? (\n\n                      excelWorksheets.length > 0 ? (\n\n                          <div className=\"field\">\n\n                              <label>Sayfa Seçin:</label>\n\n                              <select \n\n                                  value={selectedWorksheetName} \n\n                                  onChange={e => { \n\n                                      setSelectedWorksheetName(e.target.value); \n\n                                      // Sayfa seçildiğinde sütunları getir\n\n                                      fetchExcelColumns(selectedExcelId, e.target.value);\n\n                                  }}\n\n                              >\n\n                                  <option value=\"\">Sayfa Seçiniz...</option>\n\n                                  {excelWorksheets.map(ws => <option key={ws.name} value={ws.name}>{ws.name}</option>)}\n\n                              </select>\n\n                          </div>\n\n                      ) : (\n\n                          // Loading state için bir kontrol ekledik, eğer yükleme state'i mevcut değilse bu şekilde kalabilir.\n                          <p className=\"loading-state\">Sayfalar yükleniyor...</p> \n\n                      )\n\n                  ) : (\n\n                      <p className=\"disabled-state\">Önce Excel dosyasını seçin.</p>\n\n                  )}\n\n              </div>\n\n\n\n              {/* 3. NOTION VERİTABANI DROPDOWN KARTI (YENİ) */}\n\n              <div className={`selection-card notion-card ${notionDbId ? 'is-selected' : ''}`}>\n\n                  <h3>3. Notion Veritabanı</h3>\n\n                  <p className=\"card-hint\">Senkronize edilecek hedef veritabanını seçin.</p>\n\n                  \n                  {/* Hata Mesajı */}\n                  {notionDatabasesError && <p className=\"message error-message\">{notionDatabasesError}</p>}\n\n\n                  <div className=\"field\">\n\n                      <label htmlFor=\"notion-db-select\">Hedef Notion Veritabanı:</label>\n\n                      \n                      {notionDatabasesLoading ? (\n                            <p className=\"loading-state\">Notion veritabanları yükleniyor...</p>\n                        ) : notionDatabases.length > 0 ? (\n                            // KRİTİK DEĞİŞİKLİK: Dropdown Menü\n                            <select\n                                id=\"notion-db-select\"\n                                // notionDbId state'inizin adını kullandık\n                                value={notionDbId || ''} \n                                onChange={(e) => setNotionDbId(e.target.value)}\n                                className=\"input-select\" \n                                disabled={notionDatabasesLoading}\n                            >\n                                <option value=\"\" disabled>Bir veritabanı seçin</option>\n                                \n                                {notionDatabases.map(db => (\n                                    <option key={db.id} value={db.id}>\n                                        {db.name} (ID: ...{db.id.slice(-4)})\n                                    </option>\n                                ))}\n                            </select>\n                        ) : (\n                            // Veritabanı bulunamazsa uyarı\n                            !notionDatabasesError && (\n                                <p className=\"disabled-state\">\n                                    NotiXel'in erişebileceği bir veritabanı bulunamadı. Lütfen hedef Notion veritabanınızı **NotiXel entegrasyonu** ile **paylaştığınızdan** emin olun.\n                                </p>\n                            )\n                        )}\n                  </div>\n              </div>\n          </div>\n\n\n\n          {/* Aksiyon Butonu (DEĞİŞMEDİ) */}\n\n          <div className=\"step-actions\">\n\n              <button \n\n                  className=\"btn btn-primary btn-lg\" \n\n                  onClick={fetchNotionProperties} \n\n                  disabled={!selectedExcelId || !selectedWorksheetName || !notionDbId}>\n\n                  Notion Özelliklerini Getir ve Eşleştirmeye Geç\n\n              </button>\n\n          </div>\n\n      </div>\n\n  );\n\n  \n  \n  const renderMappingStep = () => {\n      // `leftItems` ve `idMappingItem`'ı burada türetiyoruz\n      const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n      const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n      const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n\n      // ID sütununu dışarıda tutarak haritalama listesini oluştur\n      const mappableLeftItems = leftItems.filter(item => item.name.toLowerCase() !== 'id');\n      const idMappingItem = leftItems.find(item => item.name.toLowerCase() === 'id');\n\n\n      // Eğer ID sütunu bulunamıyorsa veya mapping yoksa bir uyarı göster\n      if (!idMappingItem) {\n          return (\n              <div className=\"step-container\">\n                  <h2 style={{color: 'red'}}>HATA!</h2>\n                  <p>Senkronizasyonun çalışması için Excel dosyasında bir \"ID\" sütunu zorunludur. Lütfen dosyanızı kontrol edin veya yeni bir dosya seçin.</p>\n                  <button className=\"secondary-btn\" onClick={() => setStep('select')}>Geri Git</button>\n              </div>\n          );\n      }\n      \n      // ID sütunu için Notion tarafında eşleşme aranacak\n      const idSelectedRight = \n          idMappingItem ? (syncDirection === 'excel-to-notion' \n              ? mappings.find(m => m.excel_column.toLowerCase() === 'id')?.notion_property \n              : mappings.find(m => m.notion_property.toLowerCase() === 'id')?.excel_column\n          ) : '';\n      \n      // 🚨 Hata Düzeltmesi: setMessage çağrısı buradan kaldırıldı.\n\n      // Eğer ID seçiliyse VE global sync açıksa, ID de otomatik sync'e dahildir.\n      const isIDAutoSynced = !!idSelectedRight && autoSyncToggle;\n\n\n      return (\n          <div className=\"step-container\">\n              <h2>Adım 4: Sütunları Eşleştirin</h2>\n\n              {/* YÖN VE GLOBAL AYARLAR */}\n              <div className=\"mapping-control-panel\">\n                  <div className=\"toggle-buttons\">\n                      <button\n                          className={`btn-toggle ${syncDirection === 'excel-to-notion' ? 'active' : ''}`}\n                          onClick={() => setSyncDirection('excel-to-notion')}\n                      >\n                          Excel <span className=\"arrow\">→</span> Notion\n                      </button>\n                      <button\n                          className={`btn-toggle ${syncDirection === 'notion-to-excel' ? 'active' : ''}`}\n                          onClick={() => setSyncDirection('notion-to-excel')}\n                      >\n                          Notion <span className=\"arrow\">→</span> Excel\n                      </button>\n                  </div>\n\n                  <label className=\"auto-sync-toggle-global\">\n                      Otomatik Sync'i Aç\n                      <input\n                          type=\"checkbox\"\n                          checked={autoSyncToggle}\n                          // useEffect hook'u bu çağrıdan sonra ID'yi autoSyncColumns'a ekleyecektir.\n                          onChange={e => setAutoSyncToggle(e.target.checked)} \n                      />\n                  </label>\n              </div>\n              {/* YÖN VE GLOBAL AYARLAR SONU */}\n              \n              <p className=\"step-description\">\n                  Senkronize etmek istediğiniz her bir sütunu karşı taraftaki uygun sütunla eşleştirin.\n              </p>\n\n              <div className=\"mapping-list-header\">\n                  <div className=\"mapping-list-left-title\">{syncDirection === 'excel-to-notion' ? 'EXCEL SÜTUNLARI' : 'NOTION ÖZELLİKLERİ'}</div>\n                  <div className=\"mapping-list-right-title\">EŞLEŞTİRİLEN SÜTUN / ÖZELLİK</div>\n                  <div className=\"mapping-list-autosync-title\">OTOMATİK SYNC</div>\n              </div>\n\n              <div className=\"mapping-list-body\">\n                  {/* 1. KRİTİK ID SÜTUNU (Zorunlu ve Sabit) */}\n                  <div className=\"mapping-row mapping-row-critical\">\n                      <div className=\"mapping-left\">ID (Kritik Eşleşme)</div>\n                      <div className=\"mapping-right\">\n                          <select\n                              value={idSelectedRight || ''}\n                              onChange={e => handleMappingChange(idMappingItem.name, e.target.value)}\n                              // ID eşleşmesi her zaman olmalı\n                              style={{ backgroundColor: idSelectedRight ? '#e6fff0' : '#ffe6e6' }}\n                          >\n                              <option value=\"\">Seçiniz...</option>\n                              {rightItems.map(p => (\n                                  <option key={p.name} value={p.name}>\n                                      {p.name}\n                                      {/* Notion tarafında tip gösterimi eklendi */}\n                                      {syncDirection === 'excel-to-notion' && 'type' in p && p.type\n                                                  ? ` (${p.type})`\n                                                  : ''} \n                                  </option>\n                              ))}\n                          </select>\n                          {!idSelectedRight && <p className=\"info-text\" style={{margin: '5px 0 0 0', textAlign: 'left', color: '#dc3545'}}>KRİTİK: ID sütununu eşleştirmelisiniz.</p>}\n                      </div>\n                      {/* 🚨 GÜNCELLENMİŞ ID AUTOSYNC KISMI: Global toggle'a bağlı */}\n                      <div className=\"mapping-autosync\">\n                          {/* ID seçiliyse ve global sync açıksa: Otomatik açık */}\n                          {isIDAutoSynced ? (\n                              <span style={{ color: '#28a745', fontWeight: 'bold' }}>Açık (Zorunlu)</span>\n                          ) : (\n                              // Global Sync kapalıysa veya ID seçili değilse: Uyarı\n                              <span className=\"info-text\">\n                                  {autoSyncToggle ? 'Eşleştirme bekleniyor' : 'Global Kapalı'}\n                              </span>\n                          )}\n                      </div>\n                  </div>\n\n                  {/* 2. DİĞER EŞLEŞTİRMELER */}\n                  {mappableLeftItems.map(item => {\n                      const leftName = item.name;\n                      const mapping = mappings.find(m => \n                          syncDirection === 'excel-to-notion' \n                              ? m.excel_column === leftName \n                              : m.notion_property === leftName\n                      ) || { excel_column: '', notion_property: '', data_type: '' };\n                      \n                      const selectedRight =\n                          syncDirection === 'excel-to-notion' ? mapping.notion_property : mapping.excel_column;\n                      \n                      // ID zaten ayrı bir bölümde işlendiği için burada tekrar kontrol etmiyoruz\n                      const isAutoSynced = autoSyncColumns.includes(leftName); \n                      \n                      return (\n                          <div className={`mapping-row ${selectedRight ? 'is-mapped' : ''}`} key={leftName}>\n                              <div className=\"mapping-left\">{leftName}</div>\n                              <div className=\"mapping-right\">\n                                  <select\n                                      value={selectedRight || ''}\n                                      onChange={e => handleMappingChange(leftName, e.target.value)}\n                                  >\n                                      <option value=\"\">Eşleştirme Yapma</option>\n                                      {rightItems.map(p => (\n                                          <option key={p.name} value={p.name}>\n                                              {syncDirection === 'excel-to-notion' && 'type' in p && p.type\n                                                  ? `${p.name} (${p.type})`\n                                                  : p.name}\n                                          </option>\n                                      ))}\n                                  </select>\n                              </div>\n                              <div className=\"mapping-autosync\">\n                                  <label className=\"auto-sync-checkbox-label\">\n                                      <input\n                                          type=\"checkbox\"\n                                          disabled={!autoSyncToggle || !selectedRight} // Global kapalıysa veya eşleşme yapılmadıysa devre dışı\n                                          checked={isAutoSynced}\n                                          onChange={e => handleAutoSyncColumnChange(leftName, e.target.checked)}\n                                      />\n                                      {isAutoSynced ? 'Açık' : 'Kapalı'}\n                                  </label>\n                              </div>\n                          </div>\n                      );\n                  })}\n              </div>\n              \n              {/* 3. NOTION'DA OLMAYAN SÜTUNLARI OLUŞTURMA */}\n              {syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && (\n                  <div className=\"unmatched-columns-card\">\n                      <h3>Notion'da Olmayan Excel Sütunları</h3>\n                      <p>Bu sütunları, Notion'da yeni <strong>Zengin Metin (Rich Text)</strong> özelliği olarak eklemek için işaretleyin:</p>\n                      <div className=\"column-creation-options\">\n                          {unmatchedColumns.map(c => (\n                              <label key={c} className=\"checkbox-label\">\n                                  <input\n                                      type=\"checkbox\"\n                                      checked={selectedColumnsToCreate.includes(c)}\n                                      onChange={e => handleCreateColumnChange(c, e.target.checked)}\n                                  />\n                                  {c}\n                              </label>\n                          ))}\n                      </div>\n                  </div>\n              )}\n\n              {/* 4. SENKRONİZASYONU BAŞLAT BUTONU */}\n              <div className=\"sync-buttons step-actions\">\n                  <button\n                      className=\"btn btn-primary btn-lg\"\n                      onClick={saveMappings}\n                      disabled={!idSelectedRight}\n                  >\n                      Senkronizasyonu Başlat\n                  </button>\n              </div>\n          </div>\n      );\n  };\n\n  const renderCompleteStep = () => (\n    <div className=\"step-container\">\n      <h2>Senkr. Tamamlandı!</h2>\n      <p>{message}</p>\n      <button className=\"primary-btn\" onClick={() => setStep('select')}>Yeni Senkronizasyon</button>\n      <button className=\"secondary-btn\" onClick={() => setStep('dashboard')} style={{marginLeft: '10px'}}>Dashboard'a Git</button>\n    </div>\n  );\n  \n\n  \n\n  const renderConnectStepHomeOrApp = () => {\n      \n\n      // Diğer uygulama adımları\n      switch (step) {\n          case 'home':\n              return <Home setStep={setStep} />;\n          case 'privacy':\n              return <PrivacyPolicy />;\n          case 'quick_start': // 👈 YENİ\n              return <QuickStart setStep={setStep} />;     \n          case 'terms':\n              return <TermsAndConditions />;    \n          case 'connect':\n              return renderConnectStep();\n          case 'notion_connect':\n              return renderNotionConnectStep();\n          case 'pricing': \n              return <Pricing setStep={setStep} />;    \n          case 'select':\n              return renderSelectStep();\n          case 'mapping':\n              return renderMappingStep();\n          case 'complete':\n              return renderCompleteStep();\n          case 'dashboard':\n              return <Dashboard />;\n          case 'profile': // YENİ EKLENTİ\n                return <Profile setStep={function (step: 'home' | 'connect'): void {\n                    throw new Error('Function not implemented.');\n                } } />;\n          case 'faq':\n                return <FAQPage setStep={setStep as (step: string) => void} />;          \n          default:\n              return null;\n      }\n  }\n\n\n  return (\n    <div className=\"App\">\n      {/* 🚨 HeaderComponent her zaman görünür, içeriği login durumuna göre değişir */}\n      <HeaderComponent setStep={setStep} userEmail={userEmail} />\n\n      {/* --- ANA BAŞLIK BÖLÜMÜNÜ KALDIRIYORUZ --- */}\n      {/* Ana başlık ve global Sync butonlarını artık HeaderComponent veya Dashboard'da yöneteceğiz */}\n      {/* Aşağıdaki <header> bloğu artık gereksizdir ve kaldırılmalıdır. */}\n\n      <main>\n        {/* Adımı render eden fonksiyona yönlendiriyoruz */}\n        {renderConnectStepHomeOrApp()}\n      </main>\n\n      {/* 🚨 GLOBAL FOOTER: setStep'i ileterek her sayfada görünmesini sağlıyoruz */}\n      <FooterComponent setStep={setStep} /> \n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}