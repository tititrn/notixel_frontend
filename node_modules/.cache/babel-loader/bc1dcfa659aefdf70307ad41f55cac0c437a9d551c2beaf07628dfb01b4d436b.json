{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './AutoSyncDashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:8000';\nfunction App() {\n  _s();\n  const [step, setStep] = useState('connect');\n  const [syncDirection, setSyncDirection] = useState('excel-to-notion');\n  const [autoSyncToggle, setAutoSyncToggle] = useState(false);\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [notionProperties, setNotionProperties] = useState([]);\n  const [selectedExcelId, setSelectedExcelId] = useState('');\n  const [notionDbId, setNotionDbId] = useState('');\n  const [message, setMessage] = useState('');\n  const [userId, setUserId] = useState(null);\n  const [excelToNotionMappings, setExcelToNotionMappings] = useState([]);\n  const [notionToExcelMappings, setNotionToExcelMappings] = useState([]);\n  const [unmatchedColumns, setUnmatchedColumns] = useState([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState([]);\n  const [autoSyncColumns, setAutoSyncColumns] = useState([]);\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else setStep('connect');\n  }, []);\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n  const fetchExcelFiles = async currentUserId => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchExcelColumns = async fileId => {\n    if (!userId) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map(name => ({\n          name\n        }));\n        const hasId = columns.some(c => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setExcelToNotionMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setExcelToNotionMappings(columns.map(c => ({\n          excel_column: c.name,\n          notion_property: '',\n          data_type: ''\n        })));\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n        const notionPropNames = data.properties.map(p => p.name.toLowerCase());\n        const unmatched = excelColumns.filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id').map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate([]);\n        setNotionToExcelMappings(data.properties.map(prop => ({\n          excel_column: '',\n          notion_property: prop.name,\n          data_type: prop.type || ''\n        })));\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n  const handleMappingChange = (leftName, rightName) => {\n    if (syncDirection === 'excel-to-notion') {\n      setExcelToNotionMappings(prev => prev.map(m => {\n        var _notionProperties$fin;\n        return m.excel_column === leftName ? {\n          ...m,\n          notion_property: rightName,\n          data_type: ((_notionProperties$fin = notionProperties.find(p => p.name === rightName)) === null || _notionProperties$fin === void 0 ? void 0 : _notionProperties$fin.type) || ''\n        } : m;\n      }));\n    } else {\n      setNotionToExcelMappings(prev => prev.map(m => m.notion_property === leftName ? {\n        ...m,\n        excel_column: rightName\n      } : m));\n    }\n  };\n  const handleCreateColumnChange = (colName, checked) => {\n    setSelectedColumnsToCreate(prev => checked ? [...prev, colName] : prev.filter(c => c !== colName));\n  };\n  const handleAutoSyncColumnChange = (colName, checked) => {\n    // KRİTİK DÜZELTME: Karşılaştırma kolaylığı için temizlenmiş/küçük harfli ismi kullanıyoruz\n    const cleanColName = colName.toLowerCase().trim();\n    setAutoSyncColumns(prev => checked ? [...prev, cleanColName] : prev.filter(c => c !== cleanColName));\n  };\n\n  // Mevcut konum: Satır 159 civarı\n  const saveMappings = async () => {\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı.');\n      return;\n    }\n\n    // ... (validMappings oluşturma ve ID kontrolü kodları aynı kalır) ...\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    const validMappings = mappings.filter(m => syncDirection === 'excel-to-notion' ? m.notion_property.trim() !== '' : m.excel_column.trim() !== '');\n    if (validMappings.length === 0) {\n      setMessage(\"En az bir sütunu eşleştirin.\");\n      return;\n    }\n    const idMappingExists = validMappings.some(m => syncDirection === 'excel-to-notion' && m.excel_column.toLowerCase() === 'id' || syncDirection === 'notion-to-excel' && m.notion_property.toLowerCase() === 'id');\n    if (!idMappingExists) {\n      setMessage(\"Senkronizasyon için 'ID' sütununun eşleştirilmesi zorunludur.\");\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/save-mapping?user_id=${userId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(validMappings)\n      });\n      const data = await res.json();\n      if (res.ok) {\n        const allSavedMappings = data.saved_mappings || [];\n        setMessage(\"Eşleşmeler başarıyla kaydedildi. Senkronizasyon başlatılıyor...\");\n        startSync(syncDirection, allSavedMappings);\n      } else {\n        const err = data;\n        setMessage(`Eşleşmeler kaydedilemedi: ${err.error || err.detail}`);\n      }\n    } catch {\n      setMessage('Eşleşmeleri kaydederken ağ hatası oluştu.');\n    }\n  };\n  const startSync = async (direction, allSavedMappings) => {\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı.');\n      return;\n    }\n    let successMessage = 'Senkronizasyon başarıyla tamamlandı.';\n\n    // KRİTİK: autoSyncColumns zaten temizlenmiş isimler içeriyor (handleAutoSyncColumnChange sayesinde).\n    // Gelen Mapping verisinin de ismini temizleyip doğrudan karşılaştırıyoruz.\n\n    const autoSyncMappingIds = allSavedMappings.filter(m => {\n      // Eşleşmenin Excel veya Notion tarafındaki ismini bul\n      const columnName = direction === 'excel-to-notion' ? m.excel_column : m.notion_property;\n      // Gelen veriyi de küçük harfe çevirip boşlukları temizle.\n      const cleanColumnName = columnName.toLowerCase().trim();\n\n      // Eğer cleanColumnName, temizlenmiş autoSyncColumns listesi içinde varsa ID'yi al.\n      return autoSyncColumns.includes(cleanColumnName);\n    }).map(m => m.id);\n\n    // AutoSync için gerekli veriyi toparlayalım\n    const autoSyncCreationData = {\n      user_id: parseInt(userId, 10),\n      excel_file_id: selectedExcelId,\n      notion_database_id: notionDbId,\n      direction: direction,\n      interval_minutes: 60,\n      mapping_ids: autoSyncMappingIds // ARTIK DOLU OLMALI!\n    };\n    console.log(\"Frontend'den Gönderilen AutoSync Verisi:\", autoSyncCreationData);\n    try {\n      // 1. MANUEL SENKRONİZASYONU BAŞLAT (Kalan kodunuzla aynı)\n      const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          columns_to_create: direction === 'excel-to-notion' ? selectedColumnsToCreate : []\n        })\n      });\n      if (!res.ok) {\n        const err = await res.json();\n        throw new Error(`Manuel Senkronizasyon başarısız: ${err.detail || err.error}`);\n      }\n\n      // 2. OTOMATİK SYNC KONFİGÜRASYONUNU OLUŞTUR\n      // Koşul: toggle açık VE en az bir ID seçili\n      if (autoSyncToggle && autoSyncMappingIds.length > 0) {\n        const autoSyncRes = await fetch(`${API_BASE_URL}/autosync/create`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(autoSyncCreationData)\n        });\n        const autoSyncData = await autoSyncRes.json();\n        if (!autoSyncRes.ok) {\n          successMessage += ` Ancak Otomatik Sync yapılandırılamadı: ${autoSyncData.detail || 'Bilinmeyen Hata'}`;\n        } else {\n          successMessage = `Manuel senkronizasyon tamamlandı ve Otomatik Sync yapılandırıldı. (${autoSyncData.message})`;\n        }\n      }\n      setStep('complete');\n      setMessage(successMessage);\n    } catch (e) {\n      setMessage(`Senkronizasyon İşlemi Sırasında Hata: ${e.message || e.toString()}`);\n    }\n  };\n  const renderConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: handleMicrosoftConnect,\n      children: \"Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 5\n  }, this);\n  const renderSelectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Excel Dosyas\\u0131 Se\\xE7in:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedExcelId,\n        onChange: e => {\n          setSelectedExcelId(e.target.value);\n          fetchExcelColumns(e.target.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Dosya Se\\xE7iniz...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), excelFiles.map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: f.id,\n          children: f.name\n        }, f.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 32\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Notion Veritaban\\u0131 ID'si:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: notionDbId,\n        onChange: e => setNotionDbId(e.target.value),\n        placeholder: \"Veritaban\\u0131 ID'sini yap\\u0131\\u015Ft\\u0131r\\u0131n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: fetchNotionProperties,\n      disabled: !selectedExcelId || !notionDbId,\n      children: \"Notion \\xD6zelliklerini Getir\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 5\n  }, this);\n  const renderMappingStep = () => {\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"S\\xFCtunlar\\u0131 E\\u015Fle\\u015Ftirin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: syncDirection === 'excel-to-notion' ? 'active' : '',\n            onClick: () => setSyncDirection('excel-to-notion'),\n            children: \"Excel \\u2192 Notion\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: syncDirection === 'notion-to-excel' ? 'active' : '',\n            onClick: () => setSyncDirection('notion-to-excel'),\n            children: \"Notion \\u2192 Excel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"auto-sync-toggle\",\n          children: [\"Otomatik Sync\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: autoSyncToggle,\n            onChange: e => setAutoSyncToggle(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-grid\",\n        children: leftItems.map((item, idx) => {\n          const leftName = item.name;\n          const mapping = mappings[idx] || {\n            excel_column: '',\n            notion_property: '',\n            data_type: ''\n          };\n          const selectedRight = syncDirection === 'excel-to-notion' ? mapping.notion_property : mapping.excel_column;\n          const cleanLeftName = leftName.toLowerCase().trim();\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mapping-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-left\",\n              children: leftName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-right\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedRight || '',\n                onChange: e => handleMappingChange(leftName, e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Se\\xE7iniz...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 21\n                }, this), rightItems.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: p.name,\n                  children: syncDirection === 'excel-to-notion' ? 'type' in p && p.type ? `${p.name} (${p.type})` : p.name : p.name\n                }, p.name, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 19\n              }, this), autoSyncToggle && /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                className: \"auto-sync-checkbox\",\n                checked: autoSyncColumns.includes(cleanLeftName),\n                onChange: e => handleAutoSyncColumnChange(leftName, e.target.checked),\n                title: \"Otomatik Sync\\u2019e Dahil Et\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 17\n            }, this)]\n          }, leftName, true, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unmatched-columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notion'da Olmayan S\\xFCtunlar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Excel\\u2019de olan, Notion\\u2019da olmayan s\\xFCtunlar\\u0131 eklemek i\\xE7in i\\u015Faretleyin:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }, this), unmatchedColumns.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"checkbox-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedColumnsToCreate.includes(c),\n            onChange: e => handleCreateColumnChange(c, e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 17\n          }, this), c]\n        }, c, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sync-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"primary-btn\",\n          onClick: saveMappings,\n          children: \"Senkronizasyon Ba\\u015Flat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this);\n  };\n  const renderCompleteStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Senkr. Tamamland\\u0131!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: () => setStep('select'),\n      children: \"Yeni Senkronizasyon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 428,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Excel \\u2194 Notion Senkronizasyonu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setStep('dashboard'),\n        children: \"Otomatik Sync Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [step === 'connect' && renderConnectStep(), step === 'select' && renderSelectStep(), step === 'mapping' && renderMappingStep(), step === 'complete' && renderCompleteStep(), step === 'dashboard' && /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 435,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RWKJHc3dkcn/XGcbrTxAKYhOVsA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dashboard","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","step","setStep","syncDirection","setSyncDirection","autoSyncToggle","setAutoSyncToggle","excelFiles","setExcelFiles","excelColumns","setExcelColumns","notionProperties","setNotionProperties","selectedExcelId","setSelectedExcelId","notionDbId","setNotionDbId","message","setMessage","userId","setUserId","excelToNotionMappings","setExcelToNotionMappings","notionToExcelMappings","setNotionToExcelMappings","unmatchedColumns","setUnmatchedColumns","selectedColumnsToCreate","setSelectedColumnsToCreate","autoSyncColumns","setAutoSyncColumns","params","URLSearchParams","window","location","search","authSuccess","get","receivedUserId","storedUserId","localStorage","getItem","setItem","fetchExcelFiles","history","replaceState","document","title","pathname","handleMicrosoftConnect","href","currentUserId","res","fetch","data","json","ok","files","error","fetchExcelColumns","fileId","columns","map","name","hasId","some","c","toLowerCase","excel_column","notion_property","data_type","fetchNotionProperties","properties","notionPropNames","p","unmatched","filter","col","includes","prop","type","handleMappingChange","leftName","rightName","prev","m","_notionProperties$fin","find","handleCreateColumnChange","colName","checked","handleAutoSyncColumnChange","cleanColName","trim","saveMappings","mappings","validMappings","length","idMappingExists","method","headers","body","JSON","stringify","allSavedMappings","saved_mappings","startSync","err","detail","direction","successMessage","autoSyncMappingIds","columnName","cleanColumnName","id","autoSyncCreationData","user_id","parseInt","excel_file_id","notion_database_id","interval_minutes","mapping_ids","console","log","columns_to_create","Error","autoSyncRes","autoSyncData","e","toString","renderConnectStep","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","renderSelectStep","value","onChange","target","f","placeholder","disabled","renderMappingStep","leftItems","rightItems","item","idx","mapping","selectedRight","cleanLeftName","renderCompleteStep","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './AutoSyncDashboard';\n\ntype AppStep = 'connect' | 'select' | 'mapping' | 'complete' | 'dashboard';\ntype ExcelFile = { id: string; name: string };\ntype ExcelColumn = { name: string };\ntype NotionProperty = { name: string; type?: string };\ntype Mapping = { excel_column: string; notion_property: string; data_type: string };\n\nconst API_BASE_URL = 'http://127.0.0.1:8000';\n\nfunction App() {\n  const [step, setStep] = useState<AppStep>('connect');\n  const [syncDirection, setSyncDirection] = useState<'excel-to-notion' | 'notion-to-excel'>('excel-to-notion');\n  const [autoSyncToggle, setAutoSyncToggle] = useState(false);\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\n  const [excelColumns, setExcelColumns] = useState<ExcelColumn[]>([]);\n  const [notionProperties, setNotionProperties] = useState<NotionProperty[]>([]);\n  const [selectedExcelId, setSelectedExcelId] = useState<string>('');\n  const [notionDbId, setNotionDbId] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n  const [userId, setUserId] = useState<string | null>(null);\n\n  const [excelToNotionMappings, setExcelToNotionMappings] = useState<Mapping[]>([]);\n  const [notionToExcelMappings, setNotionToExcelMappings] = useState<Mapping[]>([]);\n  \n  const [unmatchedColumns, setUnmatchedColumns] = useState<string[]>([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState<string[]>([]);\n  \n  const [autoSyncColumns, setAutoSyncColumns] = useState<string[]>([]);\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else setStep('connect');\n  }, []);\n\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n\n  const fetchExcelFiles = async (currentUserId: string) => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);\n      else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchExcelColumns = async (fileId: string) => {\n    if (!userId) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map((name: string) => ({ name }));\n        const hasId = columns.some((c: ExcelColumn) => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setExcelToNotionMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setExcelToNotionMappings(columns.map((c: ExcelColumn) => ({\n          excel_column: c.name,\n          notion_property: '',\n          data_type: ''\n        })));\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n\n        const notionPropNames = data.properties.map((p: NotionProperty) => p.name.toLowerCase());\n        const unmatched = excelColumns\n          .filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id')\n          .map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate([]);\n\n        setNotionToExcelMappings(data.properties.map((prop: NotionProperty) => ({\n          excel_column: '',\n          notion_property: prop.name,\n          data_type: prop.type || ''\n        })));\n\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n\n  const handleMappingChange = (leftName: string, rightName: string) => {\n    if (syncDirection === 'excel-to-notion') {\n      setExcelToNotionMappings(prev =>\n        prev.map(m =>\n          m.excel_column === leftName\n            ? { ...m, notion_property: rightName, data_type: notionProperties.find(p => p.name === rightName)?.type || '' }\n            : m\n        )\n      );\n    } else {\n      setNotionToExcelMappings(prev =>\n        prev.map(m =>\n          m.notion_property === leftName\n            ? { ...m, excel_column: rightName }\n            : m\n        )\n      );\n    }\n  };\n\n  const handleCreateColumnChange = (colName: string, checked: boolean) => {\n    setSelectedColumnsToCreate(prev =>\n      checked ? [...prev, colName] : prev.filter(c => c !== colName)\n    );\n  };\n\n  \n  const handleAutoSyncColumnChange = (colName: string, checked: boolean) => {\n      // KRİTİK DÜZELTME: Karşılaştırma kolaylığı için temizlenmiş/küçük harfli ismi kullanıyoruz\n      const cleanColName = colName.toLowerCase().trim();\n\n      setAutoSyncColumns(prev =>\n        checked \n          ? [...prev, cleanColName] \n          : prev.filter(c => c !== cleanColName)\n      );\n  };\n\n  \n  \n\n// Mevcut konum: Satır 159 civarı\nconst saveMappings = async () => {\n    if (!userId) { setMessage('Kullanıcı kimliği bulunamadı.'); return; }\n\n    // ... (validMappings oluşturma ve ID kontrolü kodları aynı kalır) ...\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    const validMappings = mappings.filter(m =>\n        syncDirection === 'excel-to-notion' ? m.notion_property.trim() !== '' : m.excel_column.trim() !== ''\n    );\n    \n    if (validMappings.length === 0) { setMessage(\"En az bir sütunu eşleştirin.\"); return; }\n    \n    const idMappingExists = validMappings.some(m => \n        (syncDirection === 'excel-to-notion' && m.excel_column.toLowerCase() === 'id') ||\n        (syncDirection === 'notion-to-excel' && m.notion_property.toLowerCase() === 'id')\n    );\n    \n    if (!idMappingExists) {\n        setMessage(\"Senkronizasyon için 'ID' sütununun eşleştirilmesi zorunludur.\");\n        return;\n    }\n\n    try {\n        const res = await fetch(`${API_BASE_URL}/save-mapping?user_id=${userId}`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(validMappings),\n        });\n        \n        const data = await res.json(); \n        \n        if (res.ok) {\n            const allSavedMappings: { id: number, excel_column: string, notion_property: string }[] = data.saved_mappings || []; \n            \n            setMessage(\"Eşleşmeler başarıyla kaydedildi. Senkronizasyon başlatılıyor...\");\n            \n            startSync(syncDirection, allSavedMappings); \n        } else {\n            const err = data;\n            setMessage(`Eşleşmeler kaydedilemedi: ${err.error || err.detail}`);\n        }\n    } catch {\n        setMessage('Eşleşmeleri kaydederken ağ hatası oluştu.');\n    }\n};\n\nconst startSync = async (\n    direction: 'excel-to-notion' | 'notion-to-excel',\n    allSavedMappings: { id: number, excel_column: string, notion_property: string }[] \n) => {\n    if (!userId) {\n        setMessage('Kullanıcı kimliği bulunamadı.');\n        return;\n    }\n\n    let successMessage = 'Senkronizasyon başarıyla tamamlandı.';\n\n    // KRİTİK: autoSyncColumns zaten temizlenmiş isimler içeriyor (handleAutoSyncColumnChange sayesinde).\n    // Gelen Mapping verisinin de ismini temizleyip doğrudan karşılaştırıyoruz.\n    \n    const autoSyncMappingIds = allSavedMappings\n        .filter(m => {\n            // Eşleşmenin Excel veya Notion tarafındaki ismini bul\n            const columnName = direction === 'excel-to-notion' ? m.excel_column : m.notion_property;\n            // Gelen veriyi de küçük harfe çevirip boşlukları temizle.\n            const cleanColumnName = columnName.toLowerCase().trim();\n            \n            // Eğer cleanColumnName, temizlenmiş autoSyncColumns listesi içinde varsa ID'yi al.\n            return autoSyncColumns.includes(cleanColumnName);\n        })\n        .map(m => m.id);\n\n\n    // AutoSync için gerekli veriyi toparlayalım\n    const autoSyncCreationData = {\n        user_id: parseInt(userId, 10),\n        excel_file_id: selectedExcelId,\n        notion_database_id: notionDbId,\n        direction: direction,\n        interval_minutes: 60,\n        mapping_ids: autoSyncMappingIds, // ARTIK DOLU OLMALI!\n    };\n    \n    console.log(\"Frontend'den Gönderilen AutoSync Verisi:\", autoSyncCreationData); \n\n    try {\n        // 1. MANUEL SENKRONİZASYONU BAŞLAT (Kalan kodunuzla aynı)\n        const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                 excel_file_id: selectedExcelId,\n                 notion_database_id: notionDbId,\n                 user_id: parseInt(userId, 10),\n                 columns_to_create:\n                     direction === 'excel-to-notion' ? selectedColumnsToCreate : [],\n            }),\n        });\n\n        if (!res.ok) {\n            const err = await res.json();\n            throw new Error(`Manuel Senkronizasyon başarısız: ${err.detail || err.error}`);\n        }\n\n        // 2. OTOMATİK SYNC KONFİGÜRASYONUNU OLUŞTUR\n        // Koşul: toggle açık VE en az bir ID seçili\n        if (autoSyncToggle && autoSyncMappingIds.length > 0) { \n            const autoSyncRes = await fetch(`${API_BASE_URL}/autosync/create`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(autoSyncCreationData),\n            });\n\n            const autoSyncData = await autoSyncRes.json();\n\n            if (!autoSyncRes.ok) {\n                successMessage += ` Ancak Otomatik Sync yapılandırılamadı: ${autoSyncData.detail || 'Bilinmeyen Hata'}`;\n            } else {\n                successMessage = `Manuel senkronizasyon tamamlandı ve Otomatik Sync yapılandırıldı. (${autoSyncData.message})`;\n            }\n        }\n\n        setStep('complete');\n        setMessage(successMessage);\n    } catch (e: any) {\n        setMessage(`Senkronizasyon İşlemi Sırasında Hata: ${e.message || e.toString()}`);\n    }\n};\n\n\n\n\n\n\n  const renderConnectStep = () => (\n    <div className=\"step-container\">\n      <button className=\"primary-btn\" onClick={handleMicrosoftConnect}>Microsoft Hesabını Bağla</button>\n    </div>\n  );\n\n  const renderSelectStep = () => (\n    <div className=\"step-container grid\">\n      <div className=\"field\">\n        <label>Excel Dosyası Seçin:</label>\n        <select value={selectedExcelId} onChange={e => { setSelectedExcelId(e.target.value); fetchExcelColumns(e.target.value); }}>\n          <option value=\"\">Dosya Seçiniz...</option>\n          {excelFiles.map(f => <option key={f.id} value={f.id}>{f.name}</option>)}\n        </select>\n      </div>\n      <div className=\"field\">\n        <label>Notion Veritabanı ID'si:</label>\n        <input type=\"text\" value={notionDbId} onChange={e => setNotionDbId(e.target.value)} placeholder=\"Veritabanı ID'sini yapıştırın\" />\n      </div>\n      <button className=\"primary-btn\" onClick={fetchNotionProperties} disabled={!selectedExcelId || !notionDbId}>Notion Özelliklerini Getir</button>\n    </div>\n  );\n\n  const renderMappingStep = () => {\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n\n    return (\n      <div className=\"step-container\">\n        <h2>Sütunları Eşleştirin</h2>\n\n        <div className=\"toggle-row\">\n          <div className=\"toggle-buttons\">\n            <button\n              className={syncDirection === 'excel-to-notion' ? 'active' : ''}\n              onClick={() => setSyncDirection('excel-to-notion')}\n            >\n              Excel → Notion\n            </button>\n            <button\n              className={syncDirection === 'notion-to-excel' ? 'active' : ''}\n              onClick={() => setSyncDirection('notion-to-excel')}\n            >\n              Notion → Excel\n            </button>\n          </div>\n\n          <label className=\"auto-sync-toggle\">\n            Otomatik Sync\n            <input\n              type=\"checkbox\"\n              checked={autoSyncToggle}\n              onChange={e => setAutoSyncToggle(e.target.checked)}\n            />\n          </label>\n        </div>\n\n        <div className=\"mapping-grid\">\n          {leftItems.map((item, idx) => {\n            const leftName = item.name;\n            const mapping = mappings[idx] || { excel_column: '', notion_property: '', data_type: '' };\n            const selectedRight =\n              syncDirection === 'excel-to-notion' ? mapping.notion_property : mapping.excel_column;\n            \n            const cleanLeftName = leftName.toLowerCase().trim();  \n            return (\n              <div className=\"mapping-row\" key={leftName}>\n                <div className=\"mapping-left\">{leftName}</div>\n                <div className=\"mapping-right\">\n                  <select\n                    value={selectedRight || ''}\n                    onChange={e => handleMappingChange(leftName, e.target.value)}\n                  >\n                    <option value=\"\">Seçiniz...</option>\n                    {rightItems.map(p => (\n                      <option key={p.name} value={p.name}>\n                        {syncDirection === 'excel-to-notion'\n                          ? 'type' in p && p.type ? `${p.name} (${p.type})` : p.name\n                          : p.name}\n                      </option>\n                    ))}\n                  </select>\n\n                  {autoSyncToggle && (\n                    <input\n                      type=\"checkbox\"\n                      className=\"auto-sync-checkbox\"\n                      checked={autoSyncColumns.includes(cleanLeftName)}\n                      onChange={e => handleAutoSyncColumnChange(leftName, e.target.checked)}\n                      title=\"Otomatik Sync’e Dahil Et\"\n                    />\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && (\n          <div className=\"unmatched-columns\">\n            <h3>Notion'da Olmayan Sütunlar</h3>\n            <p>Excel’de olan, Notion’da olmayan sütunları eklemek için işaretleyin:</p>\n            {unmatchedColumns.map(c => (\n              <label key={c} className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedColumnsToCreate.includes(c)}\n                  onChange={e => handleCreateColumnChange(c, e.target.checked)}\n                />\n                {c}\n              </label>\n            ))}\n          </div>\n        )}\n\n        <div className=\"sync-buttons\">\n          <button\n            className=\"primary-btn\"\n            onClick={saveMappings}\n          >\n            Senkronizasyon Başlat\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  const renderCompleteStep = () => (\n    <div className=\"step-container\">\n      <h2>Senkr. Tamamlandı!</h2>\n      <button className=\"primary-btn\" onClick={() => setStep('select')}>Yeni Senkronizasyon</button>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Excel ↔ Notion Senkronizasyonu</h1>\n        {message && <div className=\"message\">{message}</div>}\n        <button onClick={() => setStep('dashboard')}>Otomatik Sync Dashboard</button>\n      </header>\n      <main>\n        {step === 'connect' && renderConnectStep()}\n        {step === 'select' && renderSelectStep()}\n        {step === 'mapping' && renderMappingStep()}\n        {step === 'complete' && renderCompleteStep()}\n        {step === 'dashboard' && <Dashboard />}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}