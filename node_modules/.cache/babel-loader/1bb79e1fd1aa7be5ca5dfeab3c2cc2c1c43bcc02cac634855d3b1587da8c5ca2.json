{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:8000';\nfunction App() {\n  _s();\n  const [step, setStep] = useState('connect');\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [notionProperties, setNotionProperties] = useState([]);\n  const [selectedExcelId, setSelectedExcelId] = useState('');\n  const [notionDbId, setNotionDbId] = useState('');\n  const [message, setMessage] = useState('');\n  const [userId, setUserId] = useState(null);\n  const [mappings, setMappings] = useState([]);\n  const [unmatchedColumns, setUnmatchedColumns] = useState([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState([]);\n  const allExcelColumnNames = excelColumns.map(col => col.name);\n  const allNotionPropertyNames = notionProperties.map(prop => prop.name);\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const authError = params.get('auth_error');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (authError === 'true') {\n      setMessage(`Yetkilendirme hatası: ${params.get('message')}`);\n      setStep('connect');\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else {\n      setStep('connect');\n    }\n  }, []);\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n  const handleNotionConnect = () => {\n    setMessage('Notion hesabınızı bağlamak için, Notion\\'da herhangi bir veritabanı veya sayfasına gidin, \"...\" menüsünden \"Add connections\"ı seçin ve oluşturduğunuz entegrasyonu (\"Excel Sync\") ekleyin.');\n  };\n  const fetchExcelFiles = async currentUserId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setExcelFiles(data.files);\n      } else {\n        setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchExcelColumns = async fileId => {\n    if (!userId) return;\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await response.json();\n      if (response.ok) {\n        const columns = data.columns.map(name => ({\n          name\n        }));\n        const hasIdColumn = columns.some(col => col.name.toLowerCase() === 'id');\n        if (!hasIdColumn) {\n          setMessage('Seçtiğiniz Excel dosyasında \"ID\" adında bir sütun bulunmuyor. Senkronizasyon için bir \"ID\" sütunu gereklidir. Lütfen dosyanızı güncelleyin veya başka bir dosya seçin.');\n          setExcelColumns([]);\n          setMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setMappings(data.columns.map(name => ({\n          excel_column: name,\n          notion_property: '',\n          data_type: ''\n        })));\n        setMessage('');\n      } else {\n        setMessage(`Excel sütunları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen bir Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setNotionProperties(data.properties);\n        const notionPropNames = data.properties.map(p => p.name.toLowerCase());\n        const unmatched = excelColumns.filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id').map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate(unmatched);\n        setStep('mapping');\n        setMessage('');\n      } else {\n        setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n  const handleExcelFileChange = e => {\n    const fileId = e.target.value;\n    setSelectedExcelId(fileId);\n    if (fileId) {\n      fetchExcelColumns(fileId);\n    }\n  };\n  const handleMappingChange = (excelColumnName, notionPropertyName) => {\n    setMappings(prevMappings => {\n      const newMappings = [...prevMappings];\n      const mappingIndex = newMappings.findIndex(m => m.excel_column === excelColumnName);\n      if (mappingIndex > -1) {\n        const selectedNotionProp = notionProperties.find(p => p.name === notionPropertyName);\n        newMappings[mappingIndex] = {\n          ...newMappings[mappingIndex],\n          notion_property: notionPropertyName,\n          data_type: (selectedNotionProp === null || selectedNotionProp === void 0 ? void 0 : selectedNotionProp.type) || ''\n        };\n      }\n      return newMappings;\n    });\n  };\n  const handleCreateColumnChange = (columnName, isChecked) => {\n    setSelectedColumnsToCreate(prevSelected => isChecked ? [...prevSelected, columnName] : prevSelected.filter(name => name !== columnName));\n  };\n  const saveMappingAndStartSync = async syncDirection => {\n    setMessage('Eşleme kaydediliyor...');\n    try {\n      if (!userId || !selectedExcelId || !notionDbId) {\n        setMessage(\"Lütfen tüm alanları doldurun.\");\n        return;\n      }\n\n      // Mevcut eşlemeler\n      const currentMappings = mappings.map(m => ({\n        excel_column: m.excel_column,\n        notion_property: m.notion_property,\n        data_type: m.data_type // Backend bu değeri tekrar belirleyecek, yine de gönderelim\n      }));\n\n      // KRİTİK ADIM: Yeni oluşturulacak sütunları eşleme verisine ekle\n      const newColumnMappings = selectedColumnsToCreate.map(colName => ({\n        excel_column: colName,\n        notion_property: colName,\n        // Notion'da aynı isimle oluşturulacak\n        data_type: '' // Backend bu değeri doğru bir şekilde belirleyecek\n      }));\n\n      // Tüm eşlemeleri tek bir listede birleştir\n      const allMappings = [...currentMappings, ...newColumnMappings];\n\n      // Önce eşlemeleri veritabanına kaydet\n      const saveMappingResponse = await fetch(`${API_BASE_URL}/save-mapping`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          mapping_data: allMappings,\n          // BİRLEŞTİRİLMİŞ LİSTEYİ GÖNDER\n          user_id: parseInt(userId),\n          excel_file_id: selectedExcelId\n        })\n      });\n      if (!saveMappingResponse.ok) {\n        const errorData = await saveMappingResponse.json();\n        throw new Error(`Eşleme kaydetme hatası: ${errorData.detail}`);\n      }\n\n      // Ardından senkronizasyon işlemini başlat\n      setMessage('Senkronizasyon başlatılıyor...');\n      const syncResponse = await fetch(`${API_BASE_URL}/sync/${syncDirection}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId),\n          columns_to_create: selectedColumnsToCreate // Yeni sütunlar yine de gönderilsin\n        })\n      });\n      if (!syncResponse.ok) {\n        const errorData = await syncResponse.json();\n        throw new Error(`Senkronizasyon hatası: ${errorData.detail}`);\n      }\n      setMessage('Senkronizasyon tamamlandı!');\n      setStep('complete');\n    } catch (error) {\n      setMessage(`Hata: ${error.message}`);\n      console.error('Eşleme veya senkronizasyon sırasında hata oluştu:', error);\n    }\n  };\n  const renderConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMicrosoftConnect,\n      children: \"Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n  const renderSelectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Excel Dosyas\\u0131n\\u0131 ve Notion Veritaban\\u0131n\\u0131 Se\\xE7in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Excel Dosyas\\u0131 Se\\xE7in:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedExcelId,\n          onChange: handleExcelFileChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Dosya Se\\xE7iniz...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), excelFiles.map(file => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: file.id,\n            children: file.name\n          }, file.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Notion Veritaban\\u0131 ID'si:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: notionDbId,\n          onChange: e => setNotionDbId(e.target.value),\n          placeholder: \"Veritaban\\u0131 ID'sini yap\\u0131\\u015Ft\\u0131r\\u0131n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchNotionProperties,\n      disabled: !selectedExcelId || !notionDbId,\n      children: \"Notion \\xD6zelliklerini Getir\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n  const renderMappingStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"S\\xFCtunlar\\u0131 E\\u015Fle\\u015Ftirin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mapping-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Excel S\\xFCtunlar\\u0131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: excelColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"excel-name\",\n              children: column.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notion \\xD6zellikleri\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: mappings.map((mapping, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: mapping.notion_property,\n              onChange: e => handleMappingChange(mapping.excel_column, e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Se\\xE7iniz...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 19\n              }, this), notionProperties.map(prop => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: prop.name,\n                children: [prop.name, \" (\", prop.type, \")\"]\n              }, prop.name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), unmatchedColumns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unmatched-columns-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Notion'da Olmayan S\\xFCtunlar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A\\u015Fa\\u011F\\u0131daki Excel s\\xFCtunlar\\u0131 Notion veritaban\\u0131n\\u0131zda bulunamad\\u0131. Notion'da otomatik olarak olu\\u015Fturmak istediklerinizi se\\xE7in.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: unmatchedColumns.map(colName => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedColumnsToCreate.includes(colName),\n              onChange: e => handleCreateColumnChange(colName, e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 19\n            }, this), colName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 17\n          }, this)\n        }, colName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sync-buttons-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveMappingAndStartSync('excel-to-notion'),\n        disabled: !mappings.length,\n        children: \"Excel'den Notion'a E\\u015Fitle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveMappingAndStartSync('notion-to-excel'),\n        disabled: !mappings.length,\n        children: \"Notion'dan Excel'e E\\u015Fitle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n  const renderCompleteStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Senkronizasyon Ba\\u015Far\\u0131l\\u0131!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Se\\xE7ti\\u011Finiz y\\xF6nde senkronizasyon tamamland\\u0131. Uygulama, dosyan\\u0131zdaki de\\u011Fi\\u015Fiklikleri takip etmeye ve verileri otomatik olarak senkronize etmeye devam edecektir.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setStep('select'),\n      children: \"Yeni Senkronizasyon Ba\\u015Flat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Notion & Excel Senkronizasyonu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 21\n      }, this), step === 'connect' && renderConnectStep(), step === 'select' && renderSelectStep(), step === 'mapping' && renderMappingStep(), step === 'complete' && renderCompleteStep()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"c3WNaq/g3dsAkk+D9wYXhYk+vlE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","step","setStep","excelFiles","setExcelFiles","excelColumns","setExcelColumns","notionProperties","setNotionProperties","selectedExcelId","setSelectedExcelId","notionDbId","setNotionDbId","message","setMessage","userId","setUserId","mappings","setMappings","unmatchedColumns","setUnmatchedColumns","selectedColumnsToCreate","setSelectedColumnsToCreate","allExcelColumnNames","map","col","name","allNotionPropertyNames","prop","params","URLSearchParams","window","location","search","authSuccess","get","authError","receivedUserId","storedUserId","localStorage","getItem","setItem","fetchExcelFiles","history","replaceState","document","title","pathname","handleMicrosoftConnect","href","handleNotionConnect","currentUserId","response","fetch","data","json","ok","files","error","fetchExcelColumns","fileId","columns","hasIdColumn","some","toLowerCase","excel_column","notion_property","data_type","fetchNotionProperties","properties","notionPropNames","p","unmatched","filter","includes","handleExcelFileChange","e","target","value","handleMappingChange","excelColumnName","notionPropertyName","prevMappings","newMappings","mappingIndex","findIndex","m","selectedNotionProp","find","type","handleCreateColumnChange","columnName","isChecked","prevSelected","saveMappingAndStartSync","syncDirection","currentMappings","newColumnMappings","colName","allMappings","saveMappingResponse","method","headers","body","JSON","stringify","mapping_data","user_id","parseInt","excel_file_id","errorData","Error","detail","syncResponse","notion_database_id","columns_to_create","console","renderConnectStep","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","renderSelectStep","onChange","file","id","placeholder","disabled","renderMappingStep","column","index","mapping","length","checked","renderCompleteStep","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\ntype AppStep = 'connect' | 'select' | 'mapping' | 'complete';\ntype ExcelFile = { id: string; name: string };\ntype ExcelColumn = { name: string };\ntype NotionProperty = { name: string; type: string };\ntype Mapping = { excel_column: string; notion_property: string; data_type: string };\n\nconst API_BASE_URL = 'http://127.0.0.1:8000';\n\nfunction App() {\n  const [step, setStep] = useState<AppStep>('connect');\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\n  const [excelColumns, setExcelColumns] = useState<ExcelColumn[]>([]);\n  const [notionProperties, setNotionProperties] = useState<NotionProperty[]>([]);\n  const [selectedExcelId, setSelectedExcelId] = useState<string>('');\n  const [notionDbId, setNotionDbId] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n  const [userId, setUserId] = useState<string | null>(null);\n  const [mappings, setMappings] = useState<Mapping[]>([]);\n  const [unmatchedColumns, setUnmatchedColumns] = useState<string[]>([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState<string[]>([]);\n\n  const allExcelColumnNames = excelColumns.map(col => col.name);\n  const allNotionPropertyNames = notionProperties.map(prop => prop.name);\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const authError = params.get('auth_error');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } \n    else if (authError === 'true') {\n      setMessage(`Yetkilendirme hatası: ${params.get('message')}`);\n      setStep('connect');\n    }\n    else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    }\n    else {\n      setStep('connect');\n    }\n\n  }, []);\n\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n\n  const handleNotionConnect = () => {\n    setMessage('Notion hesabınızı bağlamak için, Notion\\'da herhangi bir veritabanı veya sayfasına gidin, \"...\" menüsünden \"Add connections\"ı seçin ve oluşturduğunuz entegrasyonu (\"Excel Sync\") ekleyin.');\n  };\n\n  const fetchExcelFiles = async (currentUserId: string) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setExcelFiles(data.files);\n      } else {\n        setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchExcelColumns = async (fileId: string) => {\n    if (!userId) return;\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await response.json();\n      if (response.ok) {\n        const columns = data.columns.map((name: string) => ({ name }));\n        \n        const hasIdColumn = columns.some((col: any) => col.name.toLowerCase() === 'id');\n        if (!hasIdColumn) {\n            setMessage('Seçtiğiniz Excel dosyasında \"ID\" adında bir sütun bulunmuyor. Senkronizasyon için bir \"ID\" sütunu gereklidir. Lütfen dosyanızı güncelleyin veya başka bir dosya seçin.');\n            setExcelColumns([]);\n            setMappings([]);\n            return;\n        }\n\n        setExcelColumns(columns);\n        setMappings(data.columns.map((name: string) => ({ excel_column: name, notion_property: '', data_type: '' })));\n        setMessage('');\n\n      } else {\n        setMessage(`Excel sütunları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen bir Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setNotionProperties(data.properties);\n        \n        const notionPropNames = data.properties.map((p: any) => p.name.toLowerCase());\n        const unmatched = excelColumns\n          .filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id')\n          .map(col => col.name);\n        \n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate(unmatched);\n\n        setStep('mapping');\n        setMessage('');\n      } else {\n        setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n\n  const handleExcelFileChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const fileId = e.target.value;\n    setSelectedExcelId(fileId);\n    if (fileId) {\n      fetchExcelColumns(fileId);\n    }\n  };\n\n  const handleMappingChange = (excelColumnName: string, notionPropertyName: string) => {\n    setMappings(prevMappings => {\n      const newMappings = [...prevMappings];\n      const mappingIndex = newMappings.findIndex(m => m.excel_column === excelColumnName);\n\n      if (mappingIndex > -1) {\n        const selectedNotionProp = notionProperties.find(p => p.name === notionPropertyName);\n        newMappings[mappingIndex] = {\n          ...newMappings[mappingIndex],\n          notion_property: notionPropertyName,\n          data_type: selectedNotionProp?.type || ''\n        };\n      }\n      return newMappings;\n    });\n  };\n\n  const handleCreateColumnChange = (columnName: string, isChecked: boolean) => {\n    setSelectedColumnsToCreate(prevSelected => \n      isChecked\n        ? [...prevSelected, columnName]\n        : prevSelected.filter(name => name !== columnName)\n    );\n  };\n\n  \n  const saveMappingAndStartSync = async (syncDirection: 'excel-to-notion' | 'notion-to-excel') => {\n      setMessage('Eşleme kaydediliyor...');\n      try {\n          if (!userId || !selectedExcelId || !notionDbId) {\n              setMessage(\"Lütfen tüm alanları doldurun.\");\n              return;\n          }\n\n          // Mevcut eşlemeler\n          const currentMappings = mappings.map(m => ({\n              excel_column: m.excel_column,\n              notion_property: m.notion_property,\n              data_type: m.data_type // Backend bu değeri tekrar belirleyecek, yine de gönderelim\n          }));\n          \n          // KRİTİK ADIM: Yeni oluşturulacak sütunları eşleme verisine ekle\n          const newColumnMappings = selectedColumnsToCreate.map(colName => ({\n              excel_column: colName,\n              notion_property: colName, // Notion'da aynı isimle oluşturulacak\n              data_type: '' // Backend bu değeri doğru bir şekilde belirleyecek\n          }));\n\n          // Tüm eşlemeleri tek bir listede birleştir\n          const allMappings = [...currentMappings, ...newColumnMappings];\n\n          // Önce eşlemeleri veritabanına kaydet\n          const saveMappingResponse = await fetch(`${API_BASE_URL}/save-mapping`, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ \n                  mapping_data: allMappings, // BİRLEŞTİRİLMİŞ LİSTEYİ GÖNDER\n                  user_id: parseInt(userId),\n                  excel_file_id: selectedExcelId \n              }),\n          });\n          \n          if (!saveMappingResponse.ok) {\n              const errorData = await saveMappingResponse.json();\n              throw new Error(`Eşleme kaydetme hatası: ${errorData.detail}`);\n          }\n\n          // Ardından senkronizasyon işlemini başlat\n          setMessage('Senkronizasyon başlatılıyor...');\n          const syncResponse = await fetch(`${API_BASE_URL}/sync/${syncDirection}`, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                  excel_file_id: selectedExcelId,\n                  notion_database_id: notionDbId,\n                  user_id: parseInt(userId),\n                  columns_to_create: selectedColumnsToCreate // Yeni sütunlar yine de gönderilsin\n              }),\n          });\n\n          if (!syncResponse.ok) {\n              const errorData = await syncResponse.json();\n              throw new Error(`Senkronizasyon hatası: ${errorData.detail}`);\n          }\n\n          setMessage('Senkronizasyon tamamlandı!');\n          setStep('complete');\n      } catch (error: any) {\n          setMessage(`Hata: ${error.message}`);\n          console.error('Eşleme veya senkronizasyon sırasında hata oluştu:', error);\n      }\n  };\n\n\n  const renderConnectStep = () => (\n    <div className=\"step-container\">\n      <button onClick={handleMicrosoftConnect}>Microsoft Hesabını Bağla</button>\n    </div>\n  );\n\n  const renderSelectStep = () => (\n    <div className=\"step-container\">\n      <h2>Excel Dosyasını ve Notion Veritabanını Seçin</h2>\n      <div>\n        <label>\n          Excel Dosyası Seçin:\n          <select value={selectedExcelId} onChange={handleExcelFileChange}>\n            <option value=\"\">Dosya Seçiniz...</option>\n            {excelFiles.map(file => (\n              <option key={file.id} value={file.id}>{file.name}</option>\n            ))}\n          </select>\n        </label>\n      </div>\n      <div>\n        <label>\n          Notion Veritabanı ID'si:\n          <input\n            type=\"text\"\n            value={notionDbId}\n            onChange={(e) => setNotionDbId(e.target.value)}\n            placeholder=\"Veritabanı ID'sini yapıştırın\"\n          />\n        </label>\n      </div>\n      <button onClick={fetchNotionProperties} disabled={!selectedExcelId || !notionDbId}>Notion Özelliklerini Getir</button>\n    </div>\n  );\n\n  const renderMappingStep = () => (\n    <div className=\"step-container\">\n      <h2>Sütunları Eşleştirin</h2>\n      <div className=\"mapping-grid\">\n        <div className=\"mapping-section\">\n          <h3>Excel Sütunları</h3>\n          <ul>\n            {excelColumns.map((column, index) => (\n              <li key={index}>\n                <span className=\"excel-name\">{column.name}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"mapping-section\">\n          <h3>Notion Özellikleri</h3>\n          <ul>\n            {mappings.map((mapping, index) => (\n              <li key={index}>\n                <select\n                  value={mapping.notion_property}\n                  onChange={(e) => handleMappingChange(mapping.excel_column, e.target.value)}\n                >\n                  <option value=\"\">Seçiniz...</option>\n                  {notionProperties.map(prop => (\n                    <option key={prop.name} value={prop.name}>{prop.name} ({prop.type})</option>\n                  ))}\n                </select>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n      {unmatchedColumns.length > 0 && (\n        <div className=\"unmatched-columns-container\">\n          <h3>Notion'da Olmayan Sütunlar</h3>\n          <p>Aşağıdaki Excel sütunları Notion veritabanınızda bulunamadı. Notion'da otomatik olarak oluşturmak istediklerinizi seçin.</p>\n          <ul>\n            {unmatchedColumns.map(colName => (\n              <li key={colName}>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedColumnsToCreate.includes(colName)}\n                    onChange={(e) => handleCreateColumnChange(colName, e.target.checked)}\n                  />\n                  {colName}\n                </label>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <div className=\"sync-buttons-container\">\n        <button onClick={() => saveMappingAndStartSync('excel-to-notion')} disabled={!mappings.length}>\n          Excel'den Notion'a Eşitle\n        </button>\n        <button onClick={() => saveMappingAndStartSync('notion-to-excel')} disabled={!mappings.length}>\n          Notion'dan Excel'e Eşitle\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderCompleteStep = () => (\n    <div className=\"step-container\">\n      <h2>Senkronizasyon Başarılı!</h2>\n      <p>Seçtiğiniz yönde senkronizasyon tamamlandı. Uygulama, dosyanızdaki değişiklikleri takip etmeye ve verileri otomatik olarak senkronize etmeye devam edecektir.</p>\n      <button onClick={() => setStep('select')}>Yeni Senkronizasyon Başlat</button>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Notion & Excel Senkronizasyonu</h1>\n        \n        {message && <p className=\"message\">{message}</p>}\n\n        {step === 'connect' && renderConnectStep()}\n        {step === 'select' && renderSelectStep()}\n        {step === 'mapping' && renderMappingStep()}\n        {step === 'complete' && renderCompleteStep()}\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQnB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAU,SAAS,CAAC;EACpD,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAc,EAAE,CAAC;EAC7D,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAgB,EAAE,CAAC;EACnE,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAmB,EAAE,CAAC;EAC9E,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAS,EAAE,CAAC;EAClE,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAS,EAAE,CAAC;EACxD,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAS,EAAE,CAAC;EAClD,MAAM,CAACqB,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAgB,IAAI,CAAC;EACzD,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAY,EAAE,CAAC;EACvD,MAAM,CAACyB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG1B,QAAQ,CAAW,EAAE,CAAC;EACtE,MAAM,CAAC2B,uBAAuB,EAAEC,0BAA0B,CAAC,GAAG5B,QAAQ,CAAW,EAAE,CAAC;EAEpF,MAAM6B,mBAAmB,GAAGlB,YAAY,CAACmB,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;EAC7D,MAAMC,sBAAsB,GAAGpB,gBAAgB,CAACiB,GAAG,CAACI,IAAI,IAAIA,IAAI,CAACF,IAAI,CAAC;EAEtE/B,SAAS,CAAC,MAAM;IACd,MAAMkC,MAAM,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;IAC1D,MAAMC,WAAW,GAAGL,MAAM,CAACM,GAAG,CAAC,cAAc,CAAC;IAC9C,MAAMC,SAAS,GAAGP,MAAM,CAACM,GAAG,CAAC,YAAY,CAAC;IAC1C,MAAME,cAAc,GAAGR,MAAM,CAACM,GAAG,CAAC,SAAS,CAAC;IAC5C,MAAMG,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;IAEpD,IAAIN,WAAW,KAAK,MAAM,IAAIG,cAAc,EAAE;MAC5CrB,SAAS,CAACqB,cAAc,CAAC;MACzBnC,OAAO,CAAC,QAAQ,CAAC;MACjBqC,YAAY,CAACE,OAAO,CAAC,SAAS,EAAEJ,cAAc,CAAC;MAC/CK,eAAe,CAACL,cAAc,CAAC;MAC/BN,MAAM,CAACY,OAAO,CAACC,YAAY,CAAC,CAAC,CAAC,EAAEC,QAAQ,CAACC,KAAK,EAAEf,MAAM,CAACC,QAAQ,CAACe,QAAQ,CAAC;IAC3E,CAAC,MACI,IAAIX,SAAS,KAAK,MAAM,EAAE;MAC7BtB,UAAU,CAAC,yBAAyBe,MAAM,CAACM,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;MAC5DjC,OAAO,CAAC,SAAS,CAAC;IACpB,CAAC,MACI,IAAIoC,YAAY,EAAE;MACrBtB,SAAS,CAACsB,YAAY,CAAC;MACvBpC,OAAO,CAAC,QAAQ,CAAC;MACjBwC,eAAe,CAACJ,YAAY,CAAC;IAC/B,CAAC,MACI;MACHpC,OAAO,CAAC,SAAS,CAAC;IACpB;EAEF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM8C,sBAAsB,GAAGA,CAAA,KAAM;IACnCjB,MAAM,CAACC,QAAQ,CAACiB,IAAI,GAAG,GAAGnD,YAAY,oBAAoB;EAC5D,CAAC;EAED,MAAMoD,mBAAmB,GAAGA,CAAA,KAAM;IAChCpC,UAAU,CAAC,4LAA4L,CAAC;EAC1M,CAAC;EAED,MAAM4B,eAAe,GAAG,MAAOS,aAAqB,IAAK;IACvD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGvD,YAAY,4BAA4BqD,aAAa,EAAE,CAAC;MACxF,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACfpD,aAAa,CAACkD,IAAI,CAACG,KAAK,CAAC;MAC3B,CAAC,MAAM;QACL3C,UAAU,CAAC,8BAA8BwC,IAAI,CAACI,KAAK,EAAE,CAAC;MACxD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd5C,UAAU,CAAC,6CAA6C,CAAC;IAC3D;EACF,CAAC;EAED,MAAM6C,iBAAiB,GAAG,MAAOC,MAAc,IAAK;IAClD,IAAI,CAAC7C,MAAM,EAAE;IACb,IAAI;MACF,MAAMqC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGvD,YAAY,oCAAoC8D,MAAM,YAAY7C,MAAM,EAAE,CAAC;MAC3G,MAAMuC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACf,MAAMK,OAAO,GAAGP,IAAI,CAACO,OAAO,CAACrC,GAAG,CAAEE,IAAY,KAAM;UAAEA;QAAK,CAAC,CAAC,CAAC;QAE9D,MAAMoC,WAAW,GAAGD,OAAO,CAACE,IAAI,CAAEtC,GAAQ,IAAKA,GAAG,CAACC,IAAI,CAACsC,WAAW,CAAC,CAAC,KAAK,IAAI,CAAC;QAC/E,IAAI,CAACF,WAAW,EAAE;UACdhD,UAAU,CAAC,wKAAwK,CAAC;UACpLR,eAAe,CAAC,EAAE,CAAC;UACnBY,WAAW,CAAC,EAAE,CAAC;UACf;QACJ;QAEAZ,eAAe,CAACuD,OAAO,CAAC;QACxB3C,WAAW,CAACoC,IAAI,CAACO,OAAO,CAACrC,GAAG,CAAEE,IAAY,KAAM;UAAEuC,YAAY,EAAEvC,IAAI;UAAEwC,eAAe,EAAE,EAAE;UAAEC,SAAS,EAAE;QAAG,CAAC,CAAC,CAAC,CAAC;QAC7GrD,UAAU,CAAC,EAAE,CAAC;MAEhB,CAAC,MAAM;QACLA,UAAU,CAAC,8BAA8BwC,IAAI,CAACI,KAAK,EAAE,CAAC;MACxD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd5C,UAAU,CAAC,6CAA6C,CAAC;IAC3D;EACF,CAAC;EAED,MAAMsD,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI,CAACzD,UAAU,EAAE;MACfG,UAAU,CAAC,4CAA4C,CAAC;MACxD;IACF;IAEA,IAAI;MACF,MAAMsC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGvD,YAAY,6CAA6Ca,UAAU,EAAE,CAAC;MACtG,MAAM2C,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACfhD,mBAAmB,CAAC8C,IAAI,CAACe,UAAU,CAAC;QAEpC,MAAMC,eAAe,GAAGhB,IAAI,CAACe,UAAU,CAAC7C,GAAG,CAAE+C,CAAM,IAAKA,CAAC,CAAC7C,IAAI,CAACsC,WAAW,CAAC,CAAC,CAAC;QAC7E,MAAMQ,SAAS,GAAGnE,YAAY,CAC3BoE,MAAM,CAAChD,GAAG,IAAI,CAAC6C,eAAe,CAACI,QAAQ,CAACjD,GAAG,CAACC,IAAI,CAACsC,WAAW,CAAC,CAAC,CAAC,IAAIvC,GAAG,CAACC,IAAI,CAACsC,WAAW,CAAC,CAAC,KAAK,IAAI,CAAC,CACnGxC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;QAEvBN,mBAAmB,CAACoD,SAAS,CAAC;QAC9BlD,0BAA0B,CAACkD,SAAS,CAAC;QAErCtE,OAAO,CAAC,SAAS,CAAC;QAClBY,UAAU,CAAC,EAAE,CAAC;MAChB,CAAC,MAAM;QACLA,UAAU,CAAC,iCAAiCwC,IAAI,CAACI,KAAK,EAAE,CAAC;MAC3D;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd5C,UAAU,CAAC,gDAAgD,CAAC;IAC9D;EACF,CAAC;EAED,MAAM6D,qBAAqB,GAAIC,CAAuC,IAAK;IACzE,MAAMhB,MAAM,GAAGgB,CAAC,CAACC,MAAM,CAACC,KAAK;IAC7BpE,kBAAkB,CAACkD,MAAM,CAAC;IAC1B,IAAIA,MAAM,EAAE;MACVD,iBAAiB,CAACC,MAAM,CAAC;IAC3B;EACF,CAAC;EAED,MAAMmB,mBAAmB,GAAGA,CAACC,eAAuB,EAAEC,kBAA0B,KAAK;IACnF/D,WAAW,CAACgE,YAAY,IAAI;MAC1B,MAAMC,WAAW,GAAG,CAAC,GAAGD,YAAY,CAAC;MACrC,MAAME,YAAY,GAAGD,WAAW,CAACE,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACrB,YAAY,KAAKe,eAAe,CAAC;MAEnF,IAAII,YAAY,GAAG,CAAC,CAAC,EAAE;QACrB,MAAMG,kBAAkB,GAAGhF,gBAAgB,CAACiF,IAAI,CAACjB,CAAC,IAAIA,CAAC,CAAC7C,IAAI,KAAKuD,kBAAkB,CAAC;QACpFE,WAAW,CAACC,YAAY,CAAC,GAAG;UAC1B,GAAGD,WAAW,CAACC,YAAY,CAAC;UAC5BlB,eAAe,EAAEe,kBAAkB;UACnCd,SAAS,EAAE,CAAAoB,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEE,IAAI,KAAI;QACzC,CAAC;MACH;MACA,OAAON,WAAW;IACpB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMO,wBAAwB,GAAGA,CAACC,UAAkB,EAAEC,SAAkB,KAAK;IAC3EtE,0BAA0B,CAACuE,YAAY,IACrCD,SAAS,GACL,CAAC,GAAGC,YAAY,EAAEF,UAAU,CAAC,GAC7BE,YAAY,CAACpB,MAAM,CAAC/C,IAAI,IAAIA,IAAI,KAAKiE,UAAU,CACrD,CAAC;EACH,CAAC;EAGD,MAAMG,uBAAuB,GAAG,MAAOC,aAAoD,IAAK;IAC5FjF,UAAU,CAAC,wBAAwB,CAAC;IACpC,IAAI;MACA,IAAI,CAACC,MAAM,IAAI,CAACN,eAAe,IAAI,CAACE,UAAU,EAAE;QAC5CG,UAAU,CAAC,+BAA+B,CAAC;QAC3C;MACJ;;MAEA;MACA,MAAMkF,eAAe,GAAG/E,QAAQ,CAACO,GAAG,CAAC8D,CAAC,KAAK;QACvCrB,YAAY,EAAEqB,CAAC,CAACrB,YAAY;QAC5BC,eAAe,EAAEoB,CAAC,CAACpB,eAAe;QAClCC,SAAS,EAAEmB,CAAC,CAACnB,SAAS,CAAC;MAC3B,CAAC,CAAC,CAAC;;MAEH;MACA,MAAM8B,iBAAiB,GAAG5E,uBAAuB,CAACG,GAAG,CAAC0E,OAAO,KAAK;QAC9DjC,YAAY,EAAEiC,OAAO;QACrBhC,eAAe,EAAEgC,OAAO;QAAE;QAC1B/B,SAAS,EAAE,EAAE,CAAC;MAClB,CAAC,CAAC,CAAC;;MAEH;MACA,MAAMgC,WAAW,GAAG,CAAC,GAAGH,eAAe,EAAE,GAAGC,iBAAiB,CAAC;;MAE9D;MACA,MAAMG,mBAAmB,GAAG,MAAM/C,KAAK,CAAC,GAAGvD,YAAY,eAAe,EAAE;QACpEuG,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBC,YAAY,EAAEP,WAAW;UAAE;UAC3BQ,OAAO,EAAEC,QAAQ,CAAC7F,MAAM,CAAC;UACzB8F,aAAa,EAAEpG;QACnB,CAAC;MACL,CAAC,CAAC;MAEF,IAAI,CAAC2F,mBAAmB,CAAC5C,EAAE,EAAE;QACzB,MAAMsD,SAAS,GAAG,MAAMV,mBAAmB,CAAC7C,IAAI,CAAC,CAAC;QAClD,MAAM,IAAIwD,KAAK,CAAC,2BAA2BD,SAAS,CAACE,MAAM,EAAE,CAAC;MAClE;;MAEA;MACAlG,UAAU,CAAC,gCAAgC,CAAC;MAC5C,MAAMmG,YAAY,GAAG,MAAM5D,KAAK,CAAC,GAAGvD,YAAY,SAASiG,aAAa,EAAE,EAAE;QACtEM,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBI,aAAa,EAAEpG,eAAe;UAC9ByG,kBAAkB,EAAEvG,UAAU;UAC9BgG,OAAO,EAAEC,QAAQ,CAAC7F,MAAM,CAAC;UACzBoG,iBAAiB,EAAE9F,uBAAuB,CAAC;QAC/C,CAAC;MACL,CAAC,CAAC;MAEF,IAAI,CAAC4F,YAAY,CAACzD,EAAE,EAAE;QAClB,MAAMsD,SAAS,GAAG,MAAMG,YAAY,CAAC1D,IAAI,CAAC,CAAC;QAC3C,MAAM,IAAIwD,KAAK,CAAC,0BAA0BD,SAAS,CAACE,MAAM,EAAE,CAAC;MACjE;MAEAlG,UAAU,CAAC,4BAA4B,CAAC;MACxCZ,OAAO,CAAC,UAAU,CAAC;IACvB,CAAC,CAAC,OAAOwD,KAAU,EAAE;MACjB5C,UAAU,CAAC,SAAS4C,KAAK,CAAC7C,OAAO,EAAE,CAAC;MACpCuG,OAAO,CAAC1D,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;IAC7E;EACJ,CAAC;EAGD,MAAM2D,iBAAiB,GAAGA,CAAA,kBACxBxH,OAAA;IAAKyH,SAAS,EAAC,gBAAgB;IAAAC,QAAA,eAC7B1H,OAAA;MAAQ2H,OAAO,EAAExE,sBAAuB;MAAAuE,QAAA,EAAC;IAAwB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvE,CACN;EAED,MAAMC,gBAAgB,GAAGA,CAAA,kBACvBhI,OAAA;IAAKyH,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B1H,OAAA;MAAA0H,QAAA,EAAI;IAA4C;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrD/H,OAAA;MAAA0H,QAAA,eACE1H,OAAA;QAAA0H,QAAA,GAAO,8BAEL,eAAA1H,OAAA;UAAQiF,KAAK,EAAErE,eAAgB;UAACqH,QAAQ,EAAEnD,qBAAsB;UAAA4C,QAAA,gBAC9D1H,OAAA;YAAQiF,KAAK,EAAC,EAAE;YAAAyC,QAAA,EAAC;UAAgB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACzCzH,UAAU,CAACqB,GAAG,CAACuG,IAAI,iBAClBlI,OAAA;YAAsBiF,KAAK,EAAEiD,IAAI,CAACC,EAAG;YAAAT,QAAA,EAAEQ,IAAI,CAACrG;UAAI,GAAnCqG,IAAI,CAACC,EAAE;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAqC,CAC1D,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACN/H,OAAA;MAAA0H,QAAA,eACE1H,OAAA;QAAA0H,QAAA,GAAO,+BAEL,eAAA1H,OAAA;UACE4F,IAAI,EAAC,MAAM;UACXX,KAAK,EAAEnE,UAAW;UAClBmH,QAAQ,EAAGlD,CAAC,IAAKhE,aAAa,CAACgE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;UAC/CmD,WAAW,EAAC;QAA+B;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACN/H,OAAA;MAAQ2H,OAAO,EAAEpD,qBAAsB;MAAC8D,QAAQ,EAAE,CAACzH,eAAe,IAAI,CAACE,UAAW;MAAA4G,QAAA,EAAC;IAA0B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnH,CACN;EAED,MAAMO,iBAAiB,GAAGA,CAAA,kBACxBtI,OAAA;IAAKyH,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B1H,OAAA;MAAA0H,QAAA,EAAI;IAAoB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7B/H,OAAA;MAAKyH,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3B1H,OAAA;QAAKyH,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B1H,OAAA;UAAA0H,QAAA,EAAI;QAAe;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxB/H,OAAA;UAAA0H,QAAA,EACGlH,YAAY,CAACmB,GAAG,CAAC,CAAC4G,MAAM,EAAEC,KAAK,kBAC9BxI,OAAA;YAAA0H,QAAA,eACE1H,OAAA;cAAMyH,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAEa,MAAM,CAAC1G;YAAI;cAAA+F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO;UAAC,GAD1CS,KAAK;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEV,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACN/H,OAAA;QAAKyH,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B1H,OAAA;UAAA0H,QAAA,EAAI;QAAkB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3B/H,OAAA;UAAA0H,QAAA,EACGtG,QAAQ,CAACO,GAAG,CAAC,CAAC8G,OAAO,EAAED,KAAK,kBAC3BxI,OAAA;YAAA0H,QAAA,eACE1H,OAAA;cACEiF,KAAK,EAAEwD,OAAO,CAACpE,eAAgB;cAC/B4D,QAAQ,EAAGlD,CAAC,IAAKG,mBAAmB,CAACuD,OAAO,CAACrE,YAAY,EAAEW,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;cAAAyC,QAAA,gBAE3E1H,OAAA;gBAAQiF,KAAK,EAAC,EAAE;gBAAAyC,QAAA,EAAC;cAAU;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,EACnCrH,gBAAgB,CAACiB,GAAG,CAACI,IAAI,iBACxB/B,OAAA;gBAAwBiF,KAAK,EAAElD,IAAI,CAACF,IAAK;gBAAA6F,QAAA,GAAE3F,IAAI,CAACF,IAAI,EAAC,IAAE,EAACE,IAAI,CAAC6D,IAAI,EAAC,GAAC;cAAA,GAAtD7D,IAAI,CAACF,IAAI;gBAAA+F,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAqD,CAC5E,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACI;UAAC,GATFS,KAAK;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAUV,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EACLzG,gBAAgB,CAACoH,MAAM,GAAG,CAAC,iBAC1B1I,OAAA;MAAKyH,SAAS,EAAC,6BAA6B;MAAAC,QAAA,gBAC1C1H,OAAA;QAAA0H,QAAA,EAAI;MAA0B;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnC/H,OAAA;QAAA0H,QAAA,EAAG;MAAwH;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC/H/H,OAAA;QAAA0H,QAAA,EACGpG,gBAAgB,CAACK,GAAG,CAAC0E,OAAO,iBAC3BrG,OAAA;UAAA0H,QAAA,eACE1H,OAAA;YAAA0H,QAAA,gBACE1H,OAAA;cACE4F,IAAI,EAAC,UAAU;cACf+C,OAAO,EAAEnH,uBAAuB,CAACqD,QAAQ,CAACwB,OAAO,CAAE;cACnD4B,QAAQ,EAAGlD,CAAC,IAAKc,wBAAwB,CAACQ,OAAO,EAAEtB,CAAC,CAACC,MAAM,CAAC2D,OAAO;YAAE;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtE,CAAC,EACD1B,OAAO;UAAA;YAAAuB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH;QAAC,GARD1B,OAAO;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASZ,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN,eACD/H,OAAA;MAAKyH,SAAS,EAAC,wBAAwB;MAAAC,QAAA,gBACrC1H,OAAA;QAAQ2H,OAAO,EAAEA,CAAA,KAAM1B,uBAAuB,CAAC,iBAAiB,CAAE;QAACoC,QAAQ,EAAE,CAACjH,QAAQ,CAACsH,MAAO;QAAAhB,QAAA,EAAC;MAE/F;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT/H,OAAA;QAAQ2H,OAAO,EAAEA,CAAA,KAAM1B,uBAAuB,CAAC,iBAAiB,CAAE;QAACoC,QAAQ,EAAE,CAACjH,QAAQ,CAACsH,MAAO;QAAAhB,QAAA,EAAC;MAE/F;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CACN;EAED,MAAMa,kBAAkB,GAAGA,CAAA,kBACzB5I,OAAA;IAAKyH,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B1H,OAAA;MAAA0H,QAAA,EAAI;IAAwB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjC/H,OAAA;MAAA0H,QAAA,EAAG;IAA6J;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACpK/H,OAAA;MAAQ2H,OAAO,EAAEA,CAAA,KAAMtH,OAAO,CAAC,QAAQ,CAAE;MAAAqH,QAAA,EAAC;IAA0B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1E,CACN;EAED,oBACE/H,OAAA;IAAKyH,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB1H,OAAA;MAAQyH,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5B1H,OAAA;QAAA0H,QAAA,EAAI;MAA8B;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAEtC/G,OAAO,iBAAIhB,OAAA;QAAGyH,SAAS,EAAC,SAAS;QAAAC,QAAA,EAAE1G;MAAO;QAAA4G,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAE/C3H,IAAI,KAAK,SAAS,IAAIoH,iBAAiB,CAAC,CAAC,EACzCpH,IAAI,KAAK,QAAQ,IAAI4H,gBAAgB,CAAC,CAAC,EACvC5H,IAAI,KAAK,SAAS,IAAIkI,iBAAiB,CAAC,CAAC,EACzClI,IAAI,KAAK,UAAU,IAAIwI,kBAAkB,CAAC,CAAC;IAAA;MAAAhB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAC5H,EAAA,CA5VQD,GAAG;AAAA2I,EAAA,GAAH3I,GAAG;AA8VZ,eAAeA,GAAG;AAAC,IAAA2I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}