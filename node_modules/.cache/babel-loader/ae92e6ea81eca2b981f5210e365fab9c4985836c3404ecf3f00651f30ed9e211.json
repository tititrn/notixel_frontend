{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:8000';\nfunction App() {\n  _s();\n  const [step, setStep] = useState('connect');\n  const [syncDirection, setSyncDirection] = useState('excel-to-notion');\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [notionProperties, setNotionProperties] = useState([]);\n  const [selectedExcelId, setSelectedExcelId] = useState('');\n  const [notionDbId, setNotionDbId] = useState('');\n  const [message, setMessage] = useState('');\n  const [userId, setUserId] = useState(null);\n  const [mappingMap, setMappingMap] = useState({});\n  const [unmatchedColumns, setUnmatchedColumns] = useState([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState([]);\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else setStep('connect');\n  }, []);\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n  const fetchExcelFiles = async currentUserId => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const initMappingMapForLeftItems = leftItems => {\n    const m = {};\n    leftItems.forEach(it => {\n      m[it.name] = '';\n    });\n    setMappingMap(m);\n  };\n  const fetchExcelColumns = async fileId => {\n    if (!userId) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map(name => ({\n          name\n        }));\n        const hasId = columns.some(c => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setMappingMap({});\n          return;\n        }\n        setExcelColumns(columns);\n        initMappingMapForLeftItems(columns);\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n        if (syncDirection === 'excel-to-notion') {\n          const notionPropNames = data.properties.map(p => p.name.toLowerCase());\n          const unmatched = excelColumns.filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id').map(col => col.name);\n          setUnmatchedColumns(unmatched);\n          setSelectedColumnsToCreate([]);\n          initMappingMapForLeftItems(excelColumns);\n        } else {\n          setUnmatchedColumns([]);\n          setSelectedColumnsToCreate([]);\n          initMappingMapForLeftItems(data.properties);\n        }\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n  const handleMappingChange = (leftName, rightName) => {\n    setMappingMap(prev => ({\n      ...prev,\n      [leftName]: rightName\n    }));\n  };\n  const handleCreateColumnChange = (colName, checked) => {\n    setSelectedColumnsToCreate(prev => checked ? [...prev, colName] : prev.filter(c => c !== colName));\n  };\n  const saveMappingAndStartSync = async direction => {\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı.');\n      return;\n    }\n    const validMappings = Object.entries(mappingMap).filter(([left, right]) => right && right.trim() !== '').map(([left, right]) => {\n      if (direction === 'excel-to-notion') {\n        var _notionProperties$fin;\n        return {\n          excel_column: left,\n          notion_property: right,\n          data_type: ((_notionProperties$fin = notionProperties.find(p => p.name === right)) === null || _notionProperties$fin === void 0 ? void 0 : _notionProperties$fin.type) || 'rich_text'\n        };\n      } else {\n        var _notionProperties$fin2;\n        return {\n          excel_column: right,\n          notion_property: left,\n          data_type: ((_notionProperties$fin2 = notionProperties.find(p => p.name === left)) === null || _notionProperties$fin2 === void 0 ? void 0 : _notionProperties$fin2.type) || ''\n        };\n      }\n    });\n    if (validMappings.length === 0) {\n      setMessage(\"En az bir sütunu eşleştirin.\");\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          mappings: validMappings,\n          columns_to_create: syncDirection === 'excel-to-notion' ? selectedColumnsToCreate : []\n        })\n      });\n      if (res.ok) setStep('complete');else {\n        const err = await res.json();\n        setMessage(`Senkronizasyon başarısız: ${err.error || err.detail}`);\n      }\n    } catch {\n      setMessage('Senkronizasyon sırasında ağ hatası oluştu.');\n    }\n  };\n  const switchDirection = dir => {\n    setSyncDirection(dir);\n    const lefts = dir === 'excel-to-notion' ? excelColumns : notionProperties;\n    initMappingMapForLeftItems(lefts);\n    setSelectedColumnsToCreate([]);\n  };\n\n  // ---------- Render ----------\n  const renderMappingStep = () => {\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"S\\xFCtunlar\\u0131 E\\u015Fle\\u015Ftirin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: syncDirection === 'excel-to-notion' ? 'active' : '',\n          onClick: () => switchDirection('excel-to-notion'),\n          children: \"Excel \\u2192 Notion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: syncDirection === 'notion-to-excel' ? 'active' : '',\n          onClick: () => switchDirection('notion-to-excel'),\n          children: \"Notion \\u2192 Excel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-grid\",\n        children: leftItems.map(item => {\n          const leftName = item.name;\n          const selectedRight = mappingMap[leftName] || '';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mapping-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-left\",\n              children: leftName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-right\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedRight,\n                onChange: e => handleMappingChange(leftName, e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Se\\xE7iniz...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 21\n                }, this), rightItems.map(r => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: r.name,\n                  children: syncDirection === 'excel-to-notion' && 'type' in r && r.type ? `${r.name} (${r.type})` : r.name\n                }, r.name, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this)]\n          }, leftName, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unmatched-columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notion'da Olmayan S\\xFCtunlar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Excel\\u2019de olan, Notion\\u2019da olmayan s\\xFCtunlar\\u0131 eklemek i\\xE7in i\\u015Faretleyin:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this), unmatchedColumns.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"checkbox-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedColumnsToCreate.includes(c),\n            onChange: e => handleCreateColumnChange(c, e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 17\n          }, this), c]\n        }, c, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sync-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"primary-btn\",\n          onClick: () => saveMappingAndStartSync(syncDirection),\n          children: \"Senkronizasyon Ba\\u015Flat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this);\n  };\n  const renderConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: handleMicrosoftConnect,\n      children: \"Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n  const renderSelectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Excel Dosyas\\u0131 Se\\xE7in:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedExcelId,\n        onChange: e => {\n          setSelectedExcelId(e.target.value);\n          fetchExcelColumns(e.target.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Dosya Se\\xE7iniz...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), excelFiles.map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: f.id,\n          children: f.name\n        }, f.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 32\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Notion Veritaban\\u0131 ID'si:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: notionDbId,\n        onChange: e => setNotionDbId(e.target.value),\n        placeholder: \"Veritaban\\u0131 ID'sini yap\\u0131\\u015Ft\\u0131r\\u0131n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: fetchNotionProperties,\n      disabled: !selectedExcelId || !notionDbId,\n      children: \"Notion \\xD6zelliklerini Getir\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n  const renderCompleteStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Senkr. Tamamland\\u0131!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: () => setStep('select'),\n      children: \"Yeni Senkronizasyon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Excel \\u2194 Notion Senkronizasyonu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [step === 'connect' && renderConnectStep(), step === 'select' && renderSelectStep(), step === 'mapping' && renderMappingStep(), step === 'complete' && renderCompleteStep()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DZwQJxyUXqFGfUq0i05kYAhGbXM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","step","setStep","syncDirection","setSyncDirection","excelFiles","setExcelFiles","excelColumns","setExcelColumns","notionProperties","setNotionProperties","selectedExcelId","setSelectedExcelId","notionDbId","setNotionDbId","message","setMessage","userId","setUserId","mappingMap","setMappingMap","unmatchedColumns","setUnmatchedColumns","selectedColumnsToCreate","setSelectedColumnsToCreate","params","URLSearchParams","window","location","search","authSuccess","get","receivedUserId","storedUserId","localStorage","getItem","setItem","fetchExcelFiles","history","replaceState","document","title","pathname","handleMicrosoftConnect","href","currentUserId","res","fetch","data","json","ok","files","error","initMappingMapForLeftItems","leftItems","m","forEach","it","name","fetchExcelColumns","fileId","columns","map","hasId","some","c","toLowerCase","fetchNotionProperties","properties","notionPropNames","p","unmatched","filter","col","includes","handleMappingChange","leftName","rightName","prev","handleCreateColumnChange","colName","checked","saveMappingAndStartSync","direction","validMappings","Object","entries","left","right","trim","_notionProperties$fin","excel_column","notion_property","data_type","find","type","_notionProperties$fin2","length","method","headers","body","JSON","stringify","excel_file_id","notion_database_id","user_id","parseInt","mappings","columns_to_create","err","detail","switchDirection","dir","lefts","renderMappingStep","rightItems","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","item","selectedRight","value","onChange","e","target","r","renderConnectStep","renderSelectStep","f","id","placeholder","disabled","renderCompleteStep","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\ntype AppStep = 'connect' | 'select' | 'mapping' | 'complete';\ntype ExcelFile = { id: string; name: string };\ntype ExcelColumn = { name: string };\ntype NotionProperty = { name: string; type?: string };\n\nconst API_BASE_URL = 'http://127.0.0.1:8000';\n\nfunction App() {\n  const [step, setStep] = useState<AppStep>('connect');\n  const [syncDirection, setSyncDirection] = useState<'excel-to-notion' | 'notion-to-excel'>('excel-to-notion');\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\n  const [excelColumns, setExcelColumns] = useState<ExcelColumn[]>([]);\n  const [notionProperties, setNotionProperties] = useState<NotionProperty[]>([]);\n  const [selectedExcelId, setSelectedExcelId] = useState<string>('');\n  const [notionDbId, setNotionDbId] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n  const [userId, setUserId] = useState<string | null>(null);\n\n  const [mappingMap, setMappingMap] = useState<Record<string, string>>({});\n  const [unmatchedColumns, setUnmatchedColumns] = useState<string[]>([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState<string[]>([]);\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else setStep('connect');\n  }, []);\n\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n\n  const fetchExcelFiles = async (currentUserId: string) => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);\n      else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const initMappingMapForLeftItems = (leftItems: { name: string }[]) => {\n    const m: Record<string, string> = {};\n    leftItems.forEach(it => { m[it.name] = ''; });\n    setMappingMap(m);\n  };\n\n  const fetchExcelColumns = async (fileId: string) => {\n    if (!userId) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map((name: string) => ({ name }));\n        const hasId = columns.some(c => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setMappingMap({});\n          return;\n        }\n        setExcelColumns(columns);\n        initMappingMapForLeftItems(columns);\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n\n        if (syncDirection === 'excel-to-notion') {\n          const notionPropNames = data.properties.map((p: NotionProperty) => p.name.toLowerCase());\n          const unmatched = excelColumns\n            .filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id')\n            .map(col => col.name);\n          setUnmatchedColumns(unmatched);\n          setSelectedColumnsToCreate([]);\n          initMappingMapForLeftItems(excelColumns);\n        } else {\n          setUnmatchedColumns([]);\n          setSelectedColumnsToCreate([]);\n          initMappingMapForLeftItems(data.properties);\n        }\n\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n\n  const handleMappingChange = (leftName: string, rightName: string) => {\n    setMappingMap(prev => ({ ...prev, [leftName]: rightName }));\n  };\n\n  const handleCreateColumnChange = (colName: string, checked: boolean) => {\n    setSelectedColumnsToCreate(prev =>\n      checked ? [...prev, colName] : prev.filter(c => c !== colName)\n    );\n  };\n\n  const saveMappingAndStartSync = async (direction: 'excel-to-notion' | 'notion-to-excel') => {\n    if (!userId) { setMessage('Kullanıcı kimliği bulunamadı.'); return; }\n    const validMappings = Object.entries(mappingMap)\n      .filter(([left, right]) => right && right.trim() !== '')\n      .map(([left, right]) => {\n        if (direction === 'excel-to-notion') {\n          return {\n            excel_column: left,\n            notion_property: right,\n            data_type: notionProperties.find(p => p.name === right)?.type || 'rich_text'\n          };\n        } else {\n          return {\n            excel_column: right,\n            notion_property: left,\n            data_type: notionProperties.find(p => p.name === left)?.type || ''\n          };\n        }\n      });\n\n    if (validMappings.length === 0) { setMessage(\"En az bir sütunu eşleştirin.\"); return; }\n\n    try {\n      const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          mappings: validMappings,\n          columns_to_create: syncDirection === 'excel-to-notion' ? selectedColumnsToCreate : []\n        }),\n      });\n      if (res.ok) setStep('complete');\n      else { const err = await res.json(); setMessage(`Senkronizasyon başarısız: ${err.error || err.detail}`); }\n    } catch {\n      setMessage('Senkronizasyon sırasında ağ hatası oluştu.');\n    }\n  };\n\n  const switchDirection = (dir: 'excel-to-notion' | 'notion-to-excel') => {\n    setSyncDirection(dir);\n    const lefts = dir === 'excel-to-notion' ? excelColumns : notionProperties;\n    initMappingMapForLeftItems(lefts);\n    setSelectedColumnsToCreate([]);\n  };\n\n  // ---------- Render ----------\n  const renderMappingStep = () => {\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n\n    return (\n      <div className=\"step-container\">\n        <h2>Sütunları Eşleştirin</h2>\n\n        <div className=\"toggle-buttons\">\n          <button className={syncDirection === 'excel-to-notion' ? 'active' : ''} onClick={() => switchDirection('excel-to-notion')}>Excel → Notion</button>\n          <button className={syncDirection === 'notion-to-excel' ? 'active' : ''} onClick={() => switchDirection('notion-to-excel')}>Notion → Excel</button>\n        </div>\n\n        <div className=\"mapping-grid\">\n          {leftItems.map(item => {\n            const leftName = item.name;\n            const selectedRight = mappingMap[leftName] || '';\n\n            return (\n              <div className=\"mapping-row\" key={leftName}>\n                <div className=\"mapping-left\">{leftName}</div>\n                <div className=\"mapping-right\">\n                  <select value={selectedRight} onChange={e => handleMappingChange(leftName, e.target.value)}>\n                    <option value=\"\">Seçiniz...</option>\n                    {rightItems.map(r => (\n                      <option key={r.name} value={r.name}>\n                        {syncDirection === 'excel-to-notion' && 'type' in r && r.type ? `${r.name} (${r.type})` : r.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && (\n          <div className=\"unmatched-columns\">\n            <h3>Notion'da Olmayan Sütunlar</h3>\n            <p>Excel’de olan, Notion’da olmayan sütunları eklemek için işaretleyin:</p>\n            {unmatchedColumns.map(c => (\n              <label key={c} className=\"checkbox-label\">\n                <input type=\"checkbox\" checked={selectedColumnsToCreate.includes(c)} onChange={e => handleCreateColumnChange(c, e.target.checked)} />\n                {c}\n              </label>\n            ))}\n          </div>\n        )}\n\n        <div className=\"sync-buttons\">\n          <button className=\"primary-btn\" onClick={() => saveMappingAndStartSync(syncDirection)}>Senkronizasyon Başlat</button>\n        </div>\n      </div>\n    );\n  };\n\n  const renderConnectStep = () => (\n    <div className=\"step-container\">\n      <button className=\"primary-btn\" onClick={handleMicrosoftConnect}>Microsoft Hesabını Bağla</button>\n    </div>\n  );\n\n  const renderSelectStep = () => (\n    <div className=\"step-container grid\">\n      <div className=\"field\">\n        <label>Excel Dosyası Seçin:</label>\n        <select value={selectedExcelId} onChange={e => { setSelectedExcelId(e.target.value); fetchExcelColumns(e.target.value); }}>\n          <option value=\"\">Dosya Seçiniz...</option>\n          {excelFiles.map(f => <option key={f.id} value={f.id}>{f.name}</option>)}\n        </select>\n      </div>\n      <div className=\"field\">\n        <label>Notion Veritabanı ID'si:</label>\n        <input type=\"text\" value={notionDbId} onChange={e => setNotionDbId(e.target.value)} placeholder=\"Veritabanı ID'sini yapıştırın\" />\n      </div>\n      <button className=\"primary-btn\" onClick={fetchNotionProperties} disabled={!selectedExcelId || !notionDbId}>Notion Özelliklerini Getir</button>\n    </div>\n  );\n\n  const renderCompleteStep = () => (\n    <div className=\"step-container\">\n      <h2>Senkr. Tamamlandı!</h2>\n      <button className=\"primary-btn\" onClick={() => setStep('select')}>Yeni Senkronizasyon</button>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Excel ↔ Notion Senkronizasyonu</h1>\n        {message && <div className=\"message\">{message}</div>}\n      </header>\n      <main>\n        {step === 'connect' && renderConnectStep()}\n        {step === 'select' && renderSelectStep()}\n        {step === 'mapping' && renderMappingStep()}\n        {step === 'complete' && renderCompleteStep()}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}