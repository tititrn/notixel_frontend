{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:8000';\nfunction App() {\n  _s();\n  const [step, setStep] = useState('connect');\n  const [syncDirection, setSyncDirection] = useState('excel-to-notion');\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [notionProperties, setNotionProperties] = useState([]);\n  const [selectedExcelId, setSelectedExcelId] = useState('');\n  const [notionDbId, setNotionDbId] = useState('');\n  const [message, setMessage] = useState('');\n  const [userId, setUserId] = useState(null);\n\n  // Mapping state\n  const [excelToNotionMappings, setExcelToNotionMappings] = useState([]);\n  const [notionToExcelMappings, setNotionToExcelMappings] = useState([]);\n  const [unmatchedColumns, setUnmatchedColumns] = useState([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState([]);\n\n  // ---------- Auto Sync State ----------\n  const [autoSyncEnabled, setAutoSyncEnabled] = useState(false);\n  const [autoSyncColumns, setAutoSyncColumns] = useState([]);\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else setStep('connect');\n  }, []);\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n  const fetchExcelFiles = async currentUserId => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchExcelColumns = async fileId => {\n    if (!userId) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map(name => ({\n          name\n        }));\n        const hasId = columns.some(c => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setExcelToNotionMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setExcelToNotionMappings(columns.map(c => ({\n          excel_column: c.name,\n          notion_property: '',\n          data_type: ''\n        })));\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n        const notionPropNames = data.properties.map(p => p.name.toLowerCase());\n        const unmatched = excelColumns.filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id').map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate([]);\n        setNotionToExcelMappings(data.properties.map(prop => ({\n          excel_column: '',\n          notion_property: prop.name,\n          data_type: prop.type || ''\n        })));\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n  const handleMappingChange = (leftName, rightName) => {\n    if (syncDirection === 'excel-to-notion') {\n      setExcelToNotionMappings(prev => prev.map(m => {\n        var _notionProperties$fin;\n        return m.excel_column === leftName ? {\n          ...m,\n          notion_property: rightName,\n          data_type: ((_notionProperties$fin = notionProperties.find(p => p.name === rightName)) === null || _notionProperties$fin === void 0 ? void 0 : _notionProperties$fin.type) || ''\n        } : m;\n      }));\n    } else {\n      setNotionToExcelMappings(prev => prev.map(m => m.notion_property === leftName ? {\n        ...m,\n        excel_column: rightName\n      } : m));\n    }\n  };\n  const handleCreateColumnChange = (colName, checked) => {\n    setSelectedColumnsToCreate(prev => checked ? [...prev, colName] : prev.filter(c => c !== colName));\n    setAutoSyncColumns(prev => checked ? [...prev, colName] : prev.filter(c => c !== colName));\n  };\n  const saveMappingAndStartSync = async direction => {\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı.');\n      return;\n    }\n    const mappings = direction === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    const validMappings = mappings.filter(m => direction === 'excel-to-notion' ? m.notion_property.trim() !== '' : m.excel_column.trim() !== '');\n    if (validMappings.length === 0) {\n      setMessage(\"En az bir sütunu eşleştirin.\");\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          mappings: validMappings,\n          columns_to_create: direction === 'excel-to-notion' ? selectedColumnsToCreate : [],\n          auto_sync: autoSyncEnabled,\n          auto_sync_direction: syncDirection,\n          auto_sync_columns: autoSyncColumns\n        })\n      });\n      if (res.ok) setStep('complete');else {\n        const err = await res.json();\n        setMessage(`Senkronizasyon başarısız: ${err.error || err.detail}`);\n      }\n    } catch {\n      setMessage('Senkronizasyon sırasında ağ hatası oluştu.');\n    }\n  };\n\n  // ---------- Render ----------\n  const renderConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: handleMicrosoftConnect,\n      children: \"Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n  const renderSelectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Excel Dosyas\\u0131 Se\\xE7in:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedExcelId,\n        onChange: e => {\n          setSelectedExcelId(e.target.value);\n          fetchExcelColumns(e.target.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Dosya Se\\xE7iniz...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), excelFiles.map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: f.id,\n          children: f.name\n        }, f.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 32\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Notion Veritaban\\u0131 ID'si:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: notionDbId,\n        onChange: e => setNotionDbId(e.target.value),\n        placeholder: \"Veritaban\\u0131 ID'sini yap\\u0131\\u015Ft\\u0131r\\u0131n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: fetchNotionProperties,\n      disabled: !selectedExcelId || !notionDbId,\n      children: \"Notion \\xD6zelliklerini Getir\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n  const renderMappingStep = () => {\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"S\\xFCtunlar\\u0131 E\\u015Fle\\u015Ftirin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: syncDirection === 'excel-to-notion' ? 'active' : '',\n          onClick: () => setSyncDirection('excel-to-notion'),\n          children: \"Excel \\u2192 Notion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: syncDirection === 'notion-to-excel' ? 'active' : '',\n          onClick: () => setSyncDirection('notion-to-excel'),\n          children: \"Notion \\u2192 Excel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-grid\",\n        children: leftItems.map((item, idx) => {\n          const leftName = item.name;\n          const mapping = mappings[idx] || {\n            excel_column: '',\n            notion_property: '',\n            data_type: ''\n          };\n          const selectedRight = syncDirection === 'excel-to-notion' ? mapping.notion_property : mapping.excel_column;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mapping-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-left\",\n              children: leftName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-right\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedRight || '',\n                onChange: e => handleMappingChange(leftName, e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Se\\xE7iniz...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 21\n                }, this), rightItems.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: p.name,\n                  children: syncDirection === 'excel-to-notion' ? 'type' in p && p.type ? `${p.name} (${p.type})` : p.name : p.name\n                }, p.name, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 17\n            }, this)]\n          }, leftName, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unmatched-columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notion'da Olmayan S\\xFCtunlar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Excel\\u2019de olan, Notion\\u2019da olmayan s\\xFCtunlar\\u0131 eklemek i\\xE7in i\\u015Faretleyin:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this), unmatchedColumns.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"checkbox-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedColumnsToCreate.includes(c),\n            onChange: e => handleCreateColumnChange(c, e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 17\n          }, this), c]\n        }, c, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auto-sync\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"checkbox-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: autoSyncEnabled,\n            onChange: e => setAutoSyncEnabled(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), \"Otomatik Senkronizasyon A\\xE7\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), autoSyncEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auto-sync-options\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Y\\xF6n:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: syncDirection,\n            onChange: e => setSyncDirection(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"excel-to-notion\",\n              children: \"Excel \\u2192 Notion\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"notion-to-excel\",\n              children: \"Notion \\u2192 Excel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 15\n          }, this), syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auto-sync-columns\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Otomatik sync yap\\u0131lacak s\\xFCtunlar\\u0131 se\\xE7in:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 19\n            }, this), unmatchedColumns.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"checkbox-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: autoSyncColumns.includes(c),\n                onChange: e => setAutoSyncColumns(prev => e.target.checked ? [...prev, c] : prev.filter(col => col !== c))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 23\n              }, this), c]\n            }, c, true, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sync-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"primary-btn\",\n          onClick: () => saveMappingAndStartSync(syncDirection),\n          children: \"Senkronizasyon Ba\\u015Flat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this);\n  };\n  const renderCompleteStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Senkr. Tamamland\\u0131!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: () => setStep('select'),\n      children: \"Yeni Senkronizasyon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Excel \\u2194 Notion Senkronizasyonu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [step === 'connect' && renderConnectStep(), step === 'select' && renderSelectStep(), step === 'mapping' && renderMappingStep(), step === 'complete' && renderCompleteStep()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rN9WcALKA47pvDI7X8OXOWxAjM4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","step","setStep","syncDirection","setSyncDirection","excelFiles","setExcelFiles","excelColumns","setExcelColumns","notionProperties","setNotionProperties","selectedExcelId","setSelectedExcelId","notionDbId","setNotionDbId","message","setMessage","userId","setUserId","excelToNotionMappings","setExcelToNotionMappings","notionToExcelMappings","setNotionToExcelMappings","unmatchedColumns","setUnmatchedColumns","selectedColumnsToCreate","setSelectedColumnsToCreate","autoSyncEnabled","setAutoSyncEnabled","autoSyncColumns","setAutoSyncColumns","params","URLSearchParams","window","location","search","authSuccess","get","receivedUserId","storedUserId","localStorage","getItem","setItem","fetchExcelFiles","history","replaceState","document","title","pathname","handleMicrosoftConnect","href","currentUserId","res","fetch","data","json","ok","files","error","fetchExcelColumns","fileId","columns","map","name","hasId","some","c","toLowerCase","excel_column","notion_property","data_type","fetchNotionProperties","properties","notionPropNames","p","unmatched","filter","col","includes","prop","type","handleMappingChange","leftName","rightName","prev","m","_notionProperties$fin","find","handleCreateColumnChange","colName","checked","saveMappingAndStartSync","direction","mappings","validMappings","trim","length","method","headers","body","JSON","stringify","excel_file_id","notion_database_id","user_id","parseInt","columns_to_create","auto_sync","auto_sync_direction","auto_sync_columns","err","detail","renderConnectStep","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","renderSelectStep","value","onChange","e","target","f","id","placeholder","disabled","renderMappingStep","leftItems","rightItems","item","idx","mapping","selectedRight","renderCompleteStep","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\ntype AppStep = 'connect' | 'select' | 'mapping' | 'complete';\ntype ExcelFile = { id: string; name: string };\ntype ExcelColumn = { name: string };\ntype NotionProperty = { name: string; type?: string };\ntype Mapping = { excel_column: string; notion_property: string; data_type: string };\n\nconst API_BASE_URL = 'http://127.0.0.1:8000';\n\nfunction App() {\n  const [step, setStep] = useState<AppStep>('connect');\n  const [syncDirection, setSyncDirection] = useState<'excel-to-notion' | 'notion-to-excel'>('excel-to-notion');\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\n  const [excelColumns, setExcelColumns] = useState<ExcelColumn[]>([]);\n  const [notionProperties, setNotionProperties] = useState<NotionProperty[]>([]);\n  const [selectedExcelId, setSelectedExcelId] = useState<string>('');\n  const [notionDbId, setNotionDbId] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n  const [userId, setUserId] = useState<string | null>(null);\n\n  // Mapping state\n  const [excelToNotionMappings, setExcelToNotionMappings] = useState<Mapping[]>([]);\n  const [notionToExcelMappings, setNotionToExcelMappings] = useState<Mapping[]>([]);\n\n  const [unmatchedColumns, setUnmatchedColumns] = useState<string[]>([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState<string[]>([]);\n\n  // ---------- Auto Sync State ----------\n  const [autoSyncEnabled, setAutoSyncEnabled] = useState<boolean>(false);\n  const [autoSyncColumns, setAutoSyncColumns] = useState<string[]>([]);\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else setStep('connect');\n  }, []);\n\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n\n  const fetchExcelFiles = async (currentUserId: string) => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);\n      else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchExcelColumns = async (fileId: string) => {\n    if (!userId) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map((name: string) => ({ name }));\n        const hasId = columns.some((c: ExcelColumn) => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setExcelToNotionMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n\n        setExcelToNotionMappings(columns.map((c: ExcelColumn) => ({\n          excel_column: c.name,\n          notion_property: '',\n          data_type: ''\n        })));\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n\n        const notionPropNames = data.properties.map((p: NotionProperty) => p.name.toLowerCase());\n        const unmatched = excelColumns\n          .filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id')\n          .map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate([]);\n\n        setNotionToExcelMappings(data.properties.map((prop: NotionProperty) => ({\n          excel_column: '',\n          notion_property: prop.name,\n          data_type: prop.type || ''\n        })));\n\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n\n  const handleMappingChange = (leftName: string, rightName: string) => {\n    if (syncDirection === 'excel-to-notion') {\n      setExcelToNotionMappings(prev =>\n        prev.map(m =>\n          m.excel_column === leftName\n            ? { ...m, notion_property: rightName, data_type: notionProperties.find(p => p.name === rightName)?.type || '' }\n            : m\n        )\n      );\n    } else {\n      setNotionToExcelMappings(prev =>\n        prev.map(m =>\n          m.notion_property === leftName\n            ? { ...m, excel_column: rightName }\n            : m\n        )\n      );\n    }\n  };\n\n  const handleCreateColumnChange = (colName: string, checked: boolean) => {\n    setSelectedColumnsToCreate(prev =>\n      checked ? [...prev, colName] : prev.filter(c => c !== colName)\n    );\n    setAutoSyncColumns(prev =>\n      checked ? [...prev, colName] : prev.filter(c => c !== colName)\n    );\n  };\n\n  const saveMappingAndStartSync = async (direction: 'excel-to-notion' | 'notion-to-excel') => {\n    if (!userId) { setMessage('Kullanıcı kimliği bulunamadı.'); return; }\n\n    const mappings = direction === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n\n    const validMappings = mappings.filter(m =>\n      direction === 'excel-to-notion' ? m.notion_property.trim() !== '' : m.excel_column.trim() !== ''\n    );\n    if (validMappings.length === 0) { setMessage(\"En az bir sütunu eşleştirin.\"); return; }\n\n    try {\n      const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          mappings: validMappings,\n          columns_to_create: direction === 'excel-to-notion' ? selectedColumnsToCreate : [],\n          auto_sync: autoSyncEnabled,\n          auto_sync_direction: syncDirection,\n          auto_sync_columns: autoSyncColumns\n        }),\n      });\n      if (res.ok) setStep('complete');\n      else { const err = await res.json(); setMessage(`Senkronizasyon başarısız: ${err.error || err.detail}`); }\n    } catch {\n      setMessage('Senkronizasyon sırasında ağ hatası oluştu.');\n    }\n  };\n\n  // ---------- Render ----------\n  const renderConnectStep = () => (\n    <div className=\"step-container\">\n      <button className=\"primary-btn\" onClick={handleMicrosoftConnect}>Microsoft Hesabını Bağla</button>\n    </div>\n  );\n\n  const renderSelectStep = () => (\n    <div className=\"step-container grid\">\n      <div className=\"field\">\n        <label>Excel Dosyası Seçin:</label>\n        <select value={selectedExcelId} onChange={e => { setSelectedExcelId(e.target.value); fetchExcelColumns(e.target.value); }}>\n          <option value=\"\">Dosya Seçiniz...</option>\n          {excelFiles.map(f => <option key={f.id} value={f.id}>{f.name}</option>)}\n        </select>\n      </div>\n      <div className=\"field\">\n        <label>Notion Veritabanı ID'si:</label>\n        <input type=\"text\" value={notionDbId} onChange={e => setNotionDbId(e.target.value)} placeholder=\"Veritabanı ID'sini yapıştırın\" />\n      </div>\n      <button className=\"primary-btn\" onClick={fetchNotionProperties} disabled={!selectedExcelId || !notionDbId}>Notion Özelliklerini Getir</button>\n    </div>\n  );\n\n  const renderMappingStep = () => {\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n\n    return (\n      <div className=\"step-container\">\n        <h2>Sütunları Eşleştirin</h2>\n\n        <div className=\"toggle-buttons\">\n          <button\n            className={syncDirection === 'excel-to-notion' ? 'active' : ''}\n            onClick={() => setSyncDirection('excel-to-notion')}\n          >\n            Excel → Notion\n          </button>\n          <button\n            className={syncDirection === 'notion-to-excel' ? 'active' : ''}\n            onClick={() => setSyncDirection('notion-to-excel')}\n          >\n            Notion → Excel\n          </button>\n        </div>\n\n        <div className=\"mapping-grid\">\n          {leftItems.map((item, idx) => {\n            const leftName = item.name;\n            const mapping = mappings[idx] || { excel_column: '', notion_property: '', data_type: '' };\n            const selectedRight =\n              syncDirection === 'excel-to-notion' ? mapping.notion_property : mapping.excel_column;\n\n            return (\n              <div className=\"mapping-row\" key={leftName}>\n                <div className=\"mapping-left\">{leftName}</div>\n                <div className=\"mapping-right\">\n                  <select\n                    value={selectedRight || ''}\n                    onChange={e => handleMappingChange(leftName, e.target.value)}\n                  >\n                    <option value=\"\">Seçiniz...</option>\n                    {rightItems.map(p => (\n                      <option key={p.name} value={p.name}>\n                        {syncDirection === 'excel-to-notion'\n                          ? 'type' in p && p.type ? `${p.name} (${p.type})` : p.name\n                          : p.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && (\n          <div className=\"unmatched-columns\">\n            <h3>Notion'da Olmayan Sütunlar</h3>\n            <p>Excel’de olan, Notion’da olmayan sütunları eklemek için işaretleyin:</p>\n            {unmatchedColumns.map(c => (\n              <label key={c} className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedColumnsToCreate.includes(c)}\n                  onChange={e => handleCreateColumnChange(c, e.target.checked)}\n                />\n                {c}\n              </label>\n            ))}\n          </div>\n        )}\n\n        {/* ---------- Auto Sync ---------- */}\n        <div className=\"auto-sync\">\n          <label className=\"checkbox-label\">\n            <input\n              type=\"checkbox\"\n              checked={autoSyncEnabled}\n              onChange={e => setAutoSyncEnabled(e.target.checked)}\n            />\n            Otomatik Senkronizasyon Aç\n          </label>\n\n          {autoSyncEnabled && (\n            <div className=\"auto-sync-options\">\n              <label>Yön:</label>\n              <select value={syncDirection} onChange={e => setSyncDirection(e.target.value as 'excel-to-notion' | 'notion-to-excel')}>\n                <option value=\"excel-to-notion\">Excel → Notion</option>\n                <option value=\"notion-to-excel\">Notion → Excel</option>\n              </select>\n\n              {syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && (\n                <div className=\"auto-sync-columns\">\n                  <p>Otomatik sync yapılacak sütunları seçin:</p>\n                  {unmatchedColumns.map(c => (\n                    <label key={c} className=\"checkbox-label\">\n                      <input\n                        type=\"checkbox\"\n                        checked={autoSyncColumns.includes(c)}\n                        onChange={e => setAutoSyncColumns(prev =>\n                          e.target.checked ? [...prev, c] : prev.filter(col => col !== c)\n                        )}\n                      />\n                      {c}\n                    </label>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        <div className=\"sync-buttons\">\n          <button\n            className=\"primary-btn\"\n            onClick={() => saveMappingAndStartSync(syncDirection)}\n          >\n            Senkronizasyon Başlat\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  const renderCompleteStep = () => (\n    <div className=\"step-container\">\n      <h2>Senkr. Tamamlandı!</h2>\n      <button className=\"primary-btn\" onClick={() => setStep('select')}>Yeni Senkronizasyon</button>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Excel ↔ Notion Senkronizasyonu</h1>\n        {message && <div className=\"message\">{message}</div>}\n      </header>\n      <main>\n        {step === 'connect' && renderConnectStep()}\n        {step === 'select' && renderSelectStep()}\n        {step === 'mapping' && renderMappingStep()}\n        {step === 'complete' && renderCompleteStep()}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}