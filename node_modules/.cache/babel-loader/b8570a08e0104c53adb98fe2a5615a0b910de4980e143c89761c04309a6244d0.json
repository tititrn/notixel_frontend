{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:8000';\nfunction App() {\n  _s();\n  const [step, setStep] = useState('connect');\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [notionProperties, setNotionProperties] = useState([]);\n  const [selectedExcelId, setSelectedExcelId] = useState('');\n  const [notionDbId, setNotionDbId] = useState('');\n  const [message, setMessage] = useState('');\n  const [userId, setUserId] = useState(null);\n  const [mappings, setMappings] = useState([]);\n  const [unmatchedColumns, setUnmatchedColumns] = useState([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState([]);\n  const [syncDirection, setSyncDirection] = useState('excel-to-notion');\n\n  // Microsoft ve Notion bağlantısı\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else {\n      setStep('connect');\n    }\n  }, []);\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n  const fetchExcelFiles = async currentUserId => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchExcelColumns = async fileId => {\n    if (!userId) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map(name => ({\n          name\n        }));\n        const hasId = columns.some(c => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setMappings(columns.map(c => ({\n          excel_column: c.name,\n          notion_property: '',\n          data_type: ''\n        })));\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n        const notionPropNames = data.properties.map(p => p.name.toLowerCase());\n        const unmatched = excelColumns.filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id').map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate(unmatched);\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n  const handleMappingChange = (excelColumnName, notionPropertyName) => {\n    setMappings(prev => prev.map(m => {\n      var _notionProperties$fin;\n      return m.excel_column === excelColumnName ? {\n        ...m,\n        notion_property: notionPropertyName,\n        data_type: ((_notionProperties$fin = notionProperties.find(p => p.name === notionPropertyName)) === null || _notionProperties$fin === void 0 ? void 0 : _notionProperties$fin.type) || ''\n      } : m;\n    }));\n  };\n  const handleCreateColumnChange = (columnName, checked) => {\n    setSelectedColumnsToCreate(prev => checked ? [...prev, columnName] : prev.filter(c => c !== columnName));\n  };\n  const saveMappingAndStartSync = async direction => {\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı.');\n      return;\n    }\n    const validMappings = mappings.filter(m => m.notion_property.trim() !== '');\n    if (validMappings.length === 0) {\n      setMessage(\"En az bir sütunu eşleştirin.\");\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          mappings: validMappings,\n          columns_to_create: selectedColumnsToCreate\n        })\n      });\n      if (res.ok) setStep('complete');else {\n        const err = await res.json();\n        setMessage(`Senkronizasyon başarısız: ${err.error || err.detail}`);\n      }\n    } catch {\n      setMessage('Senkronizasyon sırasında ağ hatası oluştu.');\n    }\n  };\n\n  // ---------- Render Functions ----------\n  const renderConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: handleMicrosoftConnect,\n      children: \"Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n  const renderSelectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Excel Dosyas\\u0131 Se\\xE7in:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedExcelId,\n        onChange: e => {\n          setSelectedExcelId(e.target.value);\n          fetchExcelColumns(e.target.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Dosya Se\\xE7iniz...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), excelFiles.map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: f.id,\n          children: f.name\n        }, f.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 32\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Notion Veritaban\\u0131 ID'si:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: notionDbId,\n        onChange: e => setNotionDbId(e.target.value),\n        placeholder: \"Veritaban\\u0131 ID'sini yap\\u0131\\u015Ft\\u0131r\\u0131n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: fetchNotionProperties,\n      disabled: !selectedExcelId || !notionDbId,\n      children: \"Notion \\xD6zelliklerini Getir\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n  const renderMappingStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"direction-switch\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: syncDirection === 'excel-to-notion' ? 'active' : '',\n        onClick: () => setSyncDirection('excel-to-notion'),\n        children: \"Excel \\u2192 Notion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: syncDirection === 'notion-to-excel' ? 'active' : '',\n        onClick: () => setSyncDirection('notion-to-excel'),\n        children: \"Notion \\u2192 Excel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mapping-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-row header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: syncDirection === 'excel-to-notion' ? 'Excel Sütunu' : 'Notion Özelliği'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: syncDirection === 'excel-to-notion' ? 'Notion Özelliği' : 'Excel Sütunu'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), mappings.map(m => {\n        const leftValue = syncDirection === 'excel-to-notion' ? m.excel_column : m.notion_property;\n        const rightValue = syncDirection === 'excel-to-notion' ? m.notion_property : m.excel_column;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mapping-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: leftValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: rightValue,\n              onChange: e => handleMappingChange(m.excel_column, e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Se\\xE7iniz...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 19\n              }, this), (syncDirection === 'excel-to-notion' ? notionProperties : excelColumns).map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: p.name,\n                children: [p.name, \" \", 'type' in p && p.type ? `(${p.type})` : '']\n              }, p.name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this)]\n        }, m.excel_column, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unmatched-columns\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Notion'da Olmayan S\\xFCtunlar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this), unmatchedColumns.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedColumnsToCreate.includes(c),\n          onChange: e => handleCreateColumnChange(c, e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }, this), c]\n      }, c, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sync-buttons\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"primary-btn\",\n        onClick: () => saveMappingAndStartSync(syncDirection),\n        children: \"Senkronizasyonu Ba\\u015Flat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n  const renderCompleteStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Senkr. Tamamland\\u0131!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: () => setStep('select'),\n      children: \"Yeni Senkronizasyon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Excel \\u2194 Notion Senkronizasyonu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [step === 'connect' && renderConnectStep(), step === 'select' && renderSelectStep(), step === 'mapping' && renderMappingStep(), step === 'complete' && renderCompleteStep()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oNEBNtJ340TmNNi5KzeTBgUM1do=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","step","setStep","excelFiles","setExcelFiles","excelColumns","setExcelColumns","notionProperties","setNotionProperties","selectedExcelId","setSelectedExcelId","notionDbId","setNotionDbId","message","setMessage","userId","setUserId","mappings","setMappings","unmatchedColumns","setUnmatchedColumns","selectedColumnsToCreate","setSelectedColumnsToCreate","syncDirection","setSyncDirection","params","URLSearchParams","window","location","search","authSuccess","get","receivedUserId","storedUserId","localStorage","getItem","setItem","fetchExcelFiles","history","replaceState","document","title","pathname","handleMicrosoftConnect","href","currentUserId","res","fetch","data","json","ok","files","error","fetchExcelColumns","fileId","columns","map","name","hasId","some","c","toLowerCase","excel_column","notion_property","data_type","fetchNotionProperties","properties","notionPropNames","p","unmatched","filter","col","includes","handleMappingChange","excelColumnName","notionPropertyName","prev","m","_notionProperties$fin","find","type","handleCreateColumnChange","columnName","checked","saveMappingAndStartSync","direction","validMappings","trim","length","method","headers","body","JSON","stringify","excel_file_id","notion_database_id","user_id","parseInt","columns_to_create","err","detail","renderConnectStep","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","renderSelectStep","value","onChange","e","target","f","id","placeholder","disabled","renderMappingStep","leftValue","rightValue","renderCompleteStep","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\ntype AppStep = 'connect' | 'select' | 'mapping' | 'complete';\ntype ExcelFile = { id: string; name: string };\ntype ExcelColumn = { name: string };\ntype NotionProperty = { name: string; type: string };\ntype Mapping = { excel_column: string; notion_property: string; data_type: string };\n\nconst API_BASE_URL = 'http://127.0.0.1:8000';\n\nfunction App() {\n  const [step, setStep] = useState<AppStep>('connect');\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\n  const [excelColumns, setExcelColumns] = useState<ExcelColumn[]>([]);\n  const [notionProperties, setNotionProperties] = useState<NotionProperty[]>([]);\n  const [selectedExcelId, setSelectedExcelId] = useState<string>('');\n  const [notionDbId, setNotionDbId] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n  const [userId, setUserId] = useState<string | null>(null);\n  const [mappings, setMappings] = useState<Mapping[]>([]);\n  const [unmatchedColumns, setUnmatchedColumns] = useState<string[]>([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState<string[]>([]);\n  const [syncDirection, setSyncDirection] = useState<'excel-to-notion' | 'notion-to-excel'>('excel-to-notion');\n\n  // Microsoft ve Notion bağlantısı\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else {\n      setStep('connect');\n    }\n  }, []);\n\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n\n  const fetchExcelFiles = async (currentUserId: string) => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);\n      else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchExcelColumns = async (fileId: string) => {\n    if (!userId) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map((name: string) => ({ name }));\n        const hasId = columns.some((c: ExcelColumn) => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setMappings(columns.map((c: ExcelColumn) => ({ excel_column: c.name, notion_property: '', data_type: '' })));\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n        const notionPropNames = data.properties.map((p: any) => p.name.toLowerCase());\n        const unmatched = excelColumns\n          .filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id')\n          .map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate(unmatched);\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n\n  const handleMappingChange = (excelColumnName: string, notionPropertyName: string) => {\n    setMappings(prev => prev.map(m =>\n      m.excel_column === excelColumnName ? { ...m, notion_property: notionPropertyName, data_type: notionProperties.find(p => p.name === notionPropertyName)?.type || '' } : m\n    ));\n  };\n\n  const handleCreateColumnChange = (columnName: string, checked: boolean) => {\n    setSelectedColumnsToCreate(prev => checked ? [...prev, columnName] : prev.filter(c => c !== columnName));\n  };\n\n  const saveMappingAndStartSync = async (direction: 'excel-to-notion' | 'notion-to-excel') => {\n    if (!userId) { setMessage('Kullanıcı kimliği bulunamadı.'); return; }\n    const validMappings = mappings.filter(m => m.notion_property.trim() !== '');\n    if (validMappings.length === 0) { setMessage(\"En az bir sütunu eşleştirin.\"); return; }\n\n    try {\n      const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          mappings: validMappings,\n          columns_to_create: selectedColumnsToCreate\n        }),\n      });\n      if (res.ok) setStep('complete');\n      else { const err = await res.json(); setMessage(`Senkronizasyon başarısız: ${err.error || err.detail}`); }\n    } catch {\n      setMessage('Senkronizasyon sırasında ağ hatası oluştu.');\n    }\n  };\n\n  // ---------- Render Functions ----------\n  const renderConnectStep = () => (\n    <div className=\"step-container\">\n      <button className=\"primary-btn\" onClick={handleMicrosoftConnect}>Microsoft Hesabını Bağla</button>\n    </div>\n  );\n\n  const renderSelectStep = () => (\n    <div className=\"step-container grid\">\n      <div className=\"field\">\n        <label>Excel Dosyası Seçin:</label>\n        <select value={selectedExcelId} onChange={e => { setSelectedExcelId(e.target.value); fetchExcelColumns(e.target.value); }}>\n          <option value=\"\">Dosya Seçiniz...</option>\n          {excelFiles.map(f => <option key={f.id} value={f.id}>{f.name}</option>)}\n        </select>\n      </div>\n      <div className=\"field\">\n        <label>Notion Veritabanı ID'si:</label>\n        <input type=\"text\" value={notionDbId} onChange={e => setNotionDbId(e.target.value)} placeholder=\"Veritabanı ID'sini yapıştırın\" />\n      </div>\n      <button className=\"primary-btn\" onClick={fetchNotionProperties} disabled={!selectedExcelId || !notionDbId}>Notion Özelliklerini Getir</button>\n    </div>\n  );\n\n  const renderMappingStep = () => (\n    <div className=\"step-container\">\n      <div className=\"direction-switch\">\n        <button className={syncDirection === 'excel-to-notion' ? 'active' : ''} onClick={() => setSyncDirection('excel-to-notion')}>Excel → Notion</button>\n        <button className={syncDirection === 'notion-to-excel' ? 'active' : ''} onClick={() => setSyncDirection('notion-to-excel')}>Notion → Excel</button>\n      </div>\n\n      <div className=\"mapping-table\">\n        <div className=\"mapping-row header\">\n          <div>{syncDirection === 'excel-to-notion' ? 'Excel Sütunu' : 'Notion Özelliği'}</div>\n          <div>{syncDirection === 'excel-to-notion' ? 'Notion Özelliği' : 'Excel Sütunu'}</div>\n        </div>\n\n        {mappings.map(m => {\n          const leftValue = syncDirection === 'excel-to-notion' ? m.excel_column : m.notion_property;\n          const rightValue = syncDirection === 'excel-to-notion' ? m.notion_property : m.excel_column;\n\n          return (\n            <div className=\"mapping-row\" key={m.excel_column}>\n              <div>{leftValue}</div>\n              <div>\n                <select\n                  value={rightValue}\n                  onChange={e => handleMappingChange(m.excel_column, e.target.value)}\n                >\n                  <option value=\"\">Seçiniz...</option>\n                  {(syncDirection === 'excel-to-notion' ? notionProperties : excelColumns).map(p => (\n                    <option key={p.name} value={p.name}>{p.name} {'type' in p && p.type ? `(${p.type})` : ''}\n                    </option>\n\n                  ))}\n                </select>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && (\n        <div className=\"unmatched-columns\">\n          <h3>Notion'da Olmayan Sütunlar</h3>\n          {unmatchedColumns.map(c => (\n            <label key={c}>\n              <input type=\"checkbox\" checked={selectedColumnsToCreate.includes(c)} onChange={e => handleCreateColumnChange(c, e.target.checked)} />\n              {c}\n            </label>\n          ))}\n        </div>\n      )}\n\n      <div className=\"sync-buttons\">\n        <button className=\"primary-btn\" onClick={() => saveMappingAndStartSync(syncDirection)}>Senkronizasyonu Başlat</button>\n      </div>\n    </div>\n  );\n\n  const renderCompleteStep = () => (\n    <div className=\"step-container\">\n      <h2>Senkr. Tamamlandı!</h2>\n      <button className=\"primary-btn\" onClick={() => setStep('select')}>Yeni Senkronizasyon</button>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Excel ↔ Notion Senkronizasyonu</h1>\n        {message && <div className=\"message\">{message}</div>}\n      </header>\n      <main>\n        {step === 'connect' && renderConnectStep()}\n        {step === 'select' && renderSelectStep()}\n        {step === 'mapping' && renderMappingStep()}\n        {step === 'complete' && renderCompleteStep()}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}