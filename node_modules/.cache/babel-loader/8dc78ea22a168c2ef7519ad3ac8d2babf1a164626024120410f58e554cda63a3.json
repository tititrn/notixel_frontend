{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\AutoSyncDashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './AutoSyncDashboard'; // Dashboard import edildi\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:8000';\nfunction App() {\n  _s();\n  const [step, setStep] = useState('connect');\n  const [syncDirection, setSyncDirection] = useState('excel-to-notion');\n  const [autoSyncToggle, setAutoSyncToggle] = useState(false);\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [notionProperties, setNotionProperties] = useState([]);\n  const [selectedExcelId, setSelectedExcelId] = useState('');\n  const [notionDbId, setNotionDbId] = useState('');\n  const [message, setMessage] = useState('');\n  const [userId, setUserId] = useState(null);\n  const [excelToNotionMappings, setExcelToNotionMappings] = useState([]);\n  const [notionToExcelMappings, setNotionToExcelMappings] = useState([]);\n  const [unmatchedColumns, setUnmatchedColumns] = useState([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState([]);\n  const [autoSyncColumns, setAutoSyncColumns] = useState([]);\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else setStep('connect');\n  }, []);\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n  const fetchExcelFiles = async currentUserId => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchExcelColumns = async fileId => {\n    if (!userId) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map(name => ({\n          name\n        }));\n        const hasId = columns.some(c => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setExcelToNotionMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setExcelToNotionMappings(columns.map(c => ({\n          excel_column: c.name,\n          notion_property: '',\n          data_type: ''\n        })));\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n        const notionPropNames = data.properties.map(p => p.name.toLowerCase());\n        const unmatched = excelColumns.filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id').map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate([]);\n        setNotionToExcelMappings(data.properties.map(prop => ({\n          excel_column: '',\n          notion_property: prop.name,\n          data_type: prop.type || ''\n        })));\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n  const handleMappingChange = (leftName, rightName) => {\n    if (syncDirection === 'excel-to-notion') {\n      setExcelToNotionMappings(prev => prev.map(m => {\n        var _notionProperties$fin;\n        return m.excel_column === leftName ? {\n          ...m,\n          notion_property: rightName,\n          data_type: ((_notionProperties$fin = notionProperties.find(p => p.name === rightName)) === null || _notionProperties$fin === void 0 ? void 0 : _notionProperties$fin.type) || ''\n        } : m;\n      }));\n    } else {\n      setNotionToExcelMappings(prev => prev.map(m => m.notion_property === leftName ? {\n        ...m,\n        excel_column: rightName\n      } : m));\n    }\n  };\n  const handleCreateColumnChange = (colName, checked) => {\n    setSelectedColumnsToCreate(prev => checked ? [...prev, colName] : prev.filter(c => c !== colName));\n  };\n  const handleAutoSyncColumnChange = (colName, checked) => {\n    setAutoSyncColumns(prev => checked ? [...prev, colName] : prev.filter(c => c !== colName));\n  };\n  const saveMappingAndStartSync = async direction => {\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı.');\n      return;\n    }\n    const mappings = direction === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    const validMappings = mappings.filter(m => direction === 'excel-to-notion' ? m.notion_property.trim() !== '' : m.excel_column.trim() !== '');\n    if (validMappings.length === 0) {\n      setMessage(\"En az bir sütunu eşleştirin.\");\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          mappings: validMappings,\n          columns_to_create: direction === 'excel-to-notion' ? selectedColumnsToCreate : [],\n          columns_to_auto_sync: autoSyncToggle ? autoSyncColumns : []\n        })\n      });\n      if (res.ok) setStep('complete');else {\n        const err = await res.json();\n        setMessage(`Senkronizasyon başarısız: ${err.error || err.detail}`);\n      }\n    } catch {\n      setMessage('Senkronizasyon sırasında ağ hatası oluştu.');\n    }\n  };\n\n  // ---------- Render ----------\n\n  const renderConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: handleMicrosoftConnect,\n      children: \"Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n  const renderMappingStep = () => {\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"S\\xFCtunlar\\u0131 E\\u015Fle\\u015Ftirin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: syncDirection === 'excel-to-notion' ? 'active' : '',\n            onClick: () => setSyncDirection('excel-to-notion'),\n            children: \"Excel \\u2192 Notion\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: syncDirection === 'notion-to-excel' ? 'active' : '',\n            onClick: () => setSyncDirection('notion-to-excel'),\n            children: \"Notion \\u2192 Excel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"auto-sync-toggle\",\n          children: [\"Otomatik Sync\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: autoSyncToggle,\n            onChange: e => setAutoSyncToggle(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-grid\",\n        children: leftItems.map((item, idx) => {\n          const leftName = item.name;\n          const mapping = mappings[idx] || {\n            excel_column: '',\n            notion_property: '',\n            data_type: ''\n          };\n          const selectedRight = syncDirection === 'excel-to-notion' ? mapping.notion_property : mapping.excel_column;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mapping-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-left\",\n              children: leftName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-right\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedRight || '',\n                onChange: e => handleMappingChange(leftName, e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Se\\xE7iniz...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 21\n                }, this), rightItems.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: p.name,\n                  children: syncDirection === 'excel-to-notion' ? 'type' in p && p.type ? `${p.name} (${p.type})` : p.name : p.name\n                }, p.name, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 19\n              }, this), autoSyncToggle && /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                className: \"auto-sync-checkbox\",\n                checked: autoSyncColumns.includes(leftName),\n                onChange: e => handleAutoSyncColumnChange(leftName, e.target.checked),\n                title: \"Otomatik Sync\\u2019e Dahil Et\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this)]\n          }, leftName, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unmatched-columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notion'da Olmayan S\\xFCtunlar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Excel\\u2019de olan, Notion\\u2019da olmayan s\\xFCtunlar\\u0131 eklemek i\\xE7in i\\u015Faretleyin:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this), unmatchedColumns.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"checkbox-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedColumnsToCreate.includes(c),\n            onChange: e => handleCreateColumnChange(c, e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 17\n          }, this), c]\n        }, c, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sync-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"primary-btn\",\n          onClick: () => saveMappingAndStartSync(syncDirection),\n          children: \"Senkronizasyon Ba\\u015Flat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this);\n  };\n  const renderCompleteStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Senkr. Tamamland\\u0131!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: () => setStep('select'),\n      children: \"Yeni Senkronizasyon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Excel \\u2194 Notion Senkronizasyonu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [step === 'connect' && renderConnectStep(), step === 'select' && /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 31\n      }, this), \" \", step === 'mapping' && renderMappingStep(), step === 'complete' && renderCompleteStep()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RWKJHc3dkcn/XGcbrTxAKYhOVsA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dashboard","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","step","setStep","syncDirection","setSyncDirection","autoSyncToggle","setAutoSyncToggle","excelFiles","setExcelFiles","excelColumns","setExcelColumns","notionProperties","setNotionProperties","selectedExcelId","setSelectedExcelId","notionDbId","setNotionDbId","message","setMessage","userId","setUserId","excelToNotionMappings","setExcelToNotionMappings","notionToExcelMappings","setNotionToExcelMappings","unmatchedColumns","setUnmatchedColumns","selectedColumnsToCreate","setSelectedColumnsToCreate","autoSyncColumns","setAutoSyncColumns","params","URLSearchParams","window","location","search","authSuccess","get","receivedUserId","storedUserId","localStorage","getItem","setItem","fetchExcelFiles","history","replaceState","document","title","pathname","handleMicrosoftConnect","href","currentUserId","res","fetch","data","json","ok","files","error","fetchExcelColumns","fileId","columns","map","name","hasId","some","c","toLowerCase","excel_column","notion_property","data_type","fetchNotionProperties","properties","notionPropNames","p","unmatched","filter","col","includes","prop","type","handleMappingChange","leftName","rightName","prev","m","_notionProperties$fin","find","handleCreateColumnChange","colName","checked","handleAutoSyncColumnChange","saveMappingAndStartSync","direction","mappings","validMappings","trim","length","method","headers","body","JSON","stringify","excel_file_id","notion_database_id","user_id","parseInt","columns_to_create","columns_to_auto_sync","err","detail","renderConnectStep","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","renderMappingStep","leftItems","rightItems","onChange","e","target","item","idx","mapping","selectedRight","value","renderCompleteStep","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/AutoSyncDashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Dashboard from './AutoSyncDashboard'; // Dashboard import edildi\r\n\r\ntype AppStep = 'connect' | 'select' | 'mapping' | 'complete';\r\ntype ExcelFile = { id: string; name: string };\r\ntype ExcelColumn = { name: string };\r\ntype NotionProperty = { name: string; type?: string };\r\ntype Mapping = { excel_column: string; notion_property: string; data_type: string };\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:8000';\r\n\r\nfunction App() {\r\n  const [step, setStep] = useState<AppStep>('connect');\r\n  const [syncDirection, setSyncDirection] = useState<'excel-to-notion' | 'notion-to-excel'>('excel-to-notion');\r\n  const [autoSyncToggle, setAutoSyncToggle] = useState(false); \r\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\r\n  const [excelColumns, setExcelColumns] = useState<ExcelColumn[]>([]);\r\n  const [notionProperties, setNotionProperties] = useState<NotionProperty[]>([]);\r\n  const [selectedExcelId, setSelectedExcelId] = useState<string>('');\r\n  const [notionDbId, setNotionDbId] = useState<string>('');\r\n  const [message, setMessage] = useState<string>('');\r\n  const [userId, setUserId] = useState<string | null>(null);\r\n\r\n  const [excelToNotionMappings, setExcelToNotionMappings] = useState<Mapping[]>([]);\r\n  const [notionToExcelMappings, setNotionToExcelMappings] = useState<Mapping[]>([]);\r\n  const [unmatchedColumns, setUnmatchedColumns] = useState<string[]>([]);\r\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState<string[]>([]);\r\n  const [autoSyncColumns, setAutoSyncColumns] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const authSuccess = params.get('auth_success');\r\n    const receivedUserId = params.get('user_id');\r\n    const storedUserId = localStorage.getItem('user_id');\r\n\r\n    if (authSuccess === 'true' && receivedUserId) {\r\n      setUserId(receivedUserId);\r\n      setStep('select');\r\n      localStorage.setItem('user_id', receivedUserId);\r\n      fetchExcelFiles(receivedUserId);\r\n      window.history.replaceState({}, document.title, window.location.pathname);\r\n    } else if (storedUserId) {\r\n      setUserId(storedUserId);\r\n      setStep('select');\r\n      fetchExcelFiles(storedUserId);\r\n    } else setStep('connect');\r\n  }, []);\r\n\r\n  const handleMicrosoftConnect = () => {\r\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\r\n  };\r\n\r\n  const fetchExcelFiles = async (currentUserId: string) => {\r\n    try {\r\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\r\n      const data = await res.json();\r\n      if (res.ok) setExcelFiles(data.files);\r\n      else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\r\n    } catch {\r\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\r\n    }\r\n  };\r\n\r\n  const fetchExcelColumns = async (fileId: string) => {\r\n    if (!userId) return;\r\n    try {\r\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\r\n      const data = await res.json();\r\n      if (res.ok) {\r\n        const columns = data.columns.map((name: string) => ({ name }));\r\n        const hasId = columns.some((c: ExcelColumn) => c.name.toLowerCase() === 'id');\r\n        if (!hasId) {\r\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\r\n          setExcelColumns([]);\r\n          setExcelToNotionMappings([]);\r\n          return;\r\n        }\r\n        setExcelColumns(columns);\r\n        setExcelToNotionMappings(columns.map((c: ExcelColumn) => ({\r\n          excel_column: c.name,\r\n          notion_property: '',\r\n          data_type: ''\r\n        })));\r\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\r\n    } catch {\r\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\r\n    }\r\n  };\r\n\r\n  const fetchNotionProperties = async () => {\r\n    if (!notionDbId) {\r\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\r\n      return;\r\n    }\r\n    try {\r\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\r\n      const data = await res.json();\r\n      if (res.ok) {\r\n        setNotionProperties(data.properties);\r\n\r\n        const notionPropNames = data.properties.map((p: NotionProperty) => p.name.toLowerCase());\r\n        const unmatched = excelColumns\r\n          .filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id')\r\n          .map(col => col.name);\r\n        setUnmatchedColumns(unmatched);\r\n        setSelectedColumnsToCreate([]);\r\n\r\n        setNotionToExcelMappings(data.properties.map((prop: NotionProperty) => ({\r\n          excel_column: '',\r\n          notion_property: prop.name,\r\n          data_type: prop.type || ''\r\n        })));\r\n\r\n        setStep('mapping');\r\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\r\n    } catch {\r\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\r\n    }\r\n  };\r\n\r\n  const handleMappingChange = (leftName: string, rightName: string) => {\r\n    if (syncDirection === 'excel-to-notion') {\r\n      setExcelToNotionMappings(prev =>\r\n        prev.map(m =>\r\n          m.excel_column === leftName\r\n            ? { ...m, notion_property: rightName, data_type: notionProperties.find(p => p.name === rightName)?.type || '' }\r\n            : m\r\n        )\r\n      );\r\n    } else {\r\n      setNotionToExcelMappings(prev =>\r\n        prev.map(m =>\r\n          m.notion_property === leftName\r\n            ? { ...m, excel_column: rightName }\r\n            : m\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleCreateColumnChange = (colName: string, checked: boolean) => {\r\n    setSelectedColumnsToCreate(prev =>\r\n      checked ? [...prev, colName] : prev.filter(c => c !== colName)\r\n    );\r\n  };\r\n\r\n  const handleAutoSyncColumnChange = (colName: string, checked: boolean) => {\r\n    setAutoSyncColumns(prev =>\r\n      checked ? [...prev, colName] : prev.filter(c => c !== colName)\r\n    );\r\n  };\r\n\r\n  const saveMappingAndStartSync = async (direction: 'excel-to-notion' | 'notion-to-excel') => {\r\n    if (!userId) { setMessage('Kullanıcı kimliği bulunamadı.'); return; }\r\n\r\n    const mappings = direction === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\r\n    const validMappings = mappings.filter(m =>\r\n      direction === 'excel-to-notion' ? m.notion_property.trim() !== '' : m.excel_column.trim() !== ''\r\n    );\r\n    if (validMappings.length === 0) { setMessage(\"En az bir sütunu eşleştirin.\"); return; }\r\n\r\n    try {\r\n      const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          excel_file_id: selectedExcelId,\r\n          notion_database_id: notionDbId,\r\n          user_id: parseInt(userId, 10),\r\n          mappings: validMappings,\r\n          columns_to_create: direction === 'excel-to-notion' ? selectedColumnsToCreate : [],\r\n          columns_to_auto_sync: autoSyncToggle ? autoSyncColumns : []\r\n        }),\r\n      });\r\n      if (res.ok) setStep('complete');\r\n      else { const err = await res.json(); setMessage(`Senkronizasyon başarısız: ${err.error || err.detail}`); }\r\n    } catch {\r\n      setMessage('Senkronizasyon sırasında ağ hatası oluştu.');\r\n    }\r\n  };\r\n\r\n  // ---------- Render ----------\r\n\r\n  const renderConnectStep = () => (\r\n    <div className=\"step-container\">\r\n      <button className=\"primary-btn\" onClick={handleMicrosoftConnect}>Microsoft Hesabını Bağla</button>\r\n    </div>\r\n  );\r\n\r\n  const renderMappingStep = () => {\r\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\r\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\r\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\r\n\r\n    return (\r\n      <div className=\"step-container\">\r\n        <h2>Sütunları Eşleştirin</h2>\r\n\r\n        <div className=\"toggle-row\">\r\n          <div className=\"toggle-buttons\">\r\n            <button\r\n              className={syncDirection === 'excel-to-notion' ? 'active' : ''}\r\n              onClick={() => setSyncDirection('excel-to-notion')}\r\n            >\r\n              Excel → Notion\r\n            </button>\r\n            <button\r\n              className={syncDirection === 'notion-to-excel' ? 'active' : ''}\r\n              onClick={() => setSyncDirection('notion-to-excel')}\r\n            >\r\n              Notion → Excel\r\n            </button>\r\n          </div>\r\n\r\n          <label className=\"auto-sync-toggle\">\r\n            Otomatik Sync\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={autoSyncToggle}\r\n              onChange={e => setAutoSyncToggle(e.target.checked)}\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <div className=\"mapping-grid\">\r\n          {leftItems.map((item, idx) => {\r\n            const leftName = item.name;\r\n            const mapping = mappings[idx] || { excel_column: '', notion_property: '', data_type: '' };\r\n            const selectedRight =\r\n              syncDirection === 'excel-to-notion' ? mapping.notion_property : mapping.excel_column;\r\n\r\n            return (\r\n              <div className=\"mapping-row\" key={leftName}>\r\n                <div className=\"mapping-left\">{leftName}</div>\r\n                <div className=\"mapping-right\">\r\n                  <select\r\n                    value={selectedRight || ''}\r\n                    onChange={e => handleMappingChange(leftName, e.target.value)}\r\n                  >\r\n                    <option value=\"\">Seçiniz...</option>\r\n                    {rightItems.map(p => (\r\n                      <option key={p.name} value={p.name}>\r\n                        {syncDirection === 'excel-to-notion'\r\n                          ? 'type' in p && p.type ? `${p.name} (${p.type})` : p.name\r\n                          : p.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n\r\n                  {autoSyncToggle && (\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"auto-sync-checkbox\"\r\n                      checked={autoSyncColumns.includes(leftName)}\r\n                      onChange={e => handleAutoSyncColumnChange(leftName, e.target.checked)}\r\n                      title=\"Otomatik Sync’e Dahil Et\"\r\n                    />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && (\r\n          <div className=\"unmatched-columns\">\r\n            <h3>Notion'da Olmayan Sütunlar</h3>\r\n            <p>Excel’de olan, Notion’da olmayan sütunları eklemek için işaretleyin:</p>\r\n            {unmatchedColumns.map(c => (\r\n              <label key={c} className=\"checkbox-label\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={selectedColumnsToCreate.includes(c)}\r\n                  onChange={e => handleCreateColumnChange(c, e.target.checked)}\r\n                />\r\n                {c}\r\n              </label>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"sync-buttons\">\r\n          <button\r\n            className=\"primary-btn\"\r\n            onClick={() => saveMappingAndStartSync(syncDirection)}\r\n          >\r\n            Senkronizasyon Başlat\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderCompleteStep = () => (\r\n    <div className=\"step-container\">\r\n      <h2>Senkr. Tamamlandı!</h2>\r\n      <button className=\"primary-btn\" onClick={() => setStep('select')}>Yeni Senkronizasyon</button>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Excel ↔ Notion Senkronizasyonu</h1>\r\n        {message && <div className=\"message\">{message}</div>}\r\n      </header>\r\n      <main>\r\n        {step === 'connect' && renderConnectStep()}\r\n        {step === 'select' && <Dashboard />} {/* Dashboard eklendi */}\r\n        {step === 'mapping' && renderMappingStep()}\r\n        {step === 'complete' && renderCompleteStep()}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}