{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// API'ye yapılacak çağrıların temel URL'si\nconst API_BASE_URL = 'http://127.0.0.1:8000';\nfunction App() {\n  _s();\n  const [step, setStep] = useState('connect');\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [notionProperties, setNotionProperties] = useState([]);\n  const [selectedExcelId, setSelectedExcelId] = useState('');\n  const [notionDbId, setNotionDbId] = useState('');\n  const [message, setMessage] = useState('');\n  const [userId, setUserId] = useState(null);\n  const [mappings, setMappings] = useState([]);\n  useEffect(() => {\n    // URL'deki yetkilendirme parametrelerini kontrol et\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const authError = params.get('auth_error');\n    const receivedUserId = params.get('user_id');\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      fetchExcelFiles(receivedUserId);\n    } else if (authError === 'true') {\n      setMessage(`Yetkilendirme hatası: ${params.get('message')}`);\n      setStep('connect');\n    }\n  }, []);\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n  const handleNotionConnect = () => {\n    setMessage('Notion hesabınızı bağlamak için, Notion\\'da herhangi bir veritabanı veya sayfasına gidin, \"...\" menüsünden \"Add connections\"ı seçin ve oluşturduğunuz entegrasyonu (\"Excel Sync\") ekleyin.');\n  };\n  const fetchExcelFiles = async currentUserId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setExcelFiles(data.files);\n      } else {\n        setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchExcelColumns = async fileId => {\n    if (!userId) return;\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setExcelColumns(data.columns.map(name => ({\n          name\n        })));\n        setMappings(data.columns.map(name => ({\n          excel_column: name,\n          notion_property: '',\n          data_type: ''\n        })));\n      } else {\n        setMessage(`Excel sütunları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen bir Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setNotionProperties(data.properties);\n        setStep('mapping');\n        setMessage('');\n      } else {\n        setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n  const handleExcelFileChange = e => {\n    const fileId = e.target.value;\n    setSelectedExcelId(fileId);\n    if (fileId) {\n      fetchExcelColumns(fileId);\n    }\n  };\n  const handleMappingChange = (excelColumnName, notionPropertyName) => {\n    setMappings(prevMappings => {\n      // Değişikliği yapmak için eski eşleşmeleri kopyala\n      const newMappings = [...prevMappings];\n      const mappingIndex = newMappings.findIndex(m => m.excel_column === excelColumnName);\n      if (mappingIndex > -1) {\n        const selectedNotionProp = notionProperties.find(p => p.name === notionPropertyName);\n        newMappings[mappingIndex] = {\n          ...newMappings[mappingIndex],\n          notion_property: notionPropertyName,\n          data_type: (selectedNotionProp === null || selectedNotionProp === void 0 ? void 0 : selectedNotionProp.type) || ''\n        };\n      }\n      return newMappings;\n    });\n  };\n  const saveMappingAndStartSync = async () => {\n    if (!userId) return;\n    try {\n      // 1. Eşleşmeleri veritabanına kaydet\n      const saveResponse = await fetch(`${API_BASE_URL}/save-mapping?user_id=${userId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(mappings)\n      });\n      if (!saveResponse.ok) {\n        const saveError = await saveResponse.json();\n        setMessage(`Eşleme kaydedilemedi: ${saveError.error}`);\n        return;\n      }\n      setMessage('Eşleme başarıyla kaydedildi.');\n\n      // 2. Senkronizasyon işlemini başlat\n      const syncResponse = await fetch(`${API_BASE_URL}/sync`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10)\n        })\n      });\n      if (!syncResponse.ok) {\n        const syncError = await syncResponse.json();\n        setMessage(`Senkronizasyon başlatılamadı: ${syncError.error}`);\n        return;\n      }\n      setStep('complete');\n      setMessage('Senkronizasyon başarıyla başlatıldı!');\n    } catch (error) {\n      setMessage('Eşleme kaydetme veya senkronizasyon başlatma sırasında ağ hatası oluştu.');\n    }\n  };\n  const renderConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMicrosoftConnect,\n      children: \"Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNotionConnect,\n      children: \"Notion Ba\\u011Flant\\u0131s\\u0131n\\u0131 Kur\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n  const renderSelectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Excel Dosyas\\u0131n\\u0131 ve Notion Veritaban\\u0131n\\u0131 Se\\xE7in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Excel Dosyas\\u0131 Se\\xE7in:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedExcelId,\n          onChange: handleExcelFileChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Dosya Se\\xE7iniz...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), excelFiles.map(file => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: file.id,\n            children: file.name\n          }, file.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Notion Veritaban\\u0131 ID'si:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: notionDbId,\n          onChange: e => setNotionDbId(e.target.value),\n          placeholder: \"Veritaban\\u0131 ID'sini yap\\u0131\\u015Ft\\u0131r\\u0131n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchNotionProperties,\n      disabled: !selectedExcelId || !notionDbId,\n      children: \"Notion \\xD6zelliklerini Getir\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n  const renderMappingStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"S\\xFCtunlar\\u0131 E\\u015Fle\\u015Ftirin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mapping-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Excel S\\xFCtunlar\\u0131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: excelColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"excel-name\",\n              children: column.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notion \\xD6zellikleri\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: mappings.map((mapping, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: mapping.notion_property,\n              onChange: e => handleMappingChange(mapping.excel_column, e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Se\\xE7iniz...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 19\n              }, this), notionProperties.map(prop => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: prop.name,\n                children: [prop.name, \" (\", prop.type, \")\"]\n              }, prop.name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveMappingAndStartSync,\n      children: \"E\\u015Flemeyi Kaydet ve Senkronizasyonu Ba\\u015Flat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n  const renderCompleteStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Senkronizasyon Ba\\u015Far\\u0131l\\u0131!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Verileriniz \\u015Fimdi Excel ve Notion aras\\u0131nda senkronize ediliyor. Kodunuzdaki periyodik g\\xF6revler bu senkronizasyonu s\\xFCrd\\xFCrecektir.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setStep('connect'),\n      children: \"Yeni Senkronizasyon Olu\\u015Ftur\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Notion & Excel Senkronizasyonu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 21\n      }, this), step === 'connect' && renderConnectStep(), step === 'select' && renderSelectStep(), step === 'mapping' && renderMappingStep(), step === 'complete' && renderCompleteStep()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JaczmQBZ6AbVP1FIcCGpqDWiGPU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","step","setStep","excelFiles","setExcelFiles","excelColumns","setExcelColumns","notionProperties","setNotionProperties","selectedExcelId","setSelectedExcelId","notionDbId","setNotionDbId","message","setMessage","userId","setUserId","mappings","setMappings","params","URLSearchParams","window","location","search","authSuccess","get","authError","receivedUserId","fetchExcelFiles","handleMicrosoftConnect","href","handleNotionConnect","currentUserId","response","fetch","data","json","ok","files","error","fetchExcelColumns","fileId","columns","map","name","excel_column","notion_property","data_type","fetchNotionProperties","properties","handleExcelFileChange","e","target","value","handleMappingChange","excelColumnName","notionPropertyName","prevMappings","newMappings","mappingIndex","findIndex","m","selectedNotionProp","find","p","type","saveMappingAndStartSync","saveResponse","method","headers","body","JSON","stringify","saveError","syncResponse","excel_file_id","notion_database_id","user_id","parseInt","syncError","renderConnectStep","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","renderSelectStep","onChange","file","id","placeholder","disabled","renderMappingStep","column","index","mapping","prop","renderCompleteStep","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\ntype AppStep = 'connect' | 'select' | 'mapping' | 'complete';\ntype ExcelFile = { id: string; name: string };\ntype ExcelColumn = { name: string };\ntype NotionProperty = { name: string; type: string };\ntype Mapping = { excel_column: string; notion_property: string; data_type: string };\n\n// API'ye yapılacak çağrıların temel URL'si\nconst API_BASE_URL = 'http://127.0.0.1:8000';\n\nfunction App() {\n  const [step, setStep] = useState<AppStep>('connect');\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\n  const [excelColumns, setExcelColumns] = useState<ExcelColumn[]>([]);\n  const [notionProperties, setNotionProperties] = useState<NotionProperty[]>([]);\n  const [selectedExcelId, setSelectedExcelId] = useState<string>('');\n  const [notionDbId, setNotionDbId] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n  const [userId, setUserId] = useState<string | null>(null);\n  const [mappings, setMappings] = useState<Mapping[]>([]);\n\n  useEffect(() => {\n    // URL'deki yetkilendirme parametrelerini kontrol et\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const authError = params.get('auth_error');\n    const receivedUserId = params.get('user_id');\n\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      fetchExcelFiles(receivedUserId);\n    } else if (authError === 'true') {\n      setMessage(`Yetkilendirme hatası: ${params.get('message')}`);\n      setStep('connect');\n    }\n  }, []);\n\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n\n  const handleNotionConnect = () => {\n    setMessage('Notion hesabınızı bağlamak için, Notion\\'da herhangi bir veritabanı veya sayfasına gidin, \"...\" menüsünden \"Add connections\"ı seçin ve oluşturduğunuz entegrasyonu (\"Excel Sync\") ekleyin.');\n  };\n\n  const fetchExcelFiles = async (currentUserId: string) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setExcelFiles(data.files);\n      } else {\n        setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchExcelColumns = async (fileId: string) => {\n    if (!userId) return;\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setExcelColumns(data.columns.map((name: string) => ({ name })));\n        setMappings(data.columns.map((name: string) => ({ excel_column: name, notion_property: '', data_type: '' })));\n      } else {\n        setMessage(`Excel sütunları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen bir Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setNotionProperties(data.properties);\n        setStep('mapping');\n        setMessage('');\n      } else {\n        setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n\n  const handleExcelFileChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const fileId = e.target.value;\n    setSelectedExcelId(fileId);\n    if (fileId) {\n      fetchExcelColumns(fileId);\n    }\n  };\n\n  const handleMappingChange = (excelColumnName: string, notionPropertyName: string) => {\n    setMappings(prevMappings => {\n      // Değişikliği yapmak için eski eşleşmeleri kopyala\n      const newMappings = [...prevMappings];\n      const mappingIndex = newMappings.findIndex(m => m.excel_column === excelColumnName);\n\n      if (mappingIndex > -1) {\n        const selectedNotionProp = notionProperties.find(p => p.name === notionPropertyName);\n        newMappings[mappingIndex] = {\n          ...newMappings[mappingIndex],\n          notion_property: notionPropertyName,\n          data_type: selectedNotionProp?.type || ''\n        };\n      }\n      return newMappings;\n    });\n  };\n\n  const saveMappingAndStartSync = async () => {\n    if (!userId) return;\n\n    try {\n      // 1. Eşleşmeleri veritabanına kaydet\n      const saveResponse = await fetch(`${API_BASE_URL}/save-mapping?user_id=${userId}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(mappings),\n      });\n\n      if (!saveResponse.ok) {\n        const saveError = await saveResponse.json();\n        setMessage(`Eşleme kaydedilemedi: ${saveError.error}`);\n        return;\n      }\n      setMessage('Eşleme başarıyla kaydedildi.');\n\n      // 2. Senkronizasyon işlemini başlat\n      const syncResponse = await fetch(`${API_BASE_URL}/sync`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n        }),\n      });\n\n      if (!syncResponse.ok) {\n        const syncError = await syncResponse.json();\n        setMessage(`Senkronizasyon başlatılamadı: ${syncError.error}`);\n        return;\n      }\n\n      setStep('complete');\n      setMessage('Senkronizasyon başarıyla başlatıldı!');\n\n    } catch (error) {\n      setMessage('Eşleme kaydetme veya senkronizasyon başlatma sırasında ağ hatası oluştu.');\n    }\n  };\n\n  const renderConnectStep = () => (\n    <div className=\"step-container\">\n      <button onClick={handleMicrosoftConnect}>Microsoft Hesabını Bağla</button>\n      <button onClick={handleNotionConnect}>Notion Bağlantısını Kur</button>\n    </div>\n  );\n\n  const renderSelectStep = () => (\n    <div className=\"step-container\">\n      <h2>Excel Dosyasını ve Notion Veritabanını Seçin</h2>\n      <div>\n        <label>\n          Excel Dosyası Seçin:\n          <select value={selectedExcelId} onChange={handleExcelFileChange}>\n            <option value=\"\">Dosya Seçiniz...</option>\n            {excelFiles.map(file => (\n              <option key={file.id} value={file.id}>{file.name}</option>\n            ))}\n          </select>\n        </label>\n      </div>\n      <div>\n        <label>\n          Notion Veritabanı ID'si:\n          <input\n            type=\"text\"\n            value={notionDbId}\n            onChange={(e) => setNotionDbId(e.target.value)}\n            placeholder=\"Veritabanı ID'sini yapıştırın\"\n          />\n        </label>\n      </div>\n      <button onClick={fetchNotionProperties} disabled={!selectedExcelId || !notionDbId}>Notion Özelliklerini Getir</button>\n    </div>\n  );\n\n  const renderMappingStep = () => (\n    <div className=\"step-container\">\n      <h2>Sütunları Eşleştirin</h2>\n      <div className=\"mapping-grid\">\n        <div className=\"mapping-section\">\n          <h3>Excel Sütunları</h3>\n          <ul>\n            {excelColumns.map((column, index) => (\n              <li key={index}>\n                <span className=\"excel-name\">{column.name}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"mapping-section\">\n          <h3>Notion Özellikleri</h3>\n          <ul>\n            {mappings.map((mapping, index) => (\n              <li key={index}>\n                <select\n                  value={mapping.notion_property}\n                  onChange={(e) => handleMappingChange(mapping.excel_column, e.target.value)}\n                >\n                  <option value=\"\">Seçiniz...</option>\n                  {notionProperties.map(prop => (\n                    <option key={prop.name} value={prop.name}>{prop.name} ({prop.type})</option>\n                  ))}\n                </select>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n      <button onClick={saveMappingAndStartSync}>Eşlemeyi Kaydet ve Senkronizasyonu Başlat</button>\n    </div>\n  );\n  \n  const renderCompleteStep = () => (\n    <div className=\"step-container\">\n      <h2>Senkronizasyon Başarılı!</h2>\n      <p>Verileriniz şimdi Excel ve Notion arasında senkronize ediliyor. Kodunuzdaki periyodik görevler bu senkronizasyonu sürdürecektir.</p>\n      <button onClick={() => setStep('connect')}>Yeni Senkronizasyon Oluştur</button>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Notion & Excel Senkronizasyonu</h1>\n        \n        {message && <p className=\"message\">{message}</p>}\n\n        {step === 'connect' && renderConnectStep()}\n        {step === 'select' && renderSelectStep()}\n        {step === 'mapping' && renderMappingStep()}\n        {step === 'complete' && renderCompleteStep()}\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}