{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:8000';\nfunction App() {\n  _s();\n  const [step, setStep] = useState('connect');\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [notionProperties, setNotionProperties] = useState([]);\n  const [selectedExcelId, setSelectedExcelId] = useState('');\n  const [notionDbId, setNotionDbId] = useState('');\n  const [message, setMessage] = useState('');\n  const [userId, setUserId] = useState(null);\n  const [mappings, setMappings] = useState([]);\n  const [unmatchedColumns, setUnmatchedColumns] = useState([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState([]);\n  const [syncDirection, setSyncDirection] = useState('excel-to-notion');\n\n  // Microsoft bağlantısı\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else {\n      setStep('connect');\n    }\n  }, []);\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n  const fetchExcelFiles = async currentUserId => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchExcelColumns = async fileId => {\n    if (!userId) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map(name => ({\n          name\n        }));\n        const hasId = columns.some(c => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        if (syncDirection === 'excel-to-notion') {\n          setMappings(columns.map(c => ({\n            excel_column: c.name,\n            notion_property: '',\n            data_type: ''\n          })));\n        }\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n        const notionPropNames = data.properties.map(p => p.name.toLowerCase());\n        const unmatched = excelColumns.filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id').map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate(unmatched);\n        if (syncDirection === 'notion-to-excel') {\n          setMappings(data.properties.map(p => ({\n            excel_column: '',\n            notion_property: p.name,\n            data_type: p.type || ''\n          })));\n        }\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n  const handleMappingChange = (key, value) => {\n    setMappings(prev => prev.map(m => {\n      var _notionProperties$fin;\n      return syncDirection === 'excel-to-notion' ? m.excel_column === key ? {\n        ...m,\n        notion_property: value,\n        data_type: ((_notionProperties$fin = notionProperties.find(p => p.name === value)) === null || _notionProperties$fin === void 0 ? void 0 : _notionProperties$fin.type) || ''\n      } : m : m.notion_property === key ? {\n        ...m,\n        excel_column: value\n      } : m;\n    }));\n  };\n  const handleCreateColumnChange = (columnName, checked) => {\n    setSelectedColumnsToCreate(prev => checked ? [...prev, columnName] : prev.filter(c => c !== columnName));\n  };\n  const handleToggleDirection = dir => {\n    setSyncDirection(dir);\n    if (dir === 'excel-to-notion') {\n      setMappings(excelColumns.map(c => ({\n        excel_column: c.name,\n        notion_property: '',\n        data_type: ''\n      })));\n    } else {\n      setMappings(notionProperties.map(p => ({\n        excel_column: '',\n        notion_property: p.name,\n        data_type: p.type || ''\n      })));\n    }\n  };\n  const saveMappingAndStartSync = async direction => {\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı.');\n      return;\n    }\n    const validMappings = mappings.filter(m => direction === 'excel-to-notion' ? m.notion_property.trim() !== '' : m.excel_column.trim() !== '');\n    if (validMappings.length === 0) {\n      setMessage(\"En az bir sütunu eşleştirin.\");\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          mappings: validMappings,\n          columns_to_create: selectedColumnsToCreate\n        })\n      });\n      if (res.ok) setStep('complete');else {\n        const err = await res.json();\n        setMessage(`Senkronizasyon başarısız: ${err.error || err.detail}`);\n      }\n    } catch {\n      setMessage('Senkronizasyon sırasında ağ hatası oluştu.');\n    }\n  };\n\n  // ---------- Render ----------\n  const renderConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: handleMicrosoftConnect,\n      children: \"Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n  const renderSelectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Excel Dosyas\\u0131 Se\\xE7in:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedExcelId,\n        onChange: e => {\n          setSelectedExcelId(e.target.value);\n          fetchExcelColumns(e.target.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Dosya Se\\xE7iniz...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), excelFiles.map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: f.id,\n          children: f.name\n        }, f.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 32\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Notion Veritaban\\u0131 ID'si:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: notionDbId,\n        onChange: e => setNotionDbId(e.target.value),\n        placeholder: \"Veritaban\\u0131 ID'sini yap\\u0131\\u015Ft\\u0131r\\u0131n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: fetchNotionProperties,\n      disabled: !selectedExcelId || !notionDbId,\n      children: \"Notion \\xD6zelliklerini Getir\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n  const renderMappingStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toggle-direction\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: syncDirection === 'excel-to-notion' ? 'active' : '',\n        onClick: () => handleToggleDirection('excel-to-notion'),\n        children: \"Excel \\u2192 Notion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: syncDirection === 'notion-to-excel' ? 'active' : '',\n        onClick: () => handleToggleDirection('notion-to-excel'),\n        children: \"Notion \\u2192 Excel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mapping-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: syncDirection === 'excel-to-notion' ? 'Excel Sütunları' : 'Notion Özellikleri'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), (syncDirection === 'excel-to-notion' ? excelColumns : notionProperties).map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mapping-item\",\n          children: c.name\n        }, c.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: syncDirection === 'excel-to-notion' ? 'Notion Özellikleri' : 'Excel Sütunları'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), mappings.map(m => /*#__PURE__*/_jsxDEV(\"select\", {\n          value: syncDirection === 'excel-to-notion' ? m.notion_property : m.excel_column,\n          onChange: e => handleMappingChange(syncDirection === 'excel-to-notion' ? m.excel_column : m.notion_property, e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Se\\xE7iniz...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this), (syncDirection === 'excel-to-notion' ? notionProperties : excelColumns).map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: p.name,\n            children: [p.name, 'type' in p && p.type ? ` (${p.type})` : '']\n          }, p.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this))]\n        }, syncDirection === 'excel-to-notion' ? m.excel_column : m.notion_property, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unmatched-columns\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Notion'da Olmayan S\\xFCtunlar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this), unmatchedColumns.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedColumnsToCreate.includes(c),\n          onChange: e => handleCreateColumnChange(c, e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }, this), c]\n      }, c, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sync-buttons\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"primary-btn\",\n        onClick: () => saveMappingAndStartSync(syncDirection),\n        children: \"Sync Ba\\u015Flat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n  const renderCompleteStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Senkr. Tamamland\\u0131!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: () => setStep('select'),\n      children: \"Yeni Senkronizasyon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Excel \\u2194 Notion Senkronizasyonu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [step === 'connect' && renderConnectStep(), step === 'select' && renderSelectStep(), step === 'mapping' && renderMappingStep(), step === 'complete' && renderCompleteStep()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oNEBNtJ340TmNNi5KzeTBgUM1do=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","step","setStep","excelFiles","setExcelFiles","excelColumns","setExcelColumns","notionProperties","setNotionProperties","selectedExcelId","setSelectedExcelId","notionDbId","setNotionDbId","message","setMessage","userId","setUserId","mappings","setMappings","unmatchedColumns","setUnmatchedColumns","selectedColumnsToCreate","setSelectedColumnsToCreate","syncDirection","setSyncDirection","params","URLSearchParams","window","location","search","authSuccess","get","receivedUserId","storedUserId","localStorage","getItem","setItem","fetchExcelFiles","history","replaceState","document","title","pathname","handleMicrosoftConnect","href","currentUserId","res","fetch","data","json","ok","files","error","fetchExcelColumns","fileId","columns","map","name","hasId","some","c","toLowerCase","excel_column","notion_property","data_type","fetchNotionProperties","properties","notionPropNames","p","unmatched","filter","col","includes","type","handleMappingChange","key","value","prev","m","_notionProperties$fin","find","handleCreateColumnChange","columnName","checked","handleToggleDirection","dir","saveMappingAndStartSync","direction","validMappings","trim","length","method","headers","body","JSON","stringify","excel_file_id","notion_database_id","user_id","parseInt","columns_to_create","err","detail","renderConnectStep","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","renderSelectStep","onChange","e","target","f","id","placeholder","disabled","renderMappingStep","renderCompleteStep","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\ntype AppStep = 'connect' | 'select' | 'mapping' | 'complete';\ntype ExcelFile = { id: string; name: string };\ntype ExcelColumn = { name: string };\ntype NotionProperty = { name: string; type?: string };\ntype Mapping = { excel_column: string; notion_property: string; data_type: string };\n\nconst API_BASE_URL = 'http://127.0.0.1:8000';\n\nfunction App() {\n  const [step, setStep] = useState<AppStep>('connect');\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\n  const [excelColumns, setExcelColumns] = useState<ExcelColumn[]>([]);\n  const [notionProperties, setNotionProperties] = useState<NotionProperty[]>([]);\n  const [selectedExcelId, setSelectedExcelId] = useState<string>('');\n  const [notionDbId, setNotionDbId] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n  const [userId, setUserId] = useState<string | null>(null);\n  const [mappings, setMappings] = useState<Mapping[]>([]);\n  const [unmatchedColumns, setUnmatchedColumns] = useState<string[]>([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState<string[]>([]);\n  const [syncDirection, setSyncDirection] = useState<'excel-to-notion' | 'notion-to-excel'>('excel-to-notion');\n\n  // Microsoft bağlantısı\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else {\n      setStep('connect');\n    }\n  }, []);\n\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n\n  const fetchExcelFiles = async (currentUserId: string) => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);\n      else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchExcelColumns = async (fileId: string) => {\n    if (!userId) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map((name: string) => ({ name }));\n        const hasId = columns.some((c: ExcelColumn) => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        if (syncDirection === 'excel-to-notion') {\n          setMappings(columns.map((c: ExcelColumn) => ({ excel_column: c.name, notion_property: '', data_type: '' })));\n        }\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n        const notionPropNames = data.properties.map((p: NotionProperty) => p.name.toLowerCase());\n        const unmatched = excelColumns\n          .filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id')\n          .map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate(unmatched);\n\n        if (syncDirection === 'notion-to-excel') {\n          setMappings(data.properties.map((p: NotionProperty) => ({ excel_column: '', notion_property: p.name, data_type: p.type || '' })));\n        }\n\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n\n  const handleMappingChange = (key: string, value: string) => {\n    setMappings(prev =>\n      prev.map(m =>\n        syncDirection === 'excel-to-notion'\n          ? m.excel_column === key ? { ...m, notion_property: value, data_type: notionProperties.find(p => p.name === value)?.type || '' } : m\n          : m.notion_property === key ? { ...m, excel_column: value } : m\n      )\n    );\n  };\n\n  const handleCreateColumnChange = (columnName: string, checked: boolean) => {\n    setSelectedColumnsToCreate(prev => checked ? [...prev, columnName] : prev.filter(c => c !== columnName));\n  };\n\n  const handleToggleDirection = (dir: 'excel-to-notion' | 'notion-to-excel') => {\n    setSyncDirection(dir);\n    if (dir === 'excel-to-notion') {\n      setMappings(excelColumns.map(c => ({ excel_column: c.name, notion_property: '', data_type: '' })));\n    } else {\n      setMappings(notionProperties.map(p => ({ excel_column: '', notion_property: p.name, data_type: p.type || '' })));\n    }\n  };\n\n  const saveMappingAndStartSync = async (direction: 'excel-to-notion' | 'notion-to-excel') => {\n    if (!userId) { setMessage('Kullanıcı kimliği bulunamadı.'); return; }\n    const validMappings = mappings.filter(m => (direction === 'excel-to-notion' ? m.notion_property.trim() !== '' : m.excel_column.trim() !== ''));\n    if (validMappings.length === 0) { setMessage(\"En az bir sütunu eşleştirin.\"); return; }\n\n    try {\n      const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          mappings: validMappings,\n          columns_to_create: selectedColumnsToCreate\n        }),\n      });\n      if (res.ok) setStep('complete');\n      else { const err = await res.json(); setMessage(`Senkronizasyon başarısız: ${err.error || err.detail}`); }\n    } catch {\n      setMessage('Senkronizasyon sırasında ağ hatası oluştu.');\n    }\n  };\n\n  // ---------- Render ----------\n  const renderConnectStep = () => (\n    <div className=\"step-container\">\n      <button className=\"primary-btn\" onClick={handleMicrosoftConnect}>Microsoft Hesabını Bağla</button>\n    </div>\n  );\n\n  const renderSelectStep = () => (\n    <div className=\"step-container grid\">\n      <div className=\"field\">\n        <label>Excel Dosyası Seçin:</label>\n        <select value={selectedExcelId} onChange={e => { setSelectedExcelId(e.target.value); fetchExcelColumns(e.target.value); }}>\n          <option value=\"\">Dosya Seçiniz...</option>\n          {excelFiles.map(f => <option key={f.id} value={f.id}>{f.name}</option>)}\n        </select>\n      </div>\n      <div className=\"field\">\n        <label>Notion Veritabanı ID'si:</label>\n        <input type=\"text\" value={notionDbId} onChange={e => setNotionDbId(e.target.value)} placeholder=\"Veritabanı ID'sini yapıştırın\" />\n      </div>\n      <button className=\"primary-btn\" onClick={fetchNotionProperties} disabled={!selectedExcelId || !notionDbId}>Notion Özelliklerini Getir</button>\n    </div>\n  );\n\n  const renderMappingStep = () => (\n    <div className=\"step-container\">\n      <div className=\"toggle-direction\">\n        <button className={syncDirection === 'excel-to-notion' ? 'active' : ''} onClick={() => handleToggleDirection('excel-to-notion')}>Excel → Notion</button>\n        <button className={syncDirection === 'notion-to-excel' ? 'active' : ''} onClick={() => handleToggleDirection('notion-to-excel')}>Notion → Excel</button>\n      </div>\n\n      <div className=\"mapping-grid\">\n        <div className=\"mapping-column\">\n          <h3>{syncDirection === 'excel-to-notion' ? 'Excel Sütunları' : 'Notion Özellikleri'}</h3>\n          {(syncDirection === 'excel-to-notion' ? excelColumns : notionProperties).map(c => (\n            <div key={c.name} className=\"mapping-item\">{c.name}</div>\n          ))}\n        </div>\n\n        <div className=\"mapping-column\">\n          <h3>{syncDirection === 'excel-to-notion' ? 'Notion Özellikleri' : 'Excel Sütunları'}</h3>\n          {mappings.map(m => (\n            <select\n              key={syncDirection === 'excel-to-notion' ? m.excel_column : m.notion_property}\n              value={syncDirection === 'excel-to-notion' ? m.notion_property : m.excel_column}\n              onChange={e => handleMappingChange(syncDirection === 'excel-to-notion' ? m.excel_column : m.notion_property, e.target.value)}\n            >\n              <option value=\"\">Seçiniz...</option>\n              {(syncDirection === 'excel-to-notion' ? notionProperties : excelColumns).map(p =>\n                <option key={p.name} value={p.name}>{p.name}{'type' in p && p.type ? ` (${p.type})` : ''}</option>\n              )}\n            </select>\n          ))}\n        </div>\n      </div>\n\n      {syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && (\n        <div className=\"unmatched-columns\">\n          <h3>Notion'da Olmayan Sütunlar</h3>\n          {unmatchedColumns.map(c => (\n            <label key={c}>\n              <input type=\"checkbox\" checked={selectedColumnsToCreate.includes(c)} onChange={e => handleCreateColumnChange(c, e.target.checked)} />\n              {c}\n            </label>\n          ))}\n        </div>\n      )}\n\n      <div className=\"sync-buttons\">\n        <button className=\"primary-btn\" onClick={() => saveMappingAndStartSync(syncDirection)}>Sync Başlat</button>\n      </div>\n    </div>\n  );\n\n  const renderCompleteStep = () => (\n    <div className=\"step-container\">\n      <h2>Senkr. Tamamlandı!</h2>\n      <button className=\"primary-btn\" onClick={() => setStep('select')}>Yeni Senkronizasyon</button>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Excel ↔ Notion Senkronizasyonu</h1>\n        {message && <div className=\"message\">{message}</div>}\n      </header>\n      <main>\n        {step === 'connect' && renderConnectStep()}\n        {step === 'select' && renderSelectStep()}\n        {step === 'mapping' && renderMappingStep()}\n        {step === 'complete' && renderCompleteStep()}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}