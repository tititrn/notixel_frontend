{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './AutoSyncDashboard';\nimport Home from './Home'; // Yeni Home bileşenini import ediyoruz!\n\n// 'home' adımını AppStep türüne ekliyoruz\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:8000';\nfunction App() {\n  _s();\n  // Başlangıç adımını, localStorage'daki user_id'ye göre belirliyoruz.\n  const initialUserId = localStorage.getItem('user_id');\n  // ID varsa 'connect' adımında başla, yoksa 'home' (giriş) sayfasında başla.\n  const initialStep = initialUserId ? 'connect' : 'home';\n  const [step, setStep] = useState(initialStep);\n  const [syncDirection, setSyncDirection] = useState('excel-to-notion');\n  const [autoSyncToggle, setAutoSyncToggle] = useState(false);\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [notionProperties, setNotionProperties] = useState([]);\n  const [selectedExcelId, setSelectedExcelId] = useState('');\n  const [excelWorksheets, setExcelWorksheets] = useState([]); // Yeni\n  const [selectedWorksheetName, setSelectedWorksheetName] = useState(''); // Yeni\n  const [notionDbId, setNotionDbId] = useState('');\n  const [message, setMessage] = useState('');\n  const [userId, setUserId] = useState(initialUserId); // initialUserId'yi kullanıyoruz\n\n  const [excelToNotionMappings, setExcelToNotionMappings] = useState([]);\n  const [notionToExcelMappings, setNotionToExcelMappings] = useState([]);\n  const [unmatchedColumns, setUnmatchedColumns] = useState([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState([]);\n  const [autoSyncColumns, setAutoSyncColumns] = useState([]);\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const receivedUserId = params.get('user_id');\n    const notionAuthSuccess = params.get('notion_auth_success') === 'true';\n    const notionAuthError = params.get('notion_auth_error') === 'true';\n    const authSuccess = params.get('auth_success') === 'true';\n\n    // Helper: Kullanıcı verilerini kaydeder ve Notion bağlantısını kontrol eder.\n    const initializeApp = async (id, isNewLogin) => {\n      setUserId(id);\n      localStorage.setItem('user_id', id);\n      const hasNotionKey = await checkNotionStatus(id);\n      if (!hasNotionKey) {\n        setStep('notion_connect');\n        if (isNewLogin) setMessage('Microsoft bağlantısı başarılı. Şimdi Notion hesabınızı bağlayın.');\n      } else {\n        setStep('select');\n        fetchExcelFiles(id);\n        if (isNewLogin) setMessage('Bağlantılar tamam! Excel dosyanızı seçin.');\n      }\n    };\n\n    // --- 1. Notion Callback Handling (Notion'dan döndüğünde) ---\n    if (notionAuthSuccess) {\n      const currentId = localStorage.getItem('user_id');\n      if (currentId) {\n        setStep('select');\n        fetchExcelFiles(currentId);\n        setMessage('Notion bağlantısı başarılı! Şimdi bir dosya seçin.');\n      } else {\n        setMessage('Hata: Notion bağlantısı başarılı ancak kullanıcı ID kayıp.');\n        setStep('home');\n      }\n      window.history.replaceState(null, '', window.location.pathname);\n      return;\n    }\n    if (notionAuthError) {\n      setMessage(`Notion bağlantı hatası: ${params.get('message') || 'Bilinmeyen hata.'}`);\n      setStep('notion_connect');\n      window.history.replaceState(null, '', window.location.pathname);\n      return;\n    }\n\n    // --- 2. Microsoft Callback Handling (Microsoft'tan döndüğünde) ---\n    if (authSuccess && receivedUserId) {\n      initializeApp(receivedUserId, true);\n      window.history.replaceState(null, '', window.location.pathname);\n      return;\n    }\n\n    // --- 3. Persistent Session / Initial Load Handling ---\n    const storedUserId = localStorage.getItem('user_id');\n    // Eğer localStorage'da ID varsa ve mevcut adım 'home' değilse (yani oturum açma akışına girmişse)\n    if (storedUserId && step !== 'home') {\n      initializeApp(storedUserId, false);\n      return;\n    }\n\n    // --- 4. Default: Show Home Page ---\n    // Eğer hiçbir şey tetiklenmediyse ve ID yoksa, Home'u göster.\n    if (!storedUserId) {\n      setStep('home');\n    }\n  }, []);\n\n  // 1. Yeni Sayfa Çekme Fonksiyonu\n  const fetchExcelWorksheets = async (fileId, currentUserId) => {\n    try {\n      // Backend'deki yeni endpoint'i çağırın\n      const res = await fetch(`${API_BASE_URL}/get-excel-worksheets?excel_file_id=${fileId}&user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) {\n        // Data'nın [\"Sayfa1\", \"Sayfa2\"] formatında geldiğini varsayıyoruz\n        const worksheets = data.worksheets.map(name => ({\n          name\n        }));\n        setExcelWorksheets(worksheets);\n        if (worksheets.length === 1) {\n          // Tek sayfa varsa otomatik seç ve sütunları çek\n          setSelectedWorksheetName(worksheets[0].name);\n          fetchExcelColumns(fileId, worksheets[0].name);\n        } else {\n          // Sütunları temizle ve kullanıcının seçmesini bekle\n          setExcelColumns([]);\n        }\n      } else setMessage(`Excel sayfaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sayfaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n  const checkNotionStatus = async currentUserId => {\n    // DEV MODE: Notion bağlantısı kontrolü atlanıyor.\n    // return true; // Eğer test amaçlı Notion bağlantısını atlamak isterseniz\n    try {\n      const res = await fetch(`${API_BASE_URL}/check-notion-status?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) {\n        // Backend'den { has_notion_key: true/false } şeklinde bir yanıt bekliyoruz.\n        return data.has_notion_key;\n      }\n      return false;\n    } catch {\n      setMessage('Bağlantı kontrolü sırasında ağ hatası oluştu.');\n      return false;\n    }\n  };\n  const fetchExcelFiles = async currentUserId => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchExcelColumns = async (fileId, worksheetName) => {\n    if (!userId || !worksheetName) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&worksheet_name=${worksheetName}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map(name => ({\n          name\n        }));\n        const hasId = columns.some(c => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setExcelToNotionMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setExcelToNotionMappings(columns.map(c => ({\n          excel_column: c.name,\n          notion_property: '',\n          data_type: ''\n        })));\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n        const notionPropNames = data.properties.map(p => p.name.toLowerCase());\n        const unmatched = excelColumns.filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id').map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate([]);\n        setNotionToExcelMappings(data.properties.map(prop => ({\n          excel_column: '',\n          notion_property: prop.name,\n          data_type: prop.type || ''\n        })));\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n  const handleMappingChange = (leftName, rightName) => {\n    if (syncDirection === 'excel-to-notion') {\n      setExcelToNotionMappings(prev => prev.map(m => {\n        var _notionProperties$fin;\n        return m.excel_column === leftName ? {\n          ...m,\n          notion_property: rightName,\n          data_type: ((_notionProperties$fin = notionProperties.find(p => p.name === rightName)) === null || _notionProperties$fin === void 0 ? void 0 : _notionProperties$fin.type) || ''\n        } : m;\n      }));\n    } else {\n      setNotionToExcelMappings(prev => prev.map(m => m.notion_property === leftName ? {\n        ...m,\n        excel_column: rightName\n      } : m));\n    }\n  };\n  const handleCreateColumnChange = (colName, checked) => {\n    setSelectedColumnsToCreate(prev => checked ? [...prev, colName] : prev.filter(c => c !== colName));\n  };\n  const handleAutoSyncColumnChange = (colName, checked) => {\n    setAutoSyncColumns(prev => checked ? [...prev, colName] : prev.filter(c => c !== colName));\n  };\n  const saveMappings = async () => {\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı.');\n      return;\n    }\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    const validMappings = mappings.filter(m => syncDirection === 'excel-to-notion' ? m.notion_property.trim() !== '' : m.excel_column.trim() !== '');\n    if (validMappings.length === 0) {\n      setMessage(\"En az bir sütunu eşleştirin.\");\n      return;\n    }\n    const idMappingExists = validMappings.some(m => syncDirection === 'excel-to-notion' && m.excel_column.toLowerCase() === 'id' || syncDirection === 'notion-to-excel' && m.notion_property.toLowerCase() === 'id');\n    if (!idMappingExists) {\n      setMessage(\"Senkronizasyon için 'ID' sütununun eşleştirilmesi zorunludur.\");\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/save-mapping?user_id=${userId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(validMappings)\n      });\n      const data = await res.json();\n      if (res.ok) {\n        const allSavedMappings = data.saved_mappings || [];\n        setMessage(\"Eşleşmeler başarıyla kaydedildi. Senkronizasyon başlatılıyor...\");\n        startSync(syncDirection, allSavedMappings);\n      } else {\n        const err = data;\n        setMessage(`Eşleşmeler kaydedilemedi: ${err.error || err.detail}`);\n      }\n    } catch {\n      setMessage('Eşleşmeleri kaydederken ağ hatası oluştu.');\n    }\n  };\n  const startSync = async (direction, allSavedMappings) => {\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı.');\n      return;\n    }\n    let successMessage = 'Senkronizasyon başarıyla tamamlandı.';\n    const cleanAutoSyncColumnsSet = new Set(autoSyncColumns.map(name => name.toLowerCase().trim()));\n    const autoSyncMappingIds = allSavedMappings.filter(m => {\n      const columnName = direction === 'excel-to-notion' ? m.excel_column : m.notion_property;\n      const cleanBackendName = columnName.toLowerCase().trim();\n      return cleanAutoSyncColumnsSet.has(cleanBackendName);\n    }).map(m => m.id);\n    const autoSyncCreationData = {\n      user_id: parseInt(userId, 10),\n      excel_file_id: selectedExcelId,\n      notion_database_id: notionDbId,\n      direction: direction,\n      interval_minutes: 60,\n      mapping_ids: autoSyncMappingIds,\n      excel_worksheet_name: selectedWorksheetName\n    };\n    try {\n      // 1. MANUEL SENKRONİZASYONU BAŞLAT\n      const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          excel_worksheet_name: selectedWorksheetName,\n          columns_to_create: direction === 'excel-to-notion' ? selectedColumnsToCreate : []\n        })\n      });\n      if (!res.ok) {\n        const err = await res.json();\n        throw new Error(`Manuel Senkronizasyon başarısız: ${err.detail || err.error}`);\n      }\n\n      // 2. OTOMATİK SYNC KONFİGÜRASYONUNU OLUŞTUR\n      if (autoSyncToggle && autoSyncMappingIds.length > 0) {\n        const autoSyncRes = await fetch(`${API_BASE_URL}/autosync/create`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(autoSyncCreationData)\n        });\n        const autoSyncData = await autoSyncRes.json();\n        if (!autoSyncRes.ok) {\n          successMessage += ` Ancak Otomatik Sync yapılandırılamadı: ${autoSyncData.detail || 'Bilinmeyen Hata'}`;\n        } else {\n          successMessage = `Manuel senkronizasyon tamamlandı ve Otomatik Sync yapılandırıldı. (${autoSyncData.message})`;\n        }\n      }\n      setStep('complete');\n      setMessage(successMessage);\n    } catch (e) {\n      setMessage(`Senkronizasyon İşlemi Sırasında Hata: ${e.message || e.toString()}`);\n    }\n  };\n  const renderConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Ad\\u0131m 1: Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Devam etmek i\\xE7in OneDrive/Excel hesab\\u0131n\\u0131za eri\\u015Fim izni vermelisiniz.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: handleMicrosoftConnect,\n      children: \"Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 394,\n    columnNumber: 5\n  }, this);\n  const handleNotionConnect = () => {\n    // Backend'deki /connect/notion endpoint'ine yönlendiriyoruz\n    window.location.href = `${API_BASE_URL}/connect/notion?user_id=${userId}`;\n  };\n  const renderNotionConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Ad\\u0131m 2: Notion Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Senkronizasyonun \\xE7al\\u0131\\u015Fmas\\u0131 i\\xE7in Notion API anahtar\\u0131n\\u0131z\\u0131 ba\\u011Flaman\\u0131z gerekiyor. L\\xFCtfen t\\xFCm veritabanlar\\u0131n\\u0131z i\\xE7in izin verdi\\u011Finizden emin olun.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: handleNotionConnect,\n      disabled: !userId,\n      children: \"Notion Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 408,\n    columnNumber: 7\n  }, this);\n  const renderSelectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Ad\\u0131m 3: Dosya Se\\xE7imi\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Excel Dosyas\\u0131 Se\\xE7in:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedExcelId,\n        onChange: e => {\n          setSelectedExcelId(e.target.value);\n          // 🚨 KRİTİK DÜZELTME: Dosya seçildiğinde Sayfaları çek\n          if (e.target.value) {\n            fetchExcelWorksheets(e.target.value, userId);\n            setSelectedWorksheetName(''); // Yeni dosya seçildiğinde sayfa seçimini sıfırla\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Dosya Se\\xE7iniz...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), excelFiles.map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: f.id,\n          children: f.name\n        }, f.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 32\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this), selectedExcelId && excelWorksheets.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Excel \\xC7al\\u0131\\u015Fma Sayfas\\u0131 Se\\xE7in:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedWorksheetName,\n        onChange: e => {\n          setSelectedWorksheetName(e.target.value);\n          fetchExcelColumns(selectedExcelId, e.target.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Sayfa Se\\xE7iniz...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 19\n        }, this), excelWorksheets.map(ws => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: ws.name,\n          children: ws.name\n        }, ws.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 46\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Notion Veritaban\\u0131 ID'si:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: notionDbId,\n        onChange: e => setNotionDbId(e.target.value),\n        placeholder: \"Veritaban\\u0131 ID'sini yap\\u0131\\u015Ft\\u0131r\\u0131n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: fetchNotionProperties,\n      disabled: !selectedExcelId || !selectedWorksheetName || !notionDbId,\n      children: \"Notion \\xD6zelliklerini Getir\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 418,\n    columnNumber: 5\n  }, this);\n  const renderMappingStep = () => {\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Ad\\u0131m 4: S\\xFCtunlar\\u0131 E\\u015Fle\\u015Ftirin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: syncDirection === 'excel-to-notion' ? 'active' : '',\n            onClick: () => setSyncDirection('excel-to-notion'),\n            children: \"Excel \\u2192 Notion\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: syncDirection === 'notion-to-excel' ? 'active' : '',\n            onClick: () => setSyncDirection('notion-to-excel'),\n            children: \"Notion \\u2192 Excel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"auto-sync-toggle\",\n          children: [\"Otomatik Sync (A\\xE7\\u0131k/Kapal\\u0131)\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: autoSyncToggle,\n            onChange: e => setAutoSyncToggle(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-grid\",\n        children: leftItems.map((item, idx) => {\n          const leftName = item.name;\n          const mapping = mappings[idx] || {\n            excel_column: '',\n            notion_property: '',\n            data_type: ''\n          };\n          const selectedRight = syncDirection === 'excel-to-notion' ? mapping.notion_property : mapping.excel_column;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mapping-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-left\",\n              children: leftName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-right\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedRight || '',\n                onChange: e => handleMappingChange(leftName, e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Se\\xE7iniz...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 516,\n                  columnNumber: 21\n                }, this), rightItems.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: p.name,\n                  children: syncDirection === 'excel-to-notion' ? 'type' in p && p.type ? `${p.name} (${p.type})` : p.name : p.name\n                }, p.name, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 518,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 512,\n                columnNumber: 19\n              }, this), autoSyncToggle && /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                className: \"auto-sync-checkbox\",\n                checked: autoSyncColumns.includes(leftName),\n                onChange: e => handleAutoSyncColumnChange(leftName, e.target.checked),\n                title: \"Otomatik Sync\\u2019e Dahil Et\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 527,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 511,\n              columnNumber: 17\n            }, this)]\n          }, leftName, true, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 9\n      }, this), syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unmatched-columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notion'da Olmayan S\\xFCtunlar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Excel\\u2019de olan, Notion\\u2019da olmayan s\\xFCtunlar\\u0131 zengin metin (rich_text) olarak eklemek i\\xE7in i\\u015Faretleyin:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 13\n        }, this), unmatchedColumns.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"checkbox-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedColumnsToCreate.includes(c),\n            onChange: e => handleCreateColumnChange(c, e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 17\n          }, this), c]\n        }, c, true, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sync-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"primary-btn\",\n          onClick: saveMappings,\n          children: \"Senkronizasyon Ba\\u015Flat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }, this);\n  };\n  const renderCompleteStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Senkr. Tamamland\\u0131!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: () => setStep('select'),\n      children: \"Yeni Senkronizasyon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"secondary-btn\",\n      onClick: () => setStep('dashboard'),\n      style: {\n        marginLeft: '10px'\n      },\n      children: \"Dashboard'a Git\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 571,\n    columnNumber: 5\n  }, this);\n  const renderConnectStepHomeOrApp = () => {\n    // Eğer kullanıcı ID'si varsa ve URL'de bir yetkilendirme akışı yoksa, \n    // Home bileşenini gösterme. Ancak 'connect' adımında hala isek,\n    // bu, ID'nin olduğu ama Notion kontrolünün henüz başlamadığı anlamına gelir.\n    if (step === 'home') {\n      return /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 18\n      }, this);\n    }\n\n    // Diğer adımlar\n    switch (step) {\n      case 'connect':\n        return renderConnectStep();\n      case 'notion_connect':\n        return renderNotionConnectStep();\n      case 'select':\n        return renderSelectStep();\n      case 'mapping':\n        return renderMappingStep();\n      case 'complete':\n        return renderCompleteStep();\n      case 'dashboard':\n        return /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 22\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [step !== 'home' && /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Excel \\u2194 Notion Senkronizasyonu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 17\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setStep('dashboard'),\n        className: \"secondary-btn\",\n        style: {\n          float: 'right'\n        },\n        children: \"Otomatik Sync Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: renderConnectStepHomeOrApp()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 608,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WSI16DJXrMUjCOE/WNqM9yOc6qE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dashboard","Home","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","initialUserId","localStorage","getItem","initialStep","step","setStep","syncDirection","setSyncDirection","autoSyncToggle","setAutoSyncToggle","excelFiles","setExcelFiles","excelColumns","setExcelColumns","notionProperties","setNotionProperties","selectedExcelId","setSelectedExcelId","excelWorksheets","setExcelWorksheets","selectedWorksheetName","setSelectedWorksheetName","notionDbId","setNotionDbId","message","setMessage","userId","setUserId","excelToNotionMappings","setExcelToNotionMappings","notionToExcelMappings","setNotionToExcelMappings","unmatchedColumns","setUnmatchedColumns","selectedColumnsToCreate","setSelectedColumnsToCreate","autoSyncColumns","setAutoSyncColumns","params","URLSearchParams","window","location","search","receivedUserId","get","notionAuthSuccess","notionAuthError","authSuccess","initializeApp","id","isNewLogin","setItem","hasNotionKey","checkNotionStatus","fetchExcelFiles","currentId","history","replaceState","pathname","storedUserId","fetchExcelWorksheets","fileId","currentUserId","res","fetch","data","json","ok","worksheets","map","name","length","fetchExcelColumns","error","handleMicrosoftConnect","href","has_notion_key","files","worksheetName","columns","hasId","some","c","toLowerCase","excel_column","notion_property","data_type","fetchNotionProperties","properties","notionPropNames","p","unmatched","filter","col","includes","prop","type","handleMappingChange","leftName","rightName","prev","m","_notionProperties$fin","find","handleCreateColumnChange","colName","checked","handleAutoSyncColumnChange","saveMappings","mappings","validMappings","trim","idMappingExists","method","headers","body","JSON","stringify","allSavedMappings","saved_mappings","startSync","err","detail","direction","successMessage","cleanAutoSyncColumnsSet","Set","autoSyncMappingIds","columnName","cleanBackendName","has","autoSyncCreationData","user_id","parseInt","excel_file_id","notion_database_id","interval_minutes","mapping_ids","excel_worksheet_name","columns_to_create","Error","autoSyncRes","autoSyncData","e","toString","renderConnectStep","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","handleNotionConnect","renderNotionConnectStep","disabled","renderSelectStep","value","onChange","target","f","ws","placeholder","renderMappingStep","leftItems","rightItems","item","idx","mapping","selectedRight","title","renderCompleteStep","style","marginLeft","renderConnectStepHomeOrApp","float","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Dashboard from './AutoSyncDashboard';\nimport Home from './Home'; // Yeni Home bileşenini import ediyoruz!\n\n// 'home' adımını AppStep türüne ekliyoruz\ntype AppStep = 'home' | 'connect' | 'notion_connect'| 'select' | 'mapping' | 'complete' | 'dashboard';\ntype ExcelFile = { id: string; name: string };\ntype ExcelColumn = { name: string };\ntype NotionProperty = { name: string; type?: string };\ntype Mapping = { excel_column: string; notion_property: string; data_type: string };\ntype ExcelWorksheet = { name: string };\n\nconst API_BASE_URL = 'http://127.0.0.1:8000';\n\nfunction App() {\n  // Başlangıç adımını, localStorage'daki user_id'ye göre belirliyoruz.\n  const initialUserId = localStorage.getItem('user_id');\n  // ID varsa 'connect' adımında başla, yoksa 'home' (giriş) sayfasında başla.\n  const initialStep: AppStep = initialUserId ? 'connect' : 'home';\n  \n  const [step, setStep] = useState<AppStep>(initialStep);\n  const [syncDirection, setSyncDirection] = useState<'excel-to-notion' | 'notion-to-excel'>('excel-to-notion');\n  const [autoSyncToggle, setAutoSyncToggle] = useState(false);\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\n  const [excelColumns, setExcelColumns] = useState<ExcelColumn[]>([]);\n  const [notionProperties, setNotionProperties] = useState<NotionProperty[]>([]);\n  const [selectedExcelId, setSelectedExcelId] = useState<string>('');\n  const [excelWorksheets, setExcelWorksheets] = useState<ExcelWorksheet[]>([]); // Yeni\n  const [selectedWorksheetName, setSelectedWorksheetName] = useState<string>(''); // Yeni\n  const [notionDbId, setNotionDbId] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n  const [userId, setUserId] = useState<string | null>(initialUserId); // initialUserId'yi kullanıyoruz\n\n  const [excelToNotionMappings, setExcelToNotionMappings] = useState<Mapping[]>([]);\n  const [notionToExcelMappings, setNotionToExcelMappings] = useState<Mapping[]>([]);\n  \n  const [unmatchedColumns, setUnmatchedColumns] = useState<string[]>([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState<string[]>([]);\n  \n  const [autoSyncColumns, setAutoSyncColumns] = useState<string[]>([]);\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const receivedUserId = params.get('user_id');\n    const notionAuthSuccess = params.get('notion_auth_success') === 'true';\n    const notionAuthError = params.get('notion_auth_error') === 'true';\n    const authSuccess = params.get('auth_success') === 'true';\n\n    // Helper: Kullanıcı verilerini kaydeder ve Notion bağlantısını kontrol eder.\n    const initializeApp = async (id: string, isNewLogin: boolean) => {\n        setUserId(id);\n        localStorage.setItem('user_id', id);\n\n        const hasNotionKey = await checkNotionStatus(id);\n\n        if (!hasNotionKey) {\n            setStep('notion_connect');\n            if (isNewLogin) setMessage('Microsoft bağlantısı başarılı. Şimdi Notion hesabınızı bağlayın.');\n        } else {\n            setStep('select');\n            fetchExcelFiles(id);\n            if (isNewLogin) setMessage('Bağlantılar tamam! Excel dosyanızı seçin.');\n        }\n    };\n    \n    // --- 1. Notion Callback Handling (Notion'dan döndüğünde) ---\n    if (notionAuthSuccess) {\n        const currentId = localStorage.getItem('user_id');\n        if (currentId) {\n            setStep('select');\n            fetchExcelFiles(currentId);\n            setMessage('Notion bağlantısı başarılı! Şimdi bir dosya seçin.');\n        } else {\n            setMessage('Hata: Notion bağlantısı başarılı ancak kullanıcı ID kayıp.');\n            setStep('home');\n        }\n        window.history.replaceState(null, '', window.location.pathname);\n        return;\n    }\n    \n    if (notionAuthError) {\n         setMessage(`Notion bağlantı hatası: ${params.get('message') || 'Bilinmeyen hata.'}`);\n         setStep('notion_connect'); \n         window.history.replaceState(null, '', window.location.pathname);\n         return;\n    }\n\n    // --- 2. Microsoft Callback Handling (Microsoft'tan döndüğünde) ---\n    if (authSuccess && receivedUserId) {\n        initializeApp(receivedUserId, true);\n        window.history.replaceState(null, '', window.location.pathname);\n        return;\n    }\n    \n    // --- 3. Persistent Session / Initial Load Handling ---\n    const storedUserId = localStorage.getItem('user_id');\n    // Eğer localStorage'da ID varsa ve mevcut adım 'home' değilse (yani oturum açma akışına girmişse)\n    if (storedUserId && step !== 'home') {\n         initializeApp(storedUserId, false);\n         return;\n    }\n\n    // --- 4. Default: Show Home Page ---\n    // Eğer hiçbir şey tetiklenmediyse ve ID yoksa, Home'u göster.\n    if (!storedUserId) {\n        setStep('home');\n    }\n    \n  }, []); \n\n\n  // 1. Yeni Sayfa Çekme Fonksiyonu\n  const fetchExcelWorksheets = async (fileId: string, currentUserId: string) => {\n    try {\n      // Backend'deki yeni endpoint'i çağırın\n      const res = await fetch(`${API_BASE_URL}/get-excel-worksheets?excel_file_id=${fileId}&user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) {\n        // Data'nın [\"Sayfa1\", \"Sayfa2\"] formatında geldiğini varsayıyoruz\n        const worksheets = data.worksheets.map((name: string) => ({ name }));\n        setExcelWorksheets(worksheets);\n\n        if (worksheets.length === 1) {\n            // Tek sayfa varsa otomatik seç ve sütunları çek\n            setSelectedWorksheetName(worksheets[0].name);\n            fetchExcelColumns(fileId, worksheets[0].name);\n        } else {\n             // Sütunları temizle ve kullanıcının seçmesini bekle\n             setExcelColumns([]);\n        }\n\n      } else setMessage(`Excel sayfaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sayfaları alınırken ağ hatası oluştu.');\n    }\n  };\n\n\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n\n  const checkNotionStatus = async (currentUserId: string): Promise<boolean> => {\n    // DEV MODE: Notion bağlantısı kontrolü atlanıyor.\n    // return true; // Eğer test amaçlı Notion bağlantısını atlamak isterseniz\n    try {\n        const res = await fetch(`${API_BASE_URL}/check-notion-status?user_id=${currentUserId}`);\n        const data = await res.json();\n        if (res.ok) {\n            // Backend'den { has_notion_key: true/false } şeklinde bir yanıt bekliyoruz.\n            return data.has_notion_key;\n        }\n        return false;\n    } catch {\n        setMessage('Bağlantı kontrolü sırasında ağ hatası oluştu.');\n        return false;\n    }\n  };\n\n  const fetchExcelFiles = async (currentUserId: string) => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);\n      else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchExcelColumns = async (fileId: string, worksheetName: string) => {\n    if (!userId || !worksheetName) return; \n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&worksheet_name=${worksheetName}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map((name: string) => ({ name }));\n        const hasId = columns.some((c: ExcelColumn) => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setExcelToNotionMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setExcelToNotionMappings(columns.map((c: ExcelColumn) => ({\n          excel_column: c.name,\n          notion_property: '',\n          data_type: ''\n        })));\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n\n        const notionPropNames = data.properties.map((p: NotionProperty) => p.name.toLowerCase());\n        const unmatched = excelColumns\n          .filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id')\n          .map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate([]);\n\n        setNotionToExcelMappings(data.properties.map((prop: NotionProperty) => ({\n          excel_column: '',\n          notion_property: prop.name,\n          data_type: prop.type || ''\n        })));\n\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n\n  const handleMappingChange = (leftName: string, rightName: string) => {\n    if (syncDirection === 'excel-to-notion') {\n      setExcelToNotionMappings(prev =>\n        prev.map(m =>\n          m.excel_column === leftName\n            ? { ...m, notion_property: rightName, data_type: notionProperties.find(p => p.name === rightName)?.type || '' }\n            : m\n        )\n      );\n    } else {\n      setNotionToExcelMappings(prev =>\n        prev.map(m =>\n          m.notion_property === leftName\n            ? { ...m, excel_column: rightName }\n            : m\n        )\n      );\n    }\n  };\n\n  const handleCreateColumnChange = (colName: string, checked: boolean) => {\n    setSelectedColumnsToCreate(prev =>\n      checked ? [...prev, colName] : prev.filter(c => c !== colName)\n    );\n  };\n\n  \n  const handleAutoSyncColumnChange = (colName: string, checked: boolean) => {\n    setAutoSyncColumns(prev =>\n        checked ? [...prev, colName] : prev.filter(c => c !== colName)\n    );\n};\n\n  \n  \n\nconst saveMappings = async () => {\n    if (!userId) { setMessage('Kullanıcı kimliği bulunamadı.'); return; }\n\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    const validMappings = mappings.filter(m =>\n        syncDirection === 'excel-to-notion' ? m.notion_property.trim() !== '' : m.excel_column.trim() !== ''\n    );\n    \n    if (validMappings.length === 0) { setMessage(\"En az bir sütunu eşleştirin.\"); return; }\n    \n    const idMappingExists = validMappings.some(m => \n        (syncDirection === 'excel-to-notion' && m.excel_column.toLowerCase() === 'id') ||\n        (syncDirection === 'notion-to-excel' && m.notion_property.toLowerCase() === 'id')\n    );\n    \n    if (!idMappingExists) {\n        setMessage(\"Senkronizasyon için 'ID' sütununun eşleştirilmesi zorunludur.\");\n        return;\n    }\n\n    try {\n        const res = await fetch(`${API_BASE_URL}/save-mapping?user_id=${userId}`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(validMappings),\n        });\n        \n        const data = await res.json(); \n        \n        if (res.ok) {\n            const allSavedMappings: { id: number, excel_column: string, notion_property: string }[] = data.saved_mappings || []; \n            \n            setMessage(\"Eşleşmeler başarıyla kaydedildi. Senkronizasyon başlatılıyor...\");\n            startSync(syncDirection, allSavedMappings); \n        } else {\n            const err = data;\n            setMessage(`Eşleşmeler kaydedilemedi: ${err.error || err.detail}`);\n        }\n    } catch {\n        setMessage('Eşleşmeleri kaydederken ağ hatası oluştu.');\n    }\n};\n\n\nconst startSync = async (\n    direction: 'excel-to-notion' | 'notion-to-excel',\n    allSavedMappings: { id: number, excel_column: string, notion_property: string }[] \n  ) => {\n    if (!userId) {\n        setMessage('Kullanıcı kimliği bulunamadı.');\n        return;\n    }\n\n    let successMessage = 'Senkronizasyon başarıyla tamamlandı.';\n\n    const cleanAutoSyncColumnsSet = new Set(\n        autoSyncColumns.map(name => name.toLowerCase().trim())\n    );\n\n    const autoSyncMappingIds = allSavedMappings\n        .filter(m => {\n            const columnName = direction === 'excel-to-notion' ? m.excel_column : m.notion_property;\n            const cleanBackendName = columnName.toLowerCase().trim();\n            \n            return cleanAutoSyncColumnsSet.has(cleanBackendName);\n        })\n        .map(m => m.id);\n\n\n    const autoSyncCreationData = {\n        user_id: parseInt(userId, 10),\n        excel_file_id: selectedExcelId,\n        notion_database_id: notionDbId,\n        direction: direction,\n        interval_minutes: 60,\n        mapping_ids: autoSyncMappingIds,\n        excel_worksheet_name: selectedWorksheetName, \n    };\n    \n    try {\n        // 1. MANUEL SENKRONİZASYONU BAŞLAT\n        const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                 excel_file_id: selectedExcelId,\n                 notion_database_id: notionDbId,\n                 user_id: parseInt(userId, 10),\n                 excel_worksheet_name: selectedWorksheetName,\n                 columns_to_create:\n                     direction === 'excel-to-notion' ? selectedColumnsToCreate : [],\n            }),\n        });\n\n        if (!res.ok) {\n            const err = await res.json();\n            throw new Error(`Manuel Senkronizasyon başarısız: ${err.detail || err.error}`);\n        }\n\n        // 2. OTOMATİK SYNC KONFİGÜRASYONUNU OLUŞTUR\n        if (autoSyncToggle && autoSyncMappingIds.length > 0) { \n            const autoSyncRes = await fetch(`${API_BASE_URL}/autosync/create`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(autoSyncCreationData),\n            });\n\n            const autoSyncData = await autoSyncRes.json();\n\n            if (!autoSyncRes.ok) {\n                successMessage += ` Ancak Otomatik Sync yapılandırılamadı: ${autoSyncData.detail || 'Bilinmeyen Hata'}`;\n            } else {\n                successMessage = `Manuel senkronizasyon tamamlandı ve Otomatik Sync yapılandırıldı. (${autoSyncData.message})`;\n            }\n        }\n\n        setStep('complete');\n        setMessage(successMessage);\n    } catch (e: any) {\n        setMessage(`Senkronizasyon İşlemi Sırasında Hata: ${e.message || e.toString()}`);\n    }\n};\n\n\n\n\n\n\n  const renderConnectStep = () => (\n    <div className=\"step-container\">\n        <h2>Adım 1: Microsoft Hesabını Bağla</h2>\n        <p>Devam etmek için OneDrive/Excel hesabınıza erişim izni vermelisiniz.</p>\n        <button className=\"primary-btn\" onClick={handleMicrosoftConnect}>Microsoft Hesabını Bağla</button>\n    </div>\n  );\n\n  const handleNotionConnect = () => {\n    // Backend'deki /connect/notion endpoint'ine yönlendiriyoruz\n    window.location.href = `${API_BASE_URL}/connect/notion?user_id=${userId}`; \n  };\n\n\n  const renderNotionConnectStep = () => (\n      <div className=\"step-container\">\n          <h2>Adım 2: Notion Hesabını Bağla</h2>\n          <p>Senkronizasyonun çalışması için Notion API anahtarınızı bağlamanız gerekiyor. Lütfen tüm veritabanlarınız için izin verdiğinizden emin olun.</p>\n          <button className=\"primary-btn\" onClick={handleNotionConnect} disabled={!userId}>\n              Notion Hesabını Bağla\n          </button>\n      </div>\n  );\n\n  const renderSelectStep = () => (\n    <div className=\"step-container grid\">\n      <h2>Adım 3: Dosya Seçimi</h2>\n      <div className=\"field\">\n        <label>Excel Dosyası Seçin:</label>\n        <select value={selectedExcelId} onChange={e => { \n            setSelectedExcelId(e.target.value); \n            // 🚨 KRİTİK DÜZELTME: Dosya seçildiğinde Sayfaları çek\n            if (e.target.value) {\n                fetchExcelWorksheets(e.target.value, userId!);\n                setSelectedWorksheetName(''); // Yeni dosya seçildiğinde sayfa seçimini sıfırla\n            }\n        }}>\n          <option value=\"\">Dosya Seçiniz...</option>\n          {excelFiles.map(f => <option key={f.id} value={f.id}>{f.name}</option>)}\n        </select>\n      </div>\n      \n      {/* 🚨 YENİ: Çalışma Sayfası Seçim Alanı */}\n      {selectedExcelId && excelWorksheets.length > 0 && (\n          <div className=\"field\">\n              <label>Excel Çalışma Sayfası Seçin:</label>\n              <select \n                  value={selectedWorksheetName} \n                  onChange={e => { \n                      setSelectedWorksheetName(e.target.value); \n                      fetchExcelColumns(selectedExcelId, e.target.value);\n                  }}>\n                  <option value=\"\">Sayfa Seçiniz...</option>\n                  {excelWorksheets.map(ws => <option key={ws.name} value={ws.name}>{ws.name}</option>)}\n              </select>\n          </div>\n      )}\n\n      <div className=\"field\">\n        <label>Notion Veritabanı ID'si:</label>\n        <input type=\"text\" value={notionDbId} onChange={e => setNotionDbId(e.target.value)} placeholder=\"Veritabanı ID'sini yapıştırın\" />\n      </div>\n      \n      {/* 🚨 DÜĞME KONTROLÜ: Hem dosya hem sayfa seçili olmalı */}\n      <button \n          className=\"primary-btn\" \n          onClick={fetchNotionProperties} \n          disabled={!selectedExcelId || !selectedWorksheetName || !notionDbId}>\n          Notion Özelliklerini Getir\n      </button>\n    </div>\n  );\n\n  const renderMappingStep = () => {\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n\n    return (\n      <div className=\"step-container\">\n        <h2>Adım 4: Sütunları Eşleştirin</h2>\n\n        <div className=\"toggle-row\">\n          <div className=\"toggle-buttons\">\n            <button\n              className={syncDirection === 'excel-to-notion' ? 'active' : ''}\n              onClick={() => setSyncDirection('excel-to-notion')}\n            >\n              Excel → Notion\n            </button>\n            <button\n              className={syncDirection === 'notion-to-excel' ? 'active' : ''}\n              onClick={() => setSyncDirection('notion-to-excel')}\n            >\n              Notion → Excel\n            </button>\n          </div>\n\n          <label className=\"auto-sync-toggle\">\n            Otomatik Sync (Açık/Kapalı)\n            <input\n              type=\"checkbox\"\n              checked={autoSyncToggle}\n              onChange={e => setAutoSyncToggle(e.target.checked)}\n            />\n          </label>\n        </div>\n\n        <div className=\"mapping-grid\">\n          {leftItems.map((item, idx) => {\n            const leftName = item.name;\n            const mapping = mappings[idx] || { excel_column: '', notion_property: '', data_type: '' };\n            const selectedRight =\n              syncDirection === 'excel-to-notion' ? mapping.notion_property : mapping.excel_column;\n            \n            return (\n              <div className=\"mapping-row\" key={leftName}>\n                <div className=\"mapping-left\">{leftName}</div>\n                <div className=\"mapping-right\">\n                  <select\n                    value={selectedRight || ''}\n                    onChange={e => handleMappingChange(leftName, e.target.value)}\n                  >\n                    <option value=\"\">Seçiniz...</option>\n                    {rightItems.map(p => (\n                      <option key={p.name} value={p.name}>\n                        {syncDirection === 'excel-to-notion'\n                          ? 'type' in p && p.type ? `${p.name} (${p.type})` : p.name\n                          : p.name}\n                      </option>\n                    ))}\n                  </select>\n\n                  {autoSyncToggle && (\n                      <input\n                          type=\"checkbox\"\n                          className=\"auto-sync-checkbox\"\n                          checked={autoSyncColumns.includes(leftName)}\n                          onChange={e => handleAutoSyncColumnChange(leftName, e.target.checked)}\n                          title=\"Otomatik Sync’e Dahil Et\"\n                      />\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && (\n          <div className=\"unmatched-columns\">\n            <h3>Notion'da Olmayan Sütunlar</h3>\n            <p>Excel’de olan, Notion’da olmayan sütunları zengin metin (rich_text) olarak eklemek için işaretleyin:</p>\n            {unmatchedColumns.map(c => (\n              <label key={c} className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedColumnsToCreate.includes(c)}\n                  onChange={e => handleCreateColumnChange(c, e.target.checked)}\n                />\n                {c}\n              </label>\n            ))}\n          </div>\n        )}\n\n        <div className=\"sync-buttons\">\n          <button\n            className=\"primary-btn\"\n            onClick={saveMappings}\n          >\n            Senkronizasyon Başlat\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  const renderCompleteStep = () => (\n    <div className=\"step-container\">\n      <h2>Senkr. Tamamlandı!</h2>\n      <p>{message}</p>\n      <button className=\"primary-btn\" onClick={() => setStep('select')}>Yeni Senkronizasyon</button>\n      <button className=\"secondary-btn\" onClick={() => setStep('dashboard')} style={{marginLeft: '10px'}}>Dashboard'a Git</button>\n    </div>\n  );\n  \n  const renderConnectStepHomeOrApp = () => {\n      // Eğer kullanıcı ID'si varsa ve URL'de bir yetkilendirme akışı yoksa, \n      // Home bileşenini gösterme. Ancak 'connect' adımında hala isek,\n      // bu, ID'nin olduğu ama Notion kontrolünün henüz başlamadığı anlamına gelir.\n      if (step === 'home') {\n          return <Home />;\n      }\n      \n      // Diğer adımlar\n      switch (step) {\n          case 'connect':\n              return renderConnectStep();\n          case 'notion_connect':\n              return renderNotionConnectStep();\n          case 'select':\n              return renderSelectStep();\n          case 'mapping':\n              return renderMappingStep();\n          case 'complete':\n              return renderCompleteStep();\n          case 'dashboard':\n              return <Dashboard />;\n          default:\n              return null;\n      }\n  }\n\n\n  return (\n    <div className=\"App\">\n        {/* Header'ı sadece ana uygulama adımlarında göster, 'home' adımında Home bileşeni kendi header/navigasyonunu kullanacak */}\n        {step !== 'home' && (\n            <header>\n                <h1>Excel ↔ Notion Senkronizasyonu</h1>\n                {message && <div className=\"message\">{message}</div>}\n                {/* Eğer Home'da değilsek, Dashboard'a git butonu her zaman görünür */}\n                <button onClick={() => setStep('dashboard')} className=\"secondary-btn\" style={{ float: 'right' }}>\n                    Otomatik Sync Dashboard\n                </button>\n            </header>\n        )}\n      <main>\n        {/* Adımı render eden fonksiyona yönlendiriyoruz */}\n        {renderConnectStepHomeOrApp()}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}