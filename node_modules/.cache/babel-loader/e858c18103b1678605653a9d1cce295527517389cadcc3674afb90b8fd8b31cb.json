{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:8000';\nfunction App() {\n  _s();\n  const [step, setStep] = useState('connect');\n  const [syncDirection, setSyncDirection] = useState('excel-to-notion');\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [notionProperties, setNotionProperties] = useState([]);\n  const [selectedExcelId, setSelectedExcelId] = useState('');\n  const [notionDbId, setNotionDbId] = useState('');\n  const [message, setMessage] = useState('');\n  const [userId, setUserId] = useState(null);\n  const [mappings, setMappings] = useState([]);\n  const [unmatchedColumns, setUnmatchedColumns] = useState([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState([]);\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else {\n      setStep('connect');\n    }\n  }, []);\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n  const fetchExcelFiles = async currentUserId => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchExcelColumns = async fileId => {\n    if (!userId) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map(name => ({\n          name\n        }));\n        const hasId = columns.some(c => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setMappings(columns.map(c => ({\n          excel_column: c.name,\n          notion_property: '',\n          data_type: ''\n        })));\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n        const notionPropNames = data.properties.map(p => p.name.toLowerCase());\n        const unmatched = excelColumns.filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id').map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate(unmatched);\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özellikleri alınırken ağ hatası oluştu.');\n    }\n  };\n  const handleMappingChange = (excelColumnName, notionPropertyName) => {\n    setMappings(prev => prev.map(m => {\n      var _notionProperties$fin;\n      return m.excel_column === excelColumnName ? {\n        ...m,\n        notion_property: notionPropertyName,\n        data_type: ((_notionProperties$fin = notionProperties.find(p => p.name === notionPropertyName)) === null || _notionProperties$fin === void 0 ? void 0 : _notionProperties$fin.type) || ''\n      } : m;\n    }));\n  };\n  const handleCreateColumnChange = (columnName, checked) => {\n    setSelectedColumnsToCreate(prev => checked ? [...prev, columnName] : prev.filter(c => c !== columnName));\n  };\n  const saveMappingAndStartSync = async () => {\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı.');\n      return;\n    }\n    const validMappings = mappings.filter(m => m.notion_property.trim() !== '');\n    if (validMappings.length === 0) {\n      setMessage(\"En az bir sütunu eşleştirin.\");\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/sync/${syncDirection}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          mappings: validMappings,\n          columns_to_create: selectedColumnsToCreate\n        })\n      });\n      if (res.ok) setStep('complete');else {\n        const err = await res.json();\n        setMessage(`Senkronizasyon başarısız: ${err.error || err.detail}`);\n      }\n    } catch {\n      setMessage('Senkronizasyon sırasında ağ hatası oluştu.');\n    }\n  };\n\n  // ---------- Render Functions ----------\n  const renderConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: handleMicrosoftConnect,\n      children: \"Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n  const renderSelectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Excel Dosyas\\u0131 Se\\xE7in:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedExcelId,\n        onChange: e => {\n          setSelectedExcelId(e.target.value);\n          fetchExcelColumns(e.target.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Dosya Se\\xE7iniz...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), excelFiles.map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: f.id,\n          children: f.name\n        }, f.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 32\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Notion Veritaban\\u0131 ID'si:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: notionDbId,\n        onChange: e => setNotionDbId(e.target.value),\n        placeholder: \"Veritaban\\u0131 ID'sini yap\\u0131\\u015Ft\\u0131r\\u0131n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: fetchNotionProperties,\n      disabled: !selectedExcelId || !notionDbId,\n      children: \"Notion \\xD6zelliklerini Getir\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n  const renderMappingStep = () => {\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? mappings : mappings;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"S\\xFCtunlar\\u0131 E\\u015Fle\\u015Ftirin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-btn-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: syncDirection === 'excel-to-notion' ? 'active' : 'inactive',\n          onClick: () => setSyncDirection('excel-to-notion'),\n          children: \"Excel \\u2192 Notion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: syncDirection === 'notion-to-excel' ? 'active' : 'inactive',\n          onClick: () => setSyncDirection('notion-to-excel'),\n          children: \"Notion \\u2192 Excel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mapping-row header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: syncDirection === 'excel-to-notion' ? 'Excel Sütunu' : 'Notion Özelliği'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: syncDirection === 'excel-to-notion' ? 'Notion Özelliği' : 'Excel Sütunu'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this), syncDirection === 'excel-to-notion' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Notion\\u2019da Yok \\u2192 Olu\\u015Ftur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 51\n          }, this), syncDirection === 'excel-to-notion' && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Otomatik Sync\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 51\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), mappings.map(m => {\n          const isUnmatched = unmatchedColumns.includes(m.excel_column);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mapping-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: syncDirection === 'excel-to-notion' ? m.excel_column : m.notion_property\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: m.notion_property,\n                onChange: e => handleMappingChange(m.excel_column, e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Se\\xE7iniz...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 21\n                }, this), notionProperties.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: p.name,\n                  children: [p.name, \" (\", p.type, \")\"]\n                }, p.name, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this), syncDirection === 'excel-to-notion' && isUnmatched && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: selectedColumnsToCreate.includes(m.excel_column),\n                onChange: e => handleCreateColumnChange(m.excel_column, e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 19\n            }, this), syncDirection === 'excel-to-notion' && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                disabled: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 60\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 55\n            }, this)]\n          }, m.excel_column, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sync-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"primary-btn\",\n          onClick: saveMappingAndStartSync,\n          children: \"Sync Ba\\u015Flat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this);\n  };\n  const renderCompleteStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Senkr. Tamamland\\u0131!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: () => setStep('select'),\n      children: \"Yeni Senkronizasyon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Excel \\u2194 Notion Senkronizasyonu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [step === 'connect' && renderConnectStep(), step === 'select' && renderSelectStep(), step === 'mapping' && renderMappingStep(), step === 'complete' && renderCompleteStep()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EWxgYCX6XZfHbrKSdcmxvyTw4J8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","step","setStep","syncDirection","setSyncDirection","excelFiles","setExcelFiles","excelColumns","setExcelColumns","notionProperties","setNotionProperties","selectedExcelId","setSelectedExcelId","notionDbId","setNotionDbId","message","setMessage","userId","setUserId","mappings","setMappings","unmatchedColumns","setUnmatchedColumns","selectedColumnsToCreate","setSelectedColumnsToCreate","params","URLSearchParams","window","location","search","authSuccess","get","receivedUserId","storedUserId","localStorage","getItem","setItem","fetchExcelFiles","history","replaceState","document","title","pathname","handleMicrosoftConnect","href","currentUserId","res","fetch","data","json","ok","files","error","fetchExcelColumns","fileId","columns","map","name","hasId","some","c","toLowerCase","excel_column","notion_property","data_type","fetchNotionProperties","properties","notionPropNames","p","unmatched","filter","col","includes","handleMappingChange","excelColumnName","notionPropertyName","prev","m","_notionProperties$fin","find","type","handleCreateColumnChange","columnName","checked","saveMappingAndStartSync","validMappings","trim","length","method","headers","body","JSON","stringify","excel_file_id","notion_database_id","user_id","parseInt","columns_to_create","err","detail","renderConnectStep","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","renderSelectStep","value","onChange","e","target","f","id","placeholder","disabled","renderMappingStep","leftItems","rightItems","isUnmatched","renderCompleteStep","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\ntype AppStep = 'connect' | 'select' | 'mapping' | 'complete';\ntype SyncDirection = 'excel-to-notion' | 'notion-to-excel';\ntype ExcelFile = { id: string; name: string };\ntype ExcelColumn = { name: string };\ntype NotionProperty = { name: string; type: string };\ntype Mapping = { excel_column: string; notion_property: string; data_type: string };\n\nconst API_BASE_URL = 'http://127.0.0.1:8000';\n\nfunction App() {\n  const [step, setStep] = useState<AppStep>('connect');\n  const [syncDirection, setSyncDirection] = useState<SyncDirection>('excel-to-notion');\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\n  const [excelColumns, setExcelColumns] = useState<ExcelColumn[]>([]);\n  const [notionProperties, setNotionProperties] = useState<NotionProperty[]>([]);\n  const [selectedExcelId, setSelectedExcelId] = useState<string>('');\n  const [notionDbId, setNotionDbId] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n  const [userId, setUserId] = useState<string | null>(null);\n  const [mappings, setMappings] = useState<Mapping[]>([]);\n  const [unmatchedColumns, setUnmatchedColumns] = useState<string[]>([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState<string[]>([]);\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } \n    else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    }\n    else {\n      setStep('connect');\n    }\n  }, []);\n\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n\n  const fetchExcelFiles = async (currentUserId: string) => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);\n      else setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchExcelColumns = async (fileId: string) => {\n    if (!userId) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map((name: string) => ({ name }));\n        const hasId = columns.some((c: ExcelColumn) => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('\"ID\" sütunu bulunmuyor, başka dosya seçin.');\n          setExcelColumns([]);\n          setMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setMappings(columns.map((c: ExcelColumn) => ({ excel_column: c.name, notion_property: '', data_type: '' })));\n      } else setMessage(`Excel sütunları alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) { setMessage('Lütfen Notion Veritabanı ID\\'si girin.'); return; }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n        const notionPropNames = data.properties.map((p: any) => p.name.toLowerCase());\n        const unmatched = excelColumns\n          .filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id')\n          .map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate(unmatched);\n        setStep('mapping');\n      } else setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n    } catch {\n      setMessage('Notion özellikleri alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const handleMappingChange = (excelColumnName: string, notionPropertyName: string) => {\n    setMappings(prev => prev.map(m => \n      m.excel_column === excelColumnName \n        ? { ...m, notion_property: notionPropertyName, data_type: notionProperties.find(p => p.name === notionPropertyName)?.type || '' } \n        : m\n    ));\n  };\n\n  const handleCreateColumnChange = (columnName: string, checked: boolean) => {\n    setSelectedColumnsToCreate(prev => checked ? [...prev, columnName] : prev.filter(c => c !== columnName));\n  };\n\n  const saveMappingAndStartSync = async () => {\n    if (!userId) { setMessage('Kullanıcı kimliği bulunamadı.'); return; }\n    const validMappings = mappings.filter(m => m.notion_property.trim() !== '');\n    if (validMappings.length === 0) { setMessage(\"En az bir sütunu eşleştirin.\"); return; }\n\n    try {\n      const res = await fetch(`${API_BASE_URL}/sync/${syncDirection}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          mappings: validMappings,\n          columns_to_create: selectedColumnsToCreate\n        }),\n      });\n      if (res.ok) setStep('complete');\n      else { const err = await res.json(); setMessage(`Senkronizasyon başarısız: ${err.error || err.detail}`); }\n    } catch {\n      setMessage('Senkronizasyon sırasında ağ hatası oluştu.');\n    }\n  };\n\n  // ---------- Render Functions ----------\n  const renderConnectStep = () => (\n    <div className=\"step-container\">\n      <button className=\"primary-btn\" onClick={handleMicrosoftConnect}>Microsoft Hesabını Bağla</button>\n    </div>\n  );\n\n  const renderSelectStep = () => (\n    <div className=\"step-container grid\">\n      <div className=\"field\">\n        <label>Excel Dosyası Seçin:</label>\n        <select value={selectedExcelId} onChange={e => { setSelectedExcelId(e.target.value); fetchExcelColumns(e.target.value); }}>\n          <option value=\"\">Dosya Seçiniz...</option>\n          {excelFiles.map(f => <option key={f.id} value={f.id}>{f.name}</option>)}\n        </select>\n      </div>\n      <div className=\"field\">\n        <label>Notion Veritabanı ID'si:</label>\n        <input type=\"text\" value={notionDbId} onChange={e => setNotionDbId(e.target.value)} placeholder=\"Veritabanı ID'sini yapıştırın\" />\n      </div>\n      <button className=\"primary-btn\" onClick={fetchNotionProperties} disabled={!selectedExcelId || !notionDbId}>Notion Özelliklerini Getir</button>\n    </div>\n  );\n\n  const renderMappingStep = () => {\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? mappings : mappings;\n\n    return (\n      <div className=\"step-container\">\n        <h2>Sütunları Eşleştirin</h2>\n\n        {/* Toggle Button */}\n        <div className=\"toggle-btn-container\">\n          <button className={syncDirection==='excel-to-notion'?'active':'inactive'} onClick={()=>setSyncDirection('excel-to-notion')}>Excel → Notion</button>\n          <button className={syncDirection==='notion-to-excel'?'active':'inactive'} onClick={()=>setSyncDirection('notion-to-excel')}>Notion → Excel</button>\n        </div>\n\n        <div className=\"mapping-table\">\n          <div className=\"mapping-row header\">\n            <div>{syncDirection==='excel-to-notion'?'Excel Sütunu':'Notion Özelliği'}</div>\n            <div>{syncDirection==='excel-to-notion'?'Notion Özelliği':'Excel Sütunu'}</div>\n            {syncDirection==='excel-to-notion' && <div>Notion’da Yok → Oluştur</div>}\n            {syncDirection==='excel-to-notion' && <div>Otomatik Sync</div>}\n          </div>\n\n          {mappings.map(m => {\n            const isUnmatched = unmatchedColumns.includes(m.excel_column);\n            return (\n              <div className=\"mapping-row\" key={m.excel_column}>\n                <div>{syncDirection==='excel-to-notion'?m.excel_column:m.notion_property}</div>\n                <div>\n                  <select\n                    value={m.notion_property}\n                    onChange={e => handleMappingChange(m.excel_column, e.target.value)}\n                  >\n                    <option value=\"\">Seçiniz...</option>\n                    {notionProperties.map(p => (\n                      <option key={p.name} value={p.name}>{p.name} ({p.type})</option>\n                    ))}\n                  </select>\n                </div>\n                {syncDirection==='excel-to-notion' && isUnmatched && (\n                  <div>\n                    <input type=\"checkbox\" checked={selectedColumnsToCreate.includes(m.excel_column)} onChange={e => handleCreateColumnChange(m.excel_column, e.target.checked)} />\n                  </div>\n                )}\n                {syncDirection==='excel-to-notion' && <div><input type=\"checkbox\" disabled /></div>}\n              </div>\n            );\n          })}\n        </div>\n\n        <div className=\"sync-buttons\">\n          <button className=\"primary-btn\" onClick={saveMappingAndStartSync}>Sync Başlat</button>\n        </div>\n      </div>\n    );\n  };\n\n  const renderCompleteStep = () => (\n    <div className=\"step-container\">\n      <h2>Senkr. Tamamlandı!</h2>\n      <button className=\"primary-btn\" onClick={() => setStep('select')}>Yeni Senkronizasyon</button>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Excel ↔ Notion Senkronizasyonu</h1>\n        {message && <div className=\"message\">{message}</div>}\n      </header>\n      <main>\n        {step === 'connect' && renderConnectStep()}\n        {step === 'select' && renderSelectStep()}\n        {step === 'mapping' && renderMappingStep()}\n        {step === 'complete' && renderCompleteStep()}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}