{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport Dashboard from './AutoSyncDashboard';\nimport Home from './Home'; // Yeni Home bileÅŸenini import ediyoruz!\nimport PrivacyPolicy from './PrivacyPolicy';\nimport TermsAndConditions from './TermsAndConditions';\n// YENÄ° Ä°MPORTLAR\nimport HeaderComponent from './HeaderComponent';\nimport FooterComponent from './FooterComponent';\nimport Profile from './Profile';\nimport Pricing from './Pricing';\nimport QuickStart from './QuickStart';\nimport FAQPage from './FAQPage';\nimport Features from './Features';\n\n// 'home' adÄ±mÄ±nÄ± AppStep tÃ¼rÃ¼ne ekliyoruz\n// YENÄ° TÄ°P EKLENTÄ°LERÄ°: 'privacy' ve 'terms' eklendi\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'https://notixel-backend.onrender.com';\nconst getInitialStep = userId => {\n  // 1. URL'deki mevcut hash'i...\n  const hash = window.location.hash.replace('#', '');\n  if (hash && (hash === 'privacy' || hash === 'terms' || hash === 'faq' || hash === 'pricing' || hash === 'quick_start' || hash === 'features')) {\n    return hash; // EÄŸer hash varsa ve eÅŸleÅŸiyorsa, o adÄ±mÄ± dÃ¶ndÃ¼r\n  }\n\n  // ... (Geri kalan giriÅŸ kontrolÃ¼)\n  // VarsayÄ±lan olarak 'home' dÃ¶ndÃ¼rÃ¼r\n  return 'home';\n};\nfunction App() {\n  _s();\n  // BaÅŸlangÄ±Ã§ adÄ±mÄ±nÄ±, localStorage'daki user_id'ye gÃ¶re belirliyoruz.\n  const initialUserId = localStorage.getItem('user_id');\n  // ID varsa 'connect' adÄ±mÄ±nda baÅŸla, yoksa 'home' (giriÅŸ) sayfasÄ±nda baÅŸla.\n  const initialStep = getInitialStep(initialUserId);\n  const [step, setStep] = useState(getInitialStep(localStorage.getItem('user_id')));\n  const [userEmail, setUserEmail] = useState(localStorage.getItem('user_email'));\n  const [syncDirection, setSyncDirection] = useState('excel-to-notion');\n  const [autoSyncToggle, setAutoSyncToggle] = useState(false);\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [notionProperties, setNotionProperties] = useState([]);\n  const [selectedExcelId, setSelectedExcelId] = useState('');\n  const [excelWorksheets, setExcelWorksheets] = useState([]); // Yeni\n  const [selectedWorksheetName, setSelectedWorksheetName] = useState(''); // Yeni\n\n  const [message, setMessage] = useState('');\n  const [userId, setUserId] = useState(initialUserId); // initialUserId'yi kullanÄ±yoruz\n\n  const [excelToNotionMappings, setExcelToNotionMappings] = useState([]);\n  const [notionToExcelMappings, setNotionToExcelMappings] = useState([]);\n  const [unmatchedColumns, setUnmatchedColumns] = useState([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState([]);\n  const [autoSyncColumns, setAutoSyncColumns] = useState([]);\n  const [notionDbId, setNotionDbId] = useState(null);\n  const [notionDatabases, setNotionDatabases] = useState([]);\n  const [notionDatabasesLoading, setNotionDatabasesLoading] = useState(false);\n  const [notionDatabasesError, setNotionDatabasesError] = useState(null);\n  const loggedIn = !!userId; // KullanÄ±cÄ± oturum aÃ§mÄ±ÅŸ mÄ±?\n\n  const handleMappingChange = useCallback((leftItemName, selectedRightItem) => {\n    // Mevcut mappings'i al\n    const currentMappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    const setMappings = syncDirection === 'excel-to-notion' ? setExcelToNotionMappings : setNotionToExcelMappings;\n\n    // Yeni mapping objesi oluÅŸtur\n    const newMapping = {\n      excel_column: syncDirection === 'excel-to-notion' ? leftItemName : selectedRightItem,\n      notion_property: syncDirection === 'excel-to-notion' ? selectedRightItem : leftItemName,\n      data_type: 'Text' // Bu, varsayÄ±lan deÄŸerdir, Notion property tipine gÃ¶re deÄŸiÅŸtirilebilir\n    };\n\n    // Var olan mapping'i bul ve gÃ¼ncelle veya yeni mapping'i ekle\n    const updatedMappings = currentMappings.filter(m => syncDirection === 'excel-to-notion' ? m.excel_column !== leftItemName : m.notion_property !== leftItemName);\n\n    // EÄŸer \"EÅŸleÅŸtirme Yapma\" (boÅŸ deÄŸer) seÃ§ilmediyse ekle\n    if (selectedRightItem) {\n      setMappings([...updatedMappings, newMapping]);\n    } else {\n      // EÅŸleÅŸme kaldÄ±rÄ±ldÄ±ÄŸÄ±nda AutoSync'ten de kaldÄ±r\n      if (autoSyncColumns.includes(leftItemName)) {\n        setAutoSyncColumns(cols => cols.filter(c => c !== leftItemName));\n      }\n      setMappings(updatedMappings);\n    }\n  }, [syncDirection, excelToNotionMappings, notionToExcelMappings, autoSyncColumns, setExcelToNotionMappings, setNotionToExcelMappings, setAutoSyncColumns]);\n  useEffect(() => {\n    const handleHashChange = () => {\n      // Hash'i alÄ±p baÅŸÄ±ndaki '#' iÅŸaretini kaldÄ±r\n      const newHash = window.location.hash.replace('#', '');\n\n      // AppStep tipindeki tÃ¼m geÃ§erli adÄ±mlarÄ± kontrol et\n      if (newHash && (newHash === 'privacy' || newHash === 'terms' || newHash === 'faq' || newHash === 'pricing' || newHash === 'quick_start' || newHash === 'features' || newHash === 'home' || newHash === 'connect' || newHash === 'dashboard' || newHash === 'profile')) {\n        setStep(newHash);\n      } else if (!newHash) {\n        // EÄŸer hash boÅŸaltÄ±lÄ±rsa, ana sayfaya dÃ¶n\n        setStep('home');\n      }\n    };\n\n    // Dinleyiciyi kaydet\n    window.addEventListener('hashchange', handleHashChange);\n\n    // Temizleme fonksiyonu: BileÅŸen kaldÄ±rÄ±ldÄ±ÄŸÄ±nda dinleyiciyi kaldÄ±r\n    return () => {\n      window.removeEventListener('hashchange', handleHashChange);\n    };\n  }, [setStep]); // setStep deÄŸiÅŸtiÄŸinde yeniden baÄŸlanmalÄ±\n\n  // 2. Auto Sync SÃ¼tun SeÃ§imini YÃ¶neten Fonksiyon\n  const handleAutoSyncColumnChange = useCallback((columnName, isChecked) => {\n    setAutoSyncColumns(prevCols => {\n      if (isChecked && !prevCols.includes(columnName)) {\n        return [...prevCols, columnName];\n      } else if (!isChecked && prevCols.includes(columnName)) {\n        return prevCols.filter(c => c !== columnName);\n      }\n      return prevCols;\n    });\n  }, [setAutoSyncColumns]);\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const receivedUserId = params.get('user_id');\n    const notionAuthSuccess = params.get('notion_auth_success') === 'true';\n    const notionAuthError = params.get('notion_auth_error') === 'true';\n    const authSuccess = params.get('auth_success') === 'true';\n\n    // Helper: KullanÄ±cÄ± verilerini kaydeder ve Notion baÄŸlantÄ±sÄ±nÄ± kontrol eder.\n    const initializeApp = async (id, isNewLogin) => {\n      setUserId(id);\n      localStorage.setItem('user_id', id);\n      const hasNotionKey = await checkNotionStatus(id);\n      if (!hasNotionKey) {\n        setStep('notion_connect');\n        if (isNewLogin) setMessage('Microsoft connection successful. Now connect your Notion account.');\n      } else {\n        setStep('select');\n        fetchExcelFiles(id);\n        if (isNewLogin) setMessage('Connections complete! Select your Excel file.');\n      }\n    };\n\n    // --- 1. Notion Callback Handling (Notion'dan dÃ¶ndÃ¼ÄŸÃ¼nde) ---\n    if (notionAuthSuccess) {\n      const currentId = localStorage.getItem('user_id');\n      if (currentId) {\n        setStep('pricing');\n        fetchExcelFiles(currentId);\n        setMessage('Notion connection successful! Now select a plan.');\n      } else {\n        setMessage('Error: Notion connection successful but user ID is missing.');\n        setStep('home');\n      }\n      window.history.replaceState(null, '', window.location.pathname + window.location.hash);\n      return;\n    }\n    if (notionAuthError) {\n      setMessage(`Notion connection error: ${params.get('message') || 'Unknown error.'}`);\n      setStep('notion_connect');\n      window.history.replaceState(null, '', window.location.pathname);\n      return;\n    }\n\n    // --- 2. Microsoft Callback Handling (Microsoft'tan dÃ¶ndÃ¼ÄŸÃ¼nde) ---\n    if (authSuccess && receivedUserId) {\n      initializeApp(receivedUserId, true);\n\n      // ðŸ’¡ KullanÄ±cÄ± bilgilerini backend'den al (Ã¶rnek endpoint)\n      fetch(`${API_BASE_URL}/get-user?user_id=${receivedUserId}`).then(async res => {\n        if (!res.ok) throw new Error(\"User information could not be retrieved.\");\n        const data = await res.json();\n\n        // E-posta bilgisi geldiyse kaydet\n        if (data.email) {\n          localStorage.setItem(\"user_email\", data.email);\n          setUserEmail(data.email);\n        } else {\n          console.warn(\"Email information returned empty:\", data);\n        }\n      }).catch(err => console.error(\"User information could not be retrieved:\", err));\n      window.history.replaceState(null, '', window.location.pathname);\n      return;\n    }\n\n    // --- 3. Persistent Session / Initial Load Handling ---\n    const storedUserId = localStorage.getItem('user_id');\n    // EÄŸer localStorage'da ID varsa ve mevcut adÄ±m 'home' deÄŸilse (yani oturum aÃ§ma akÄ±ÅŸÄ±na girmiÅŸse)\n    if (storedUserId && step !== 'home') {\n      initializeApp(storedUserId, false);\n      return;\n    }\n\n    // --- 4. Default: Show Home Page ---\n    // EÄŸer hiÃ§bir ÅŸey tetiklenmediyse ve ID yoksa, Home'u gÃ¶ster.\n    if (!storedUserId) {\n      setStep('home');\n    }\n  }, []);\n  useEffect(() => {\n    // ID sÃ¼tun adÄ±nÄ± kÃ¼Ã§Ã¼k harfle kontrol ediyoruz\n    const idColumnName = 'id';\n    const isMappingStep = step === 'mapping';\n\n    // ðŸš¨ DÃ¼zeltme 1: leftItems ve rightItems'Ä± useEffect iÃ§inde tanÄ±mla\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n\n    // 1. OTOMATÄ°K ID EÅžLEÅžTÄ°RME KONTROLÃœ\n    if (isMappingStep && excelColumns.length > 0 && notionProperties.length > 0) {\n      // ID sÃ¼tununun zaten eÅŸlenip eÅŸlenmediÄŸini kontrol et.\n      const isIdMapped = mappings.some(m => syncDirection === 'excel-to-notion' ? m.excel_column.toLowerCase() === idColumnName : m.notion_property.toLowerCase() === idColumnName);\n      if (!isIdMapped) {\n        const leftItem = leftItems.find(item => item.name.toLowerCase() === idColumnName);\n        const autoMapTarget = rightItems.find(item => item.name.toLowerCase() === idColumnName);\n\n        // Hem sol hem saÄŸ tarafta \"ID\" sÃ¼tunu varsa, otomatik eÅŸleÅŸtirmeyi yap\n        if (leftItem && autoMapTarget) {\n          handleMappingChange(leftItem.name, autoMapTarget.name);\n          setMessage('ID column matched automatically.');\n        }\n      }\n    }\n\n    // 2. ID SÃœTUNU OTOMATÄ°K SYNC MANTIK\n    // Global AutoSync aÃ§Ä±ldÄ±ÄŸÄ±nda ID'yi otomatik sync listesine ekle.\n    if (isMappingStep) {\n      if (autoSyncToggle && !autoSyncColumns.includes(idColumnName)) {\n        // ID'yi otomatik sync listesine ekle\n        handleAutoSyncColumnChange(idColumnName, true);\n      } else if (!autoSyncToggle && autoSyncColumns.includes(idColumnName)) {\n        // ID'yi otomatik sync listesinden Ã§Ä±kar (Global kapatÄ±ldÄ±)\n        handleAutoSyncColumnChange(idColumnName, false);\n      }\n    }\n\n    // ðŸš¨ DÃœZELTME 2: Dependency array'i dÃ¼zeltildi. setMessage kaldÄ±rÄ±ldÄ±.\n  }, [step, syncDirection, excelColumns, notionProperties, autoSyncToggle, autoSyncColumns, excelToNotionMappings, notionToExcelMappings, handleMappingChange,\n  // ArtÄ±k useCallback ile stabil!\n  handleAutoSyncColumnChange,\n  // ArtÄ±k useCallback ile stabil!\n  setMessage // ðŸš¨ setMessage bir state setter'dÄ±r ve dependency array'e eklenmemelidir.\n  ]);\n  const fetchNotionDatabases = useCallback(async userId => {\n    setNotionDatabasesLoading(true);\n    setNotionDatabasesError(null);\n    try {\n      // Yeni backend endpoint'ini Ã§aÄŸÄ±rÄ±yoruz\n      const response = await fetch(`${API_BASE_URL}/get-notion-databases?user_id=${userId}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        // Backend'den gelen hata mesajÄ±nÄ± kullanÄ±yoruz.\n        const errorMsg = errorData.error || 'Databases could not be loaded.';\n        throw new Error(errorMsg);\n      }\n      const data = await response.json();\n      const databases = data.databases || [];\n      setNotionDatabases(databases);\n\n      // VeritabanÄ± varsa ve henÃ¼z seÃ§ili deÄŸilse, ilkini varsayÄ±lan olarak seÃ§\n      if (databases.length > 0 && !notionDbId) {\n        setNotionDbId(databases[0].id);\n      }\n    } catch (err) {\n      // KullanÄ±cÄ±ya gÃ¶sterilecek hata mesajÄ±\n      setNotionDatabasesError(`Notion databases could not be retrieved. Please check your Notion integration settings. Error: ${err instanceof Error ? err.message : 'Unknown Error'}`);\n    } finally {\n      setNotionDatabasesLoading(false);\n    }\n  }, [notionDbId]); // Dependency olarak notinDbId ve setNotionDbId'yi (implicit) ekliyoruz.\n\n  // ðŸ”‘ YENÄ°: Notion veritabanlarÄ±nÄ± yÃ¼klemek iÃ§in useEffect\n  useEffect(() => {\n    // AdÄ±m 'select' olduÄŸunda, kullanÄ±cÄ± ID'si varsa ve veritabanlarÄ± henÃ¼z yÃ¼klenmemiÅŸse/yÃ¼kleniyorsa yÃ¼klemeyi baÅŸlat\n    if (step === 'select' && userId && notionDatabases.length === 0 && !notionDatabasesLoading && !notionDatabasesError) {\n      fetchNotionDatabases(userId);\n    }\n    // NOT: fetchNotionDatabases useCallback iÃ§inde olduÄŸu iÃ§in buraya eklemiyoruz.\n  }, [userId, step, notionDatabases.length, notionDatabasesLoading, notionDatabasesError, fetchNotionDatabases]); // fetchNotionDatabases dependency'si eklendi\n\n  // ... (TÃ¼m fetch ve handler fonksiyonlarÄ± burada devam eder)\n\n  // 1. Yeni Sayfa Ã‡ekme Fonksiyonu\n  const fetchExcelWorksheets = async (fileId, currentUserId) => {\n    try {\n      // Backend'deki yeni endpoint'i Ã§aÄŸÄ±rÄ±n\n      const res = await fetch(`${API_BASE_URL}/get-excel-worksheets?excel_file_id=${fileId}&user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) {\n        // Data'nÄ±n [\"Sayfa1\", \"Sayfa2\"] formatÄ±nda geldiÄŸini varsayÄ±yoruz\n        const worksheets = data.worksheets.map(name => ({\n          name\n        }));\n        setExcelWorksheets(worksheets);\n        if (worksheets.length === 1) {\n          // Tek sayfa varsa otomatik seÃ§ ve sÃ¼tunlarÄ± Ã§ek\n          setSelectedWorksheetName(worksheets[0].name);\n          fetchExcelColumns(fileId, worksheets[0].name);\n        } else {\n          // SÃ¼tunlarÄ± temizle ve kullanÄ±cÄ±nÄ±n seÃ§mesini bekle\n          setExcelColumns([]);\n        }\n      } else setMessage(`Excel sheets could not be retrieved: ${data.error}`);\n    } catch {\n      setMessage('A network error occurred while retrieving Excel sheets.');\n    }\n  };\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n  const checkNotionStatus = async currentUserId => {\n    // DEV MODE: Notion baÄŸlantÄ±sÄ± kontrolÃ¼ atlanÄ±yor.\n    // return true; // EÄŸer test amaÃ§lÄ± Notion baÄŸlantÄ±sÄ±nÄ± atlamak isterseniz\n    try {\n      const res = await fetch(`${API_BASE_URL}/check-notion-status?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) {\n        // Backend'den { has_notion_key: true/false } ÅŸeklinde bir yanÄ±t bekliyoruz.\n        return data.has_notion_key;\n      }\n      return false;\n    } catch {\n      setMessage('A network error occurred during the connection check.');\n      return false;\n    }\n  };\n  const fetchExcelFiles = async currentUserId => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);else setMessage(`Excel files could not be retrieved: ${data.error}`);\n    } catch {\n      setMessage('A network error occurred while retrieving Excel files.');\n    }\n  };\n  const fetchExcelColumns = async (fileId, worksheetName) => {\n    if (!userId || !worksheetName) return;\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&worksheet_name=${worksheetName}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map(name => ({\n          name\n        }));\n        const hasId = columns.some(c => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('The \"ID\" column is not found, select another file.');\n          setExcelColumns([]);\n          setExcelToNotionMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setExcelToNotionMappings(columns.map(c => ({\n          excel_column: c.name,\n          notion_property: '',\n          data_type: ''\n        })));\n      } else setMessage(`Excel columns could not be retrieved: ${data.error}`);\n    } catch {\n      setMessage('A network error occurred while retrieving Excel columns.');\n    }\n  };\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Please select a Notion Database.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n        const notionPropNames = data.properties.map(p => p.name.toLowerCase());\n        const unmatched = excelColumns.filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id').map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate([]);\n        setNotionToExcelMappings(data.properties.map(prop => ({\n          excel_column: '',\n          notion_property: prop.name,\n          data_type: prop.type || ''\n        })));\n        setStep('mapping');\n      } else setMessage(`Notion properties could not be retrieved: ${data.error}`);\n    } catch {\n      setMessage('A network error occurred while retrieving Notion properties.');\n    }\n  };\n  const handleCreateColumnChange = (colName, checked) => {\n    setSelectedColumnsToCreate(prev => checked ? [...prev, colName] : prev.filter(c => c !== colName));\n  };\n  const saveMappings = async () => {\n    if (!userId) {\n      setMessage('User ID not found.');\n      return;\n    }\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    const validMappings = mappings.filter(m => syncDirection === 'excel-to-notion' ? m.notion_property.trim() !== '' : m.excel_column.trim() !== '');\n    if (validMappings.length === 0) {\n      setMessage(\"Select at least one column.\");\n      return;\n    }\n    const idMappingExists = validMappings.some(m => syncDirection === 'excel-to-notion' && m.excel_column.toLowerCase() === 'id' || syncDirection === 'notion-to-excel' && m.notion_property.toLowerCase() === 'id');\n    if (!idMappingExists) {\n      setMessage(\"Matching the 'ID' column is mandatory for synchronization.\");\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/save-mapping?user_id=${userId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(validMappings)\n      });\n      const data = await res.json();\n      if (res.ok) {\n        const allSavedMappings = data.saved_mappings || [];\n        setMessage(\"Matches saved successfully. Starting synchronization...\");\n        startSync(syncDirection, allSavedMappings);\n      } else {\n        const err = data;\n        setMessage(`Matches could not be saved: ${err.error || err.detail}`);\n      }\n    } catch {\n      setMessage('A network error occurred while saving the matches.');\n    }\n  };\n  const startSync = async (direction, allSavedMappings) => {\n    var _excelFiles$find;\n    if (!userId) {\n      setMessage('User ID not found.');\n      return;\n    }\n    let successMessage = 'Synchronization completed successfully.';\n    const cleanAutoSyncColumnsSet = new Set(autoSyncColumns.map(name => name.toLowerCase().trim()));\n    const autoSyncMappingIds = allSavedMappings.filter(m => {\n      const columnName = direction === 'excel-to-notion' ? m.excel_column : m.notion_property;\n      const cleanBackendName = columnName.toLowerCase().trim();\n      return cleanAutoSyncColumnsSet.has(cleanBackendName);\n    }).map(m => m.id);\n    const autoSyncCreationData = {\n      user_id: parseInt(userId, 10),\n      excel_file_id: selectedExcelId,\n      excel_file_name: ((_excelFiles$find = excelFiles.find(f => f.id === selectedExcelId)) === null || _excelFiles$find === void 0 ? void 0 : _excelFiles$find.name) || '',\n      notion_database_id: notionDbId,\n      direction: direction,\n      interval_minutes: 60,\n      mapping_ids: autoSyncMappingIds,\n      excel_worksheet_name: selectedWorksheetName\n    };\n    try {\n      // 1. MANUEL SENKRONÄ°ZASYONU BAÅžLAT\n      const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          excel_worksheet_name: selectedWorksheetName,\n          columns_to_create: direction === 'excel-to-notion' ? selectedColumnsToCreate : []\n        })\n      });\n      if (!res.ok) {\n        const err = await res.json();\n        throw new Error(`Manual Synchronization failed: ${err.detail || err.error}`);\n      }\n\n      // 2. OTOMATÄ°K SYNC KONFÄ°GÃœRASYONUNU OLUÅžTUR\n      if (autoSyncToggle && autoSyncMappingIds.length > 0) {\n        const autoSyncRes = await fetch(`${API_BASE_URL}/autosync/create`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(autoSyncCreationData)\n        });\n        const autoSyncData = await autoSyncRes.json();\n        if (!autoSyncRes.ok) {\n          successMessage += ` However, Automatic Sync could not be configured.: ${autoSyncData.detail || 'Unknown Error'}`;\n        } else {\n          successMessage = `Manual synchronization is complete and Automatic Sync is configured. (${autoSyncData.message})`;\n        }\n      }\n      setStep('complete');\n      setMessage(successMessage);\n    } catch (e) {\n      setMessage(`Error During Synchronization Process: ${e.message || e.toString()}`);\n    }\n  };\n  const renderConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Connect Microsoft Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You must grant permission to access your OneDrive/Excel account to continue.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: handleMicrosoftConnect,\n      children: \"Connect Microsoft Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 603,\n    columnNumber: 5\n  }, this);\n  const handleNotionConnect = () => {\n    // Backend'deki /connect/notion endpoint'ine yÃ¶nlendiriyoruz\n    window.location.href = `${API_BASE_URL}/connect/notion?user_id=${userId}`;\n  };\n  const renderNotionConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Connect Notion Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Synchronization requires you to connect your Notion API key. Please ensure you have granted permission for your correct databases.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: handleNotionConnect,\n      disabled: !userId,\n      children: \"Connect Notion Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 617,\n    columnNumber: 7\n  }, this);\n  const renderSelectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"File Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"step-description\",\n      children: \"Please select the Excel file/sheet and Notion Database you wish to synchronize.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-step-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `selection-card ${selectedExcelId ? 'is-selected' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Excel File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Excel File:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedExcelId,\n            onChange: e => {\n              setSelectedExcelId(e.target.value);\n              if (e.target.value) {\n                // Dosya seÃ§ildiÄŸinde sayfalarÄ± getir\n\n                fetchExcelWorksheets(e.target.value, userId);\n                setSelectedWorksheetName('');\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select File...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 27\n            }, this), excelFiles.map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: f.id,\n              children: f.name\n            }, f.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 48\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `selection-card ${selectedWorksheetName ? 'is-selected' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Excel Sheet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-hint\",\n          children: \"Select which Sheet you want to sync.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 19\n        }, this), selectedExcelId ? excelWorksheets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Sheet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedWorksheetName,\n            onChange: e => {\n              setSelectedWorksheetName(e.target.value);\n\n              // Sayfa seÃ§ildiÄŸinde sÃ¼tunlarÄ± getir\n\n              fetchExcelColumns(selectedExcelId, e.target.value);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Sheet...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 715,\n              columnNumber: 35\n            }, this), excelWorksheets.map(ws => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: ws.name,\n              children: ws.name\n            }, ws.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 717,\n              columnNumber: 62\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 27\n        }, this) :\n        /*#__PURE__*/\n        // Loading state iÃ§in bir kontrol ekledik, eÄŸer yÃ¼kleme state'i mevcut deÄŸilse bu ÅŸekilde kalabilir.\n        _jsxDEV(\"p\", {\n          className: \"loading-state\",\n          children: \"Sheets are loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"disabled-state\",\n          children: \"Select the Excel file first.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `selection-card notion-card ${notionDbId ? 'is-selected' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notion Database\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-hint\",\n          children: \"Select the database for synchronization.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 19\n        }, this), notionDatabasesError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message error-message\",\n          children: notionDatabasesError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 44\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"notion-db-select\",\n            children: \"Notion Database:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 755,\n            columnNumber: 23\n          }, this), notionDatabasesLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"loading-state\",\n            children: \"Notion databases are loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 759,\n            columnNumber: 29\n          }, this) : notionDatabases.length > 0 ?\n          /*#__PURE__*/\n          // KRÄ°TÄ°K DEÄžÄ°ÅžÄ°KLÄ°K: Dropdown MenÃ¼\n          _jsxDEV(\"select\", {\n            id: \"notion-db-select\"\n            // notionDbId state'inizin adÄ±nÄ± kullandÄ±k\n            ,\n            value: notionDbId || '',\n            onChange: e => setNotionDbId(e.target.value),\n            className: \"input-select\",\n            disabled: notionDatabasesLoading,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a database\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 770,\n              columnNumber: 33\n            }, this), notionDatabases.map(db => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: db.id,\n              children: [db.name, \" (ID: ...\", db.id.slice(-4), \")\"]\n            }, db.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 773,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 762,\n            columnNumber: 29\n          }, this) :\n          // VeritabanÄ± bulunamazsa uyarÄ±\n          !notionDatabasesError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"disabled-state\",\n            children: \"No database accessible by NotiXel was found. Please make sure you have given permission in your Notion database with the NotiXel integration.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 781,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary btn-lg\",\n        onClick: fetchNotionProperties,\n        disabled: !selectedExcelId || !selectedWorksheetName || !notionDbId,\n        children: \"Proceed to Mapping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 796,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 794,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 629,\n    columnNumber: 7\n  }, this);\n  const renderMappingStep = () => {\n    var _mappings$find, _mappings$find2;\n    // `leftItems` ve `idMappingItem`'Ä± burada tÃ¼retiyoruz\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n\n    // ID sÃ¼tununu dÄ±ÅŸarÄ±da tutarak haritalama listesini oluÅŸtur\n    const mappableLeftItems = leftItems.filter(item => item.name.toLowerCase() !== 'id');\n    const idMappingItem = leftItems.find(item => item.name.toLowerCase() === 'id');\n\n    // EÄŸer ID sÃ¼tunu bulunamÄ±yorsa veya mapping yoksa bir uyarÄ± gÃ¶ster\n    if (!idMappingItem) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"step-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            color: 'red'\n          },\n          children: \"ERROR!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"An \\\"ID\\\" column in the Excel file is mandatory for synchronization to work. Please check your file or select a new one.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 832,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"secondary-btn\",\n          onClick: () => setStep('select'),\n          children: \"Go Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 15\n      }, this);\n    }\n\n    // ID sÃ¼tunu iÃ§in Notion tarafÄ±nda eÅŸleÅŸme aranacak\n    const idSelectedRight = idMappingItem ? syncDirection === 'excel-to-notion' ? (_mappings$find = mappings.find(m => m.excel_column.toLowerCase() === 'id')) === null || _mappings$find === void 0 ? void 0 : _mappings$find.notion_property : (_mappings$find2 = mappings.find(m => m.notion_property.toLowerCase() === 'id')) === null || _mappings$find2 === void 0 ? void 0 : _mappings$find2.excel_column : '';\n\n    // ðŸš¨ Hata DÃ¼zeltmesi: setMessage Ã§aÄŸrÄ±sÄ± buradan kaldÄ±rÄ±ldÄ±.\n\n    // EÄŸer ID seÃ§iliyse VE global sync aÃ§Ä±ksa, ID de otomatik sync'e dahildir.\n    const isIDAutoSynced = !!idSelectedRight && autoSyncToggle;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Match Collumns\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 853,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-control-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `btn-toggle ${syncDirection === 'excel-to-notion' ? 'active' : ''}`,\n            onClick: () => setSyncDirection('excel-to-notion'),\n            children: [\"Excel \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"arrow\",\n              children: \"\\u2192\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 862,\n              columnNumber: 33\n            }, this), \" Notion\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 858,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `btn-toggle ${syncDirection === 'notion-to-excel' ? 'active' : ''}`,\n            onClick: () => setSyncDirection('notion-to-excel'),\n            children: [\"Notion \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"arrow\",\n              children: \"\\u2192\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 868,\n              columnNumber: 34\n            }, this), \" Excel\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 864,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 857,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"auto-sync-toggle-global\",\n          children: [\"Activate Automatic Sync\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: autoSyncToggle\n            // useEffect hook'u bu Ã§aÄŸrÄ±dan sonra ID'yi autoSyncColumns'a ekleyecektir.\n            ,\n            onChange: e => setAutoSyncToggle(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 874,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 872,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 856,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"step-description\",\n        children: \"Match each column you want to synchronize with the corresponding column on the other side.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 884,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-list-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mapping-list-left-title\",\n          children: syncDirection === 'excel-to-notion' ? 'EXCEL SÃœTUNLARI' : 'NOTION Ã–ZELLÄ°KLERÄ°'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mapping-list-right-title\",\n          children: \"MATCHED COLUMNS / PROPERTIES\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 890,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mapping-list-autosync-title\",\n          children: \"AUTOMATIC SYNC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 891,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 888,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-list-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mapping-row mapping-row-critical\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mapping-left\",\n            children: \"ID (Critical Match)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 897,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mapping-right\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: idSelectedRight || '',\n              onChange: e => handleMappingChange(idMappingItem.name, e.target.value)\n              // ID eÅŸleÅŸmesi her zaman olmalÄ±\n              ,\n              style: {\n                backgroundColor: idSelectedRight ? '#e6fff0' : '#ffe6e6'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Choose...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 905,\n                columnNumber: 31\n              }, this), rightItems.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: p.name,\n                children: [p.name, syncDirection === 'excel-to-notion' && 'type' in p && p.type ? ` (${p.type})` : '']\n              }, p.name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 907,\n                columnNumber: 35\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 899,\n              columnNumber: 27\n            }, this), !idSelectedRight && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"info-text\",\n              style: {\n                margin: '5px 0 0 0',\n                textAlign: 'left',\n                color: '#dc3545'\n              },\n              children: \"CRITICAL: You must match the ID column.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 916,\n              columnNumber: 48\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 898,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mapping-autosync\",\n            children: isIDAutoSynced ? /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: '#28a745',\n                fontWeight: 'bold'\n              },\n              children: \"On (Mandatory)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 922,\n              columnNumber: 31\n            }, this) :\n            /*#__PURE__*/\n            // Global Sync kapalÄ±ysa veya ID seÃ§ili deÄŸilse: UyarÄ±\n            _jsxDEV(\"span\", {\n              className: \"info-text\",\n              children: autoSyncToggle ? 'Waiting for mapping' : 'Global Closed'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 925,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 919,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 19\n        }, this), mappableLeftItems.map(item => {\n          const leftName = item.name;\n          const mapping = mappings.find(m => syncDirection === 'excel-to-notion' ? m.excel_column === leftName : m.notion_property === leftName) || {\n            excel_column: '',\n            notion_property: '',\n            data_type: ''\n          };\n          const selectedRight = syncDirection === 'excel-to-notion' ? mapping.notion_property : mapping.excel_column;\n\n          // ID zaten ayrÄ± bir bÃ¶lÃ¼mde iÅŸlendiÄŸi iÃ§in burada tekrar kontrol etmiyoruz\n          const isAutoSynced = autoSyncColumns.includes(leftName);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `mapping-row ${selectedRight ? 'is-mapped' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-left\",\n              children: leftName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 949,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-right\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedRight || '',\n                onChange: e => handleMappingChange(leftName, e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Do Not Map\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 955,\n                  columnNumber: 39\n                }, this), rightItems.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: p.name,\n                  children: syncDirection === 'excel-to-notion' && 'type' in p && p.type ? `${p.name} (${p.type})` : p.name\n                }, p.name, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 957,\n                  columnNumber: 43\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 951,\n                columnNumber: 35\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 950,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mapping-autosync\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"auto-sync-checkbox-label\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  disabled: !autoSyncToggle || !selectedRight // Global kapalÄ±ysa veya eÅŸleÅŸme yapÄ±lmadÄ±ysa devre dÄ±ÅŸÄ±\n                  ,\n                  checked: isAutoSynced,\n                  onChange: e => handleAutoSyncColumnChange(leftName, e.target.checked)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 967,\n                  columnNumber: 39\n                }, this), isAutoSynced ? 'AÃ§Ä±k' : 'KapalÄ±']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 966,\n                columnNumber: 35\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 965,\n              columnNumber: 31\n            }, this)]\n          }, leftName, true, {\n            fileName: _jsxFileName,\n            lineNumber: 948,\n            columnNumber: 27\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 894,\n        columnNumber: 15\n      }, this), syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unmatched-columns-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Excel Columns Not In Notion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 984,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Mark these columns to add them as new \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \" Rich Text \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 985,\n            columnNumber: 64\n          }, this), \" properties in Notion:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 985,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column-creation-options\",\n          children: unmatchedColumns.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"checkbox-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedColumnsToCreate.includes(c),\n              onChange: e => handleCreateColumnChange(c, e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 989,\n              columnNumber: 35\n            }, this), c]\n          }, c, true, {\n            fileName: _jsxFileName,\n            lineNumber: 988,\n            columnNumber: 31\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 986,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 983,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sync-buttons step-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary btn-lg\",\n          onClick: saveMappings,\n          disabled: !idSelectedRight,\n          children: \"Start Synchronization\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1003,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1002,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 11\n    }, this);\n  };\n  const renderCompleteStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sync Complete!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1017,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1018,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: () => setStep('select'),\n      children: \"New Synchronization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1019,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"secondary-btn\",\n      onClick: () => setStep('dashboard'),\n      style: {\n        marginLeft: '10px'\n      },\n      children: \"Go to Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1020,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1016,\n    columnNumber: 5\n  }, this);\n  const renderConnectStepHomeOrApp = () => {\n    // DiÄŸer uygulama adÄ±mlarÄ±\n    switch (step) {\n      case 'home':\n        return /*#__PURE__*/_jsxDEV(Home, {\n          setStep: setStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1033,\n          columnNumber: 22\n        }, this);\n      case 'privacy':\n        return /*#__PURE__*/_jsxDEV(PrivacyPolicy, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1035,\n          columnNumber: 22\n        }, this);\n      case 'quick_start':\n        // ðŸ‘ˆ YENÄ°\n        return /*#__PURE__*/_jsxDEV(QuickStart, {\n          setStep: setStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1037,\n          columnNumber: 22\n        }, this);\n      case 'terms':\n        return /*#__PURE__*/_jsxDEV(TermsAndConditions, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1039,\n          columnNumber: 22\n        }, this);\n      case 'connect':\n        return renderConnectStep();\n      case 'notion_connect':\n        return renderNotionConnectStep();\n      case 'pricing':\n        return /*#__PURE__*/_jsxDEV(Pricing, {\n          setStep: setStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1045,\n          columnNumber: 22\n        }, this);\n      case 'select':\n        return renderSelectStep();\n      case 'mapping':\n        return renderMappingStep();\n      case 'complete':\n        return renderCompleteStep();\n      case 'dashboard':\n        return /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1053,\n          columnNumber: 22\n        }, this);\n      case 'profile':\n        // YENÄ° EKLENTÄ°\n        return /*#__PURE__*/_jsxDEV(Profile, {\n          setStep: function (step) {\n            throw new Error('Function not implemented.');\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1055,\n          columnNumber: 24\n        }, this);\n      case 'faq':\n        return /*#__PURE__*/_jsxDEV(FAQPage, {\n          setStep: setStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1059,\n          columnNumber: 24\n        }, this);\n      case 'features':\n        // <-- YENÄ° CASE\n        return /*#__PURE__*/_jsxDEV(Features, {\n          setStep: setStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1061,\n          columnNumber: 24\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(HeaderComponent, {\n      setStep: setStep,\n      userEmail: userEmail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1071,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: renderConnectStepHomeOrApp()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1077,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FooterComponent, {\n      setStep: setStep\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1083,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1069,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"thhXyFjlkkcwS2OZWbltX9j913s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Dashboard","Home","PrivacyPolicy","TermsAndConditions","HeaderComponent","FooterComponent","Profile","Pricing","QuickStart","FAQPage","Features","jsxDEV","_jsxDEV","API_BASE_URL","getInitialStep","userId","hash","window","location","replace","App","_s","initialUserId","localStorage","getItem","initialStep","step","setStep","userEmail","setUserEmail","syncDirection","setSyncDirection","autoSyncToggle","setAutoSyncToggle","excelFiles","setExcelFiles","excelColumns","setExcelColumns","notionProperties","setNotionProperties","selectedExcelId","setSelectedExcelId","excelWorksheets","setExcelWorksheets","selectedWorksheetName","setSelectedWorksheetName","message","setMessage","setUserId","excelToNotionMappings","setExcelToNotionMappings","notionToExcelMappings","setNotionToExcelMappings","unmatchedColumns","setUnmatchedColumns","selectedColumnsToCreate","setSelectedColumnsToCreate","autoSyncColumns","setAutoSyncColumns","notionDbId","setNotionDbId","notionDatabases","setNotionDatabases","notionDatabasesLoading","setNotionDatabasesLoading","notionDatabasesError","setNotionDatabasesError","loggedIn","handleMappingChange","leftItemName","selectedRightItem","currentMappings","setMappings","newMapping","excel_column","notion_property","data_type","updatedMappings","filter","m","includes","cols","c","handleHashChange","newHash","addEventListener","removeEventListener","handleAutoSyncColumnChange","columnName","isChecked","prevCols","params","URLSearchParams","search","receivedUserId","get","notionAuthSuccess","notionAuthError","authSuccess","initializeApp","id","isNewLogin","setItem","hasNotionKey","checkNotionStatus","fetchExcelFiles","currentId","history","replaceState","pathname","fetch","then","res","ok","Error","data","json","email","console","warn","catch","err","error","storedUserId","idColumnName","isMappingStep","leftItems","rightItems","mappings","length","isIdMapped","some","toLowerCase","leftItem","find","item","name","autoMapTarget","fetchNotionDatabases","response","errorData","errorMsg","databases","fetchExcelWorksheets","fileId","currentUserId","worksheets","map","fetchExcelColumns","handleMicrosoftConnect","href","has_notion_key","files","worksheetName","columns","hasId","fetchNotionProperties","properties","notionPropNames","p","unmatched","col","prop","type","handleCreateColumnChange","colName","checked","prev","saveMappings","validMappings","trim","idMappingExists","method","headers","body","JSON","stringify","allSavedMappings","saved_mappings","startSync","detail","direction","_excelFiles$find","successMessage","cleanAutoSyncColumnsSet","Set","autoSyncMappingIds","cleanBackendName","has","autoSyncCreationData","user_id","parseInt","excel_file_id","excel_file_name","f","notion_database_id","interval_minutes","mapping_ids","excel_worksheet_name","columns_to_create","autoSyncRes","autoSyncData","e","toString","renderConnectStep","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","handleNotionConnect","renderNotionConnectStep","disabled","renderSelectStep","value","onChange","target","ws","htmlFor","db","slice","renderMappingStep","_mappings$find","_mappings$find2","mappableLeftItems","idMappingItem","style","color","idSelectedRight","isIDAutoSynced","backgroundColor","margin","textAlign","fontWeight","leftName","mapping","selectedRight","isAutoSynced","renderCompleteStep","marginLeft","renderConnectStepHomeOrApp","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback  } from 'react';\nimport './App.css';\nimport Dashboard from './AutoSyncDashboard';\nimport Home from './Home'; // Yeni Home bileÅŸenini import ediyoruz!\nimport PrivacyPolicy from './PrivacyPolicy';\nimport TermsAndConditions from './TermsAndConditions';\n// YENÄ° Ä°MPORTLAR\nimport HeaderComponent from './HeaderComponent'; \nimport FooterComponent from './FooterComponent'; \nimport Profile from './Profile';\nimport Pricing from './Pricing';\nimport QuickStart from './QuickStart'\nimport FAQPage from './FAQPage';\nimport Features from './Features';\n\n// 'home' adÄ±mÄ±nÄ± AppStep tÃ¼rÃ¼ne ekliyoruz\n// YENÄ° TÄ°P EKLENTÄ°LERÄ°: 'privacy' ve 'terms' eklendi\ntype AppStep = 'home' | 'connect' | 'notion_connect' | 'select' | 'mapping' | 'complete' | 'dashboard' | 'privacy' | 'terms' | 'profile' | 'pricing' | 'quick_start' | 'faq' | 'features';\ntype ExcelFile = { id: string; name: string };\ntype ExcelColumn = { name: string };\ntype NotionProperty = { name: string; type?: string };\ntype Mapping = { excel_column: string; notion_property: string; data_type: string };\ntype ExcelWorksheet = { name: string };\ntype NotionDatabase = { id: string; name: string }; \n\nconst API_BASE_URL = 'https://notixel-backend.onrender.com';\n\n\n\n\n\n\nconst getInitialStep = (userId: string | null): AppStep => {\n  // 1. URL'deki mevcut hash'i...\n  const hash = window.location.hash.replace('#', '');\n  if (hash && (hash === 'privacy' || hash === 'terms' || hash === 'faq' || hash === 'pricing' || hash === 'quick_start' || hash === 'features')) {\n      return hash as AppStep; // EÄŸer hash varsa ve eÅŸleÅŸiyorsa, o adÄ±mÄ± dÃ¶ndÃ¼r\n  }\n  \n  // ... (Geri kalan giriÅŸ kontrolÃ¼)\n  // VarsayÄ±lan olarak 'home' dÃ¶ndÃ¼rÃ¼r\n  return 'home';\n}\n\n\n\nfunction App() {\n  // BaÅŸlangÄ±Ã§ adÄ±mÄ±nÄ±, localStorage'daki user_id'ye gÃ¶re belirliyoruz.\n  const initialUserId = localStorage.getItem('user_id');\n  // ID varsa 'connect' adÄ±mÄ±nda baÅŸla, yoksa 'home' (giriÅŸ) sayfasÄ±nda baÅŸla.\n  const initialStep: AppStep = getInitialStep(initialUserId);\n  \n  const [step, setStep] = useState<AppStep>(getInitialStep(localStorage.getItem('user_id')));\n  const [userEmail, setUserEmail] = useState<string | null>(localStorage.getItem('user_email'));\n  const [syncDirection, setSyncDirection] = useState<'excel-to-notion' | 'notion-to-excel'>('excel-to-notion');\n  const [autoSyncToggle, setAutoSyncToggle] = useState(false);\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\n  const [excelColumns, setExcelColumns] = useState<ExcelColumn[]>([]);\n  const [notionProperties, setNotionProperties] = useState<NotionProperty[]>([]);\n  const [selectedExcelId, setSelectedExcelId] = useState<string>('');\n  const [excelWorksheets, setExcelWorksheets] = useState<ExcelWorksheet[]>([]); // Yeni\n  const [selectedWorksheetName, setSelectedWorksheetName] = useState<string>(''); // Yeni\n  \n  const [message, setMessage] = useState<string>('');\n  const [userId, setUserId] = useState<string | null>(initialUserId); // initialUserId'yi kullanÄ±yoruz\n\n  const [excelToNotionMappings, setExcelToNotionMappings] = useState<Mapping[]>([]);\n  const [notionToExcelMappings, setNotionToExcelMappings] = useState<Mapping[]>([]);\n  \n  const [unmatchedColumns, setUnmatchedColumns] = useState<string[]>([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState<string[]>([]);\n  \n  const [autoSyncColumns, setAutoSyncColumns] = useState<string[]>([]);\n  const [notionDbId, setNotionDbId] = useState<string | null>(null); \n  const [notionDatabases, setNotionDatabases] = useState<NotionDatabase[]>([]);\n  const [notionDatabasesLoading, setNotionDatabasesLoading] = useState<boolean>(false);\n  const [notionDatabasesError, setNotionDatabasesError] = useState<string | null>(null);\n  \n\n  const loggedIn = !!userId; // KullanÄ±cÄ± oturum aÃ§mÄ±ÅŸ mÄ±?\n\n  const handleMappingChange = useCallback((leftItemName: string, selectedRightItem: string) => {\n    // Mevcut mappings'i al\n    const currentMappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    const setMappings = syncDirection === 'excel-to-notion' ? setExcelToNotionMappings : setNotionToExcelMappings;\n    \n    // Yeni mapping objesi oluÅŸtur\n    const newMapping = {\n        excel_column: syncDirection === 'excel-to-notion' ? leftItemName : selectedRightItem,\n        notion_property: syncDirection === 'excel-to-notion' ? selectedRightItem : leftItemName,\n        data_type: 'Text', // Bu, varsayÄ±lan deÄŸerdir, Notion property tipine gÃ¶re deÄŸiÅŸtirilebilir\n    };\n    \n    // Var olan mapping'i bul ve gÃ¼ncelle veya yeni mapping'i ekle\n    const updatedMappings = currentMappings.filter(m => \n        syncDirection === 'excel-to-notion' \n            ? m.excel_column !== leftItemName \n            : m.notion_property !== leftItemName\n    );\n    \n    // EÄŸer \"EÅŸleÅŸtirme Yapma\" (boÅŸ deÄŸer) seÃ§ilmediyse ekle\n    if (selectedRightItem) {\n        setMappings([...updatedMappings, newMapping]);\n    } else {\n        // EÅŸleÅŸme kaldÄ±rÄ±ldÄ±ÄŸÄ±nda AutoSync'ten de kaldÄ±r\n        if (autoSyncColumns.includes(leftItemName)) {\n            setAutoSyncColumns(cols => cols.filter(c => c !== leftItemName));\n        }\n        setMappings(updatedMappings);\n    }\n\n}, [syncDirection, excelToNotionMappings, notionToExcelMappings, autoSyncColumns, setExcelToNotionMappings, setNotionToExcelMappings, setAutoSyncColumns]);\n\n\nuseEffect(() => {\n    const handleHashChange = () => {\n        // Hash'i alÄ±p baÅŸÄ±ndaki '#' iÅŸaretini kaldÄ±r\n        const newHash = window.location.hash.replace('#', '');\n        \n        // AppStep tipindeki tÃ¼m geÃ§erli adÄ±mlarÄ± kontrol et\n        if (newHash && (newHash === 'privacy' || newHash === 'terms' || newHash === 'faq' || newHash === 'pricing' || newHash === 'quick_start' || newHash === 'features' || newHash === 'home' || newHash === 'connect' || newHash === 'dashboard' || newHash === 'profile')) {\n            setStep(newHash as AppStep);\n        } else if (!newHash) {\n            // EÄŸer hash boÅŸaltÄ±lÄ±rsa, ana sayfaya dÃ¶n\n            setStep('home');\n        }\n    };\n\n    // Dinleyiciyi kaydet\n    window.addEventListener('hashchange', handleHashChange);\n    \n    // Temizleme fonksiyonu: BileÅŸen kaldÄ±rÄ±ldÄ±ÄŸÄ±nda dinleyiciyi kaldÄ±r\n    return () => {\n        window.removeEventListener('hashchange', handleHashChange);\n    };\n}, [setStep]); // setStep deÄŸiÅŸtiÄŸinde yeniden baÄŸlanmalÄ±\n\n\n// 2. Auto Sync SÃ¼tun SeÃ§imini YÃ¶neten Fonksiyon\nconst handleAutoSyncColumnChange = useCallback((columnName: string, isChecked: boolean) => {\n    setAutoSyncColumns(prevCols => {\n        if (isChecked && !prevCols.includes(columnName)) {\n            return [...prevCols, columnName];\n        } else if (!isChecked && prevCols.includes(columnName)) {\n            return prevCols.filter(c => c !== columnName);\n        }\n        return prevCols;\n    });\n}, [setAutoSyncColumns]);\n  \n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const receivedUserId = params.get('user_id');\n    const notionAuthSuccess = params.get('notion_auth_success') === 'true';\n    const notionAuthError = params.get('notion_auth_error') === 'true';\n    const authSuccess = params.get('auth_success') === 'true';\n\n    // Helper: KullanÄ±cÄ± verilerini kaydeder ve Notion baÄŸlantÄ±sÄ±nÄ± kontrol eder.\n    const initializeApp = async (id: string, isNewLogin: boolean) => {\n        setUserId(id);\n        localStorage.setItem('user_id', id);\n\n        const hasNotionKey = await checkNotionStatus(id);\n\n        if (!hasNotionKey) {\n            setStep('notion_connect');\n            if (isNewLogin) setMessage('Microsoft connection successful. Now connect your Notion account.');\n        } else {\n            setStep('select');\n            fetchExcelFiles(id);\n            if (isNewLogin) setMessage('Connections complete! Select your Excel file.');\n        }\n    };\n    \n    // --- 1. Notion Callback Handling (Notion'dan dÃ¶ndÃ¼ÄŸÃ¼nde) ---\n    if (notionAuthSuccess) {\n        const currentId = localStorage.getItem('user_id');\n        if (currentId) {\n            setStep('pricing');\n            fetchExcelFiles(currentId);\n            setMessage('Notion connection successful! Now select a plan.');\n        } else {\n            setMessage('Error: Notion connection successful but user ID is missing.');\n            setStep('home');\n        }\n        window.history.replaceState(null, '', window.location.pathname + window.location.hash);\n        return;\n    }\n   \n    \n    if (notionAuthError) {\n         setMessage(`Notion connection error: ${params.get('message') || 'Unknown error.'}`);\n         setStep('notion_connect'); \n         window.history.replaceState(null, '', window.location.pathname);\n         return;\n    }\n\n    // --- 2. Microsoft Callback Handling (Microsoft'tan dÃ¶ndÃ¼ÄŸÃ¼nde) ---\n    if (authSuccess && receivedUserId) {\n    initializeApp(receivedUserId, true);\n\n    // ðŸ’¡ KullanÄ±cÄ± bilgilerini backend'den al (Ã¶rnek endpoint)\n    fetch(`${API_BASE_URL}/get-user?user_id=${receivedUserId}`)\n        .then(async (res) => {\n            if (!res.ok) throw new Error(\"User information could not be retrieved.\");\n            const data = await res.json();\n\n            // E-posta bilgisi geldiyse kaydet\n            if (data.email) {\n                localStorage.setItem(\"user_email\", data.email);\n                setUserEmail(data.email);\n            } else {\n                console.warn(\"Email information returned empty:\", data);\n            }\n        })\n        .catch((err) => console.error(\"User information could not be retrieved:\", err));\n\n    window.history.replaceState(null, '', window.location.pathname);\n    return;\n    }\n    \n    // --- 3. Persistent Session / Initial Load Handling ---\n    const storedUserId = localStorage.getItem('user_id');\n    // EÄŸer localStorage'da ID varsa ve mevcut adÄ±m 'home' deÄŸilse (yani oturum aÃ§ma akÄ±ÅŸÄ±na girmiÅŸse)\n    if (storedUserId && step !== 'home') {\n         initializeApp(storedUserId, false);\n         return;\n    }\n\n    // --- 4. Default: Show Home Page ---\n    // EÄŸer hiÃ§bir ÅŸey tetiklenmediyse ve ID yoksa, Home'u gÃ¶ster.\n    if (!storedUserId) {\n        setStep('home');\n    }\n    \n  }, []); \n\n  useEffect(() => {\n    // ID sÃ¼tun adÄ±nÄ± kÃ¼Ã§Ã¼k harfle kontrol ediyoruz\n    const idColumnName = 'id'; \n    const isMappingStep = step === 'mapping';\n\n    // ðŸš¨ DÃ¼zeltme 1: leftItems ve rightItems'Ä± useEffect iÃ§inde tanÄ±mla\n    const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n    const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    \n    // 1. OTOMATÄ°K ID EÅžLEÅžTÄ°RME KONTROLÃœ\n    if (isMappingStep && excelColumns.length > 0 && notionProperties.length > 0) {\n        \n        // ID sÃ¼tununun zaten eÅŸlenip eÅŸlenmediÄŸini kontrol et.\n        const isIdMapped = mappings.some(m => \n            syncDirection === 'excel-to-notion' \n                ? m.excel_column.toLowerCase() === idColumnName \n                : m.notion_property.toLowerCase() === idColumnName\n        );\n        \n        if (!isIdMapped) {\n            const leftItem = leftItems.find(item => item.name.toLowerCase() === idColumnName);\n            const autoMapTarget = rightItems.find(item => item.name.toLowerCase() === idColumnName);\n            \n            // Hem sol hem saÄŸ tarafta \"ID\" sÃ¼tunu varsa, otomatik eÅŸleÅŸtirmeyi yap\n            if (leftItem && autoMapTarget) {\n                handleMappingChange(leftItem.name, autoMapTarget.name);\n                setMessage('ID column matched automatically.');\n            }\n        }\n    }\n\n    // 2. ID SÃœTUNU OTOMATÄ°K SYNC MANTIK\n    // Global AutoSync aÃ§Ä±ldÄ±ÄŸÄ±nda ID'yi otomatik sync listesine ekle.\n    if (isMappingStep) {\n        if (autoSyncToggle && !autoSyncColumns.includes(idColumnName)) {\n            // ID'yi otomatik sync listesine ekle\n            handleAutoSyncColumnChange(idColumnName, true);\n        } else if (!autoSyncToggle && autoSyncColumns.includes(idColumnName)) {\n            // ID'yi otomatik sync listesinden Ã§Ä±kar (Global kapatÄ±ldÄ±)\n            handleAutoSyncColumnChange(idColumnName, false);\n        }\n    }\n\n\n// ðŸš¨ DÃœZELTME 2: Dependency array'i dÃ¼zeltildi. setMessage kaldÄ±rÄ±ldÄ±.\n}, [\n    step, \n    syncDirection, \n    excelColumns, \n    notionProperties, \n    autoSyncToggle, \n    autoSyncColumns,\n    excelToNotionMappings,\n    notionToExcelMappings,\n    handleMappingChange, // ArtÄ±k useCallback ile stabil!\n    handleAutoSyncColumnChange, // ArtÄ±k useCallback ile stabil!\n    setMessage // ðŸš¨ setMessage bir state setter'dÄ±r ve dependency array'e eklenmemelidir.\n]);\n\n\nconst fetchNotionDatabases = useCallback(async (userId: string) => {\n    setNotionDatabasesLoading(true);\n    setNotionDatabasesError(null);\n    try {\n        // Yeni backend endpoint'ini Ã§aÄŸÄ±rÄ±yoruz\n        const response = await fetch(`${API_BASE_URL}/get-notion-databases?user_id=${userId}`);\n        \n        if (!response.ok) {\n            const errorData = await response.json();\n            // Backend'den gelen hata mesajÄ±nÄ± kullanÄ±yoruz.\n            const errorMsg = errorData.error || 'Databases could not be loaded.'; \n            throw new Error(errorMsg);\n        }\n        \n        const data = await response.json();\n        const databases: NotionDatabase[] = data.databases || [];\n        setNotionDatabases(databases);\n        \n        // VeritabanÄ± varsa ve henÃ¼z seÃ§ili deÄŸilse, ilkini varsayÄ±lan olarak seÃ§\n        if (databases.length > 0 && !notionDbId) {\n            setNotionDbId(databases[0].id);\n        }\n        \n    } catch (err) {\n        // KullanÄ±cÄ±ya gÃ¶sterilecek hata mesajÄ±\n        setNotionDatabasesError(`Notion databases could not be retrieved. Please check your Notion integration settings. Error: ${err instanceof Error ? err.message : 'Unknown Error'}`);\n    } finally {\n        setNotionDatabasesLoading(false);\n    }\n}, [notionDbId]); // Dependency olarak notinDbId ve setNotionDbId'yi (implicit) ekliyoruz.\n\n// ðŸ”‘ YENÄ°: Notion veritabanlarÄ±nÄ± yÃ¼klemek iÃ§in useEffect\nuseEffect(() => {\n    // AdÄ±m 'select' olduÄŸunda, kullanÄ±cÄ± ID'si varsa ve veritabanlarÄ± henÃ¼z yÃ¼klenmemiÅŸse/yÃ¼kleniyorsa yÃ¼klemeyi baÅŸlat\n    if (step === 'select' && userId && notionDatabases.length === 0 && !notionDatabasesLoading && !notionDatabasesError) {\n        fetchNotionDatabases(userId);\n    }\n    // NOT: fetchNotionDatabases useCallback iÃ§inde olduÄŸu iÃ§in buraya eklemiyoruz.\n}, [userId, step, notionDatabases.length, notionDatabasesLoading, notionDatabasesError, fetchNotionDatabases]); // fetchNotionDatabases dependency'si eklendi\n\n\n  // ... (TÃ¼m fetch ve handler fonksiyonlarÄ± burada devam eder)\n\n  // 1. Yeni Sayfa Ã‡ekme Fonksiyonu\n  const fetchExcelWorksheets = async (fileId: string, currentUserId: string) => {\n    try {\n      // Backend'deki yeni endpoint'i Ã§aÄŸÄ±rÄ±n\n      const res = await fetch(`${API_BASE_URL}/get-excel-worksheets?excel_file_id=${fileId}&user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) {\n        // Data'nÄ±n [\"Sayfa1\", \"Sayfa2\"] formatÄ±nda geldiÄŸini varsayÄ±yoruz\n        const worksheets = data.worksheets.map((name: string) => ({ name }));\n        setExcelWorksheets(worksheets);\n\n        if (worksheets.length === 1) {\n            // Tek sayfa varsa otomatik seÃ§ ve sÃ¼tunlarÄ± Ã§ek\n            setSelectedWorksheetName(worksheets[0].name);\n            fetchExcelColumns(fileId, worksheets[0].name);\n        } else {\n             // SÃ¼tunlarÄ± temizle ve kullanÄ±cÄ±nÄ±n seÃ§mesini bekle\n             setExcelColumns([]);\n        }\n\n      } else setMessage(`Excel sheets could not be retrieved: ${data.error}`);\n    } catch {\n      setMessage('A network error occurred while retrieving Excel sheets.');\n    }\n  };\n\n\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n\n  const checkNotionStatus = async (currentUserId: string): Promise<boolean> => {\n    // DEV MODE: Notion baÄŸlantÄ±sÄ± kontrolÃ¼ atlanÄ±yor.\n    // return true; // EÄŸer test amaÃ§lÄ± Notion baÄŸlantÄ±sÄ±nÄ± atlamak isterseniz\n    try {\n        const res = await fetch(`${API_BASE_URL}/check-notion-status?user_id=${currentUserId}`);\n        const data = await res.json();\n        if (res.ok) {\n            // Backend'den { has_notion_key: true/false } ÅŸeklinde bir yanÄ±t bekliyoruz.\n            return data.has_notion_key;\n        }\n        return false;\n    } catch {\n        setMessage('A network error occurred during the connection check.');\n        return false;\n    }\n  };\n\n  const fetchExcelFiles = async (currentUserId: string) => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await res.json();\n      if (res.ok) setExcelFiles(data.files);\n      else setMessage(`Excel files could not be retrieved: ${data.error}`);\n    } catch {\n      setMessage('A network error occurred while retrieving Excel files.');\n    }\n  };\n\n  const fetchExcelColumns = async (fileId: string, worksheetName: string) => {\n    if (!userId || !worksheetName) return; \n    try {\n      const res = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&worksheet_name=${worksheetName}&user_id=${userId}`);\n      const data = await res.json();\n      if (res.ok) {\n        const columns = data.columns.map((name: string) => ({ name }));\n        const hasId = columns.some((c: ExcelColumn) => c.name.toLowerCase() === 'id');\n        if (!hasId) {\n          setMessage('The \"ID\" column is not found, select another file.');\n          setExcelColumns([]);\n          setExcelToNotionMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setExcelToNotionMappings(columns.map((c: ExcelColumn) => ({\n          excel_column: c.name,\n          notion_property: '',\n          data_type: ''\n        })));\n      } else setMessage(`Excel columns could not be retrieved: ${data.error}`);\n    } catch {\n      setMessage('A network error occurred while retrieving Excel columns.');\n    }\n  };\n\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Please select a Notion Database.');\n      return;\n    }\n    try {\n      const res = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await res.json();\n      if (res.ok) {\n        setNotionProperties(data.properties);\n\n        const notionPropNames = data.properties.map((p: NotionProperty) => p.name.toLowerCase());\n        const unmatched = excelColumns\n          .filter(col => !notionPropNames.includes(col.name.toLowerCase()) && col.name.toLowerCase() !== 'id')\n          .map(col => col.name);\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate([]);\n\n        setNotionToExcelMappings(data.properties.map((prop: NotionProperty) => ({\n          excel_column: '',\n          notion_property: prop.name,\n          data_type: prop.type || ''\n        })));\n\n        setStep('mapping');\n      } else setMessage(`Notion properties could not be retrieved: ${data.error}`);\n    } catch {\n      setMessage('A network error occurred while retrieving Notion properties.');\n    }\n  };\n\n  \n\n  const handleCreateColumnChange = (colName: string, checked: boolean) => {\n    setSelectedColumnsToCreate(prev =>\n      checked ? [...prev, colName] : prev.filter(c => c !== colName)\n    );\n  };\n\n  \n  \n\n  \n  \n\nconst saveMappings = async () => {\n    if (!userId) { setMessage('User ID not found.'); return; }\n\n    const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n    const validMappings = mappings.filter(m =>\n        syncDirection === 'excel-to-notion' ? m.notion_property.trim() !== '' : m.excel_column.trim() !== ''\n    );\n    \n    if (validMappings.length === 0) { setMessage(\"Select at least one column.\"); return; }\n    \n    const idMappingExists = validMappings.some(m => \n        (syncDirection === 'excel-to-notion' && m.excel_column.toLowerCase() === 'id') ||\n        (syncDirection === 'notion-to-excel' && m.notion_property.toLowerCase() === 'id')\n    );\n    \n    if (!idMappingExists) {\n        setMessage(\"Matching the 'ID' column is mandatory for synchronization.\");\n        return;\n    }\n\n    try {\n        const res = await fetch(`${API_BASE_URL}/save-mapping?user_id=${userId}`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(validMappings),\n        });\n        \n        const data = await res.json(); \n        \n        if (res.ok) {\n            const allSavedMappings: { id: number, excel_column: string, notion_property: string }[] = data.saved_mappings || []; \n            \n            setMessage(\"Matches saved successfully. Starting synchronization...\");\n            startSync(syncDirection, allSavedMappings); \n        } else {\n            const err = data;\n            setMessage(`Matches could not be saved: ${err.error || err.detail}`);\n        }\n    } catch {\n        setMessage('A network error occurred while saving the matches.');\n    }\n};\n\n\nconst startSync = async (\n    direction: 'excel-to-notion' | 'notion-to-excel',\n    allSavedMappings: { id: number, excel_column: string, notion_property: string }[] \n  ) => {\n    if (!userId) {\n        setMessage('User ID not found.');\n        return;\n    }\n\n    let successMessage = 'Synchronization completed successfully.';\n\n    const cleanAutoSyncColumnsSet = new Set(\n        autoSyncColumns.map(name => name.toLowerCase().trim())\n    );\n\n    const autoSyncMappingIds = allSavedMappings\n        .filter(m => {\n            const columnName = direction === 'excel-to-notion' ? m.excel_column : m.notion_property;\n            const cleanBackendName = columnName.toLowerCase().trim();\n            \n            return cleanAutoSyncColumnsSet.has(cleanBackendName);\n        })\n        .map(m => m.id);\n\n\n    const autoSyncCreationData = {\n        user_id: parseInt(userId, 10),\n        excel_file_id: selectedExcelId,\n        excel_file_name: excelFiles.find(f => f.id === selectedExcelId)?.name || '',\n        notion_database_id: notionDbId,\n        direction: direction,\n        interval_minutes: 60,\n        mapping_ids: autoSyncMappingIds,\n        excel_worksheet_name: selectedWorksheetName, \n    };\n    \n    try {\n        // 1. MANUEL SENKRONÄ°ZASYONU BAÅžLAT\n        const res = await fetch(`${API_BASE_URL}/sync/${direction}`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                 excel_file_id: selectedExcelId,\n                 notion_database_id: notionDbId,\n                 user_id: parseInt(userId, 10),\n                 excel_worksheet_name: selectedWorksheetName,\n                 columns_to_create:\n                     direction === 'excel-to-notion' ? selectedColumnsToCreate : [],\n            }),\n        });\n\n        if (!res.ok) {\n            const err = await res.json();\n            throw new Error(`Manual Synchronization failed: ${err.detail || err.error}`);\n        }\n\n        // 2. OTOMATÄ°K SYNC KONFÄ°GÃœRASYONUNU OLUÅžTUR\n        if (autoSyncToggle && autoSyncMappingIds.length > 0) { \n            const autoSyncRes = await fetch(`${API_BASE_URL}/autosync/create`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(autoSyncCreationData),\n            });\n\n            const autoSyncData = await autoSyncRes.json();\n\n            if (!autoSyncRes.ok) {\n                successMessage += ` However, Automatic Sync could not be configured.: ${autoSyncData.detail || 'Unknown Error'}`;\n            } else {\n                successMessage = `Manual synchronization is complete and Automatic Sync is configured. (${autoSyncData.message})`;\n            }\n        }\n\n        setStep('complete');\n        setMessage(successMessage);\n    } catch (e: any) {\n        setMessage(`Error During Synchronization Process: ${e.message || e.toString()}`);\n    }\n};\n\n\n\n\n\n\n  const renderConnectStep = () => (\n    <div className=\"step-container\">\n        <h2>Connect Microsoft Account</h2>\n        <p>You must grant permission to access your OneDrive/Excel account to continue.</p>\n        <button className=\"primary-btn\" onClick={handleMicrosoftConnect}>Connect Microsoft Account</button>\n    </div>\n  );\n\n  const handleNotionConnect = () => {\n    // Backend'deki /connect/notion endpoint'ine yÃ¶nlendiriyoruz\n    window.location.href = `${API_BASE_URL}/connect/notion?user_id=${userId}`; \n  };\n\n\n  const renderNotionConnectStep = () => (\n      <div className=\"step-container\">\n          <h2>Connect Notion Account</h2>\n          <p>Synchronization requires you to connect your Notion API key. Please ensure you have granted permission for your correct databases.</p>\n          <button className=\"primary-btn\" onClick={handleNotionConnect} disabled={!userId}>\n              Connect Notion Account\n          </button>\n      </div>\n  );\n\n  \n  const renderSelectStep = () => (\n\n      <div className=\"step-container\">\n\n          <h2>File Selection</h2>\n\n          <p className=\"step-description\">Please select the Excel file/sheet and Notion Database you wish to synchronize.</p>\n\n\n\n          <div className=\"select-step-grid\">\n\n              {/* 1. EXCEL DOSYA SEÃ‡Ä°M KARTI (DEÄžÄ°ÅžMEDÄ°) */}\n\n              <div className={`selection-card ${selectedExcelId ? 'is-selected' : ''}`}>\n\n                  <h3>Excel File</h3>\n\n                  <div className=\"field\">\n\n                      <label>Excel File:</label>\n\n                      <select \n\n                          value={selectedExcelId} \n\n                          onChange={e => { \n\n                              setSelectedExcelId(e.target.value); \n\n                              if (e.target.value) {\n\n                                  // Dosya seÃ§ildiÄŸinde sayfalarÄ± getir\n\n                                  fetchExcelWorksheets(e.target.value, userId!);\n\n                                  setSelectedWorksheetName(''); \n\n                              }\n\n                          }}\n\n                      >\n\n                          <option value=\"\">Select File...</option>\n\n                          {excelFiles.map(f => <option key={f.id} value={f.id}>{f.name}</option>)}\n\n                      </select>\n\n                  </div>\n\n              </div>\n\n              \n\n              {/* 2. EXCEL Ã‡ALIÅžMA SAYFASI SEÃ‡Ä°M KARTI (DEÄžÄ°ÅžMEDÄ°) */}\n\n              <div className={`selection-card ${selectedWorksheetName ? 'is-selected' : ''}`}>\n\n                  <h3>Excel Sheet</h3>\n\n                  <p className=\"card-hint\">Select which Sheet you want to sync.</p>\n\n                  {selectedExcelId ? (\n\n                      excelWorksheets.length > 0 ? (\n\n                          <div className=\"field\">\n\n                              <label>Select Sheet</label>\n\n                              <select \n\n                                  value={selectedWorksheetName} \n\n                                  onChange={e => { \n\n                                      setSelectedWorksheetName(e.target.value); \n\n                                      // Sayfa seÃ§ildiÄŸinde sÃ¼tunlarÄ± getir\n\n                                      fetchExcelColumns(selectedExcelId, e.target.value);\n\n                                  }}\n\n                              >\n\n                                  <option value=\"\">Select Sheet...</option>\n\n                                  {excelWorksheets.map(ws => <option key={ws.name} value={ws.name}>{ws.name}</option>)}\n\n                              </select>\n\n                          </div>\n\n                      ) : (\n\n                          // Loading state iÃ§in bir kontrol ekledik, eÄŸer yÃ¼kleme state'i mevcut deÄŸilse bu ÅŸekilde kalabilir.\n                          <p className=\"loading-state\">Sheets are loading...</p> \n\n                      )\n\n                  ) : (\n\n                      <p className=\"disabled-state\">Select the Excel file first.</p>\n\n                  )}\n\n              </div>\n\n\n\n              {/* 3. NOTION VERÄ°TABANI DROPDOWN KARTI (YENÄ°) */}\n\n              <div className={`selection-card notion-card ${notionDbId ? 'is-selected' : ''}`}>\n\n                  <h3>Notion Database</h3>\n\n                  <p className=\"card-hint\">Select the database for synchronization.</p>\n\n                  \n                  {/* Hata MesajÄ± */}\n                  {notionDatabasesError && <p className=\"message error-message\">{notionDatabasesError}</p>}\n\n\n                  <div className=\"field\">\n\n                      <label htmlFor=\"notion-db-select\">Notion Database:</label>\n\n                      \n                      {notionDatabasesLoading ? (\n                            <p className=\"loading-state\">Notion databases are loading...</p>\n                        ) : notionDatabases.length > 0 ? (\n                            // KRÄ°TÄ°K DEÄžÄ°ÅžÄ°KLÄ°K: Dropdown MenÃ¼\n                            <select\n                                id=\"notion-db-select\"\n                                // notionDbId state'inizin adÄ±nÄ± kullandÄ±k\n                                value={notionDbId || ''} \n                                onChange={(e) => setNotionDbId(e.target.value)}\n                                className=\"input-select\" \n                                disabled={notionDatabasesLoading}\n                            >\n                                <option value=\"\" disabled>Select a database</option>\n                                \n                                {notionDatabases.map(db => (\n                                    <option key={db.id} value={db.id}>\n                                        {db.name} (ID: ...{db.id.slice(-4)})\n                                    </option>\n                                ))}\n                            </select>\n                        ) : (\n                            // VeritabanÄ± bulunamazsa uyarÄ±\n                            !notionDatabasesError && (\n                                <p className=\"disabled-state\">\n                                    No database accessible by NotiXel was found. Please make sure you have given permission in your Notion database with the NotiXel integration.\n                                </p>\n                            )\n                        )}\n                  </div>\n              </div>\n          </div>\n\n\n\n          {/* Aksiyon Butonu (DEÄžÄ°ÅžMEDÄ°) */}\n\n          <div className=\"step-actions\">\n\n              <button \n\n                  className=\"btn btn-primary btn-lg\" \n\n                  onClick={fetchNotionProperties} \n\n                  disabled={!selectedExcelId || !selectedWorksheetName || !notionDbId}>\n\n                  Proceed to Mapping\n\n              </button>\n\n          </div>\n\n      </div>\n\n  );\n\n  \n  \n  const renderMappingStep = () => {\n      // `leftItems` ve `idMappingItem`'Ä± burada tÃ¼retiyoruz\n      const leftItems = syncDirection === 'excel-to-notion' ? excelColumns : notionProperties;\n      const rightItems = syncDirection === 'excel-to-notion' ? notionProperties : excelColumns;\n      const mappings = syncDirection === 'excel-to-notion' ? excelToNotionMappings : notionToExcelMappings;\n\n      // ID sÃ¼tununu dÄ±ÅŸarÄ±da tutarak haritalama listesini oluÅŸtur\n      const mappableLeftItems = leftItems.filter(item => item.name.toLowerCase() !== 'id');\n      const idMappingItem = leftItems.find(item => item.name.toLowerCase() === 'id');\n\n\n      // EÄŸer ID sÃ¼tunu bulunamÄ±yorsa veya mapping yoksa bir uyarÄ± gÃ¶ster\n      if (!idMappingItem) {\n          return (\n              <div className=\"step-container\">\n                  <h2 style={{color: 'red'}}>ERROR!</h2>\n                  <p>An \"ID\" column in the Excel file is mandatory for synchronization to work. Please check your file or select a new one.</p>\n                  <button className=\"secondary-btn\" onClick={() => setStep('select')}>Go Back</button>\n              </div>\n          );\n      }\n      \n      // ID sÃ¼tunu iÃ§in Notion tarafÄ±nda eÅŸleÅŸme aranacak\n      const idSelectedRight = \n          idMappingItem ? (syncDirection === 'excel-to-notion' \n              ? mappings.find(m => m.excel_column.toLowerCase() === 'id')?.notion_property \n              : mappings.find(m => m.notion_property.toLowerCase() === 'id')?.excel_column\n          ) : '';\n      \n      // ðŸš¨ Hata DÃ¼zeltmesi: setMessage Ã§aÄŸrÄ±sÄ± buradan kaldÄ±rÄ±ldÄ±.\n\n      // EÄŸer ID seÃ§iliyse VE global sync aÃ§Ä±ksa, ID de otomatik sync'e dahildir.\n      const isIDAutoSynced = !!idSelectedRight && autoSyncToggle;\n\n\n      return (\n          <div className=\"step-container\">\n              <h2>Match Collumns</h2>\n\n              {/* YÃ–N VE GLOBAL AYARLAR */}\n              <div className=\"mapping-control-panel\">\n                  <div className=\"toggle-buttons\">\n                      <button\n                          className={`btn-toggle ${syncDirection === 'excel-to-notion' ? 'active' : ''}`}\n                          onClick={() => setSyncDirection('excel-to-notion')}\n                      >\n                          Excel <span className=\"arrow\">â†’</span> Notion\n                      </button>\n                      <button\n                          className={`btn-toggle ${syncDirection === 'notion-to-excel' ? 'active' : ''}`}\n                          onClick={() => setSyncDirection('notion-to-excel')}\n                      >\n                          Notion <span className=\"arrow\">â†’</span> Excel\n                      </button>\n                  </div>\n\n                  <label className=\"auto-sync-toggle-global\">\n                      Activate Automatic Sync\n                      <input\n                          type=\"checkbox\"\n                          checked={autoSyncToggle}\n                          // useEffect hook'u bu Ã§aÄŸrÄ±dan sonra ID'yi autoSyncColumns'a ekleyecektir.\n                          onChange={e => setAutoSyncToggle(e.target.checked)} \n                      />\n                  </label>\n              </div>\n              {/* YÃ–N VE GLOBAL AYARLAR SONU */}\n              \n              <p className=\"step-description\">\n                  Match each column you want to synchronize with the corresponding column on the other side.\n              </p>\n\n              <div className=\"mapping-list-header\">\n                  <div className=\"mapping-list-left-title\">{syncDirection === 'excel-to-notion' ? 'EXCEL SÃœTUNLARI' : 'NOTION Ã–ZELLÄ°KLERÄ°'}</div>\n                  <div className=\"mapping-list-right-title\">MATCHED COLUMNS / PROPERTIES</div>\n                  <div className=\"mapping-list-autosync-title\">AUTOMATIC SYNC</div>\n              </div>\n\n              <div className=\"mapping-list-body\">\n                  {/* 1. KRÄ°TÄ°K ID SÃœTUNU (Zorunlu ve Sabit) */}\n                  <div className=\"mapping-row mapping-row-critical\">\n                      <div className=\"mapping-left\">ID (Critical Match)</div>\n                      <div className=\"mapping-right\">\n                          <select\n                              value={idSelectedRight || ''}\n                              onChange={e => handleMappingChange(idMappingItem.name, e.target.value)}\n                              // ID eÅŸleÅŸmesi her zaman olmalÄ±\n                              style={{ backgroundColor: idSelectedRight ? '#e6fff0' : '#ffe6e6' }}\n                          >\n                              <option value=\"\">Choose...</option>\n                              {rightItems.map(p => (\n                                  <option key={p.name} value={p.name}>\n                                      {p.name}\n                                      {/* Notion tarafÄ±nda tip gÃ¶sterimi eklendi */}\n                                      {syncDirection === 'excel-to-notion' && 'type' in p && p.type\n                                                  ? ` (${p.type})`\n                                                  : ''} \n                                  </option>\n                              ))}\n                          </select>\n                          {!idSelectedRight && <p className=\"info-text\" style={{margin: '5px 0 0 0', textAlign: 'left', color: '#dc3545'}}>CRITICAL: You must match the ID column.</p>}\n                      </div>\n                      {/* ðŸš¨ GÃœNCELLENMÄ°Åž ID AUTOSYNC KISMI: Global toggle'a baÄŸlÄ± */}\n                      <div className=\"mapping-autosync\">\n                          {/* ID seÃ§iliyse ve global sync aÃ§Ä±ksa: Otomatik aÃ§Ä±k */}\n                          {isIDAutoSynced ? (\n                              <span style={{ color: '#28a745', fontWeight: 'bold' }}>On (Mandatory)</span>\n                          ) : (\n                              // Global Sync kapalÄ±ysa veya ID seÃ§ili deÄŸilse: UyarÄ±\n                              <span className=\"info-text\">\n                                  {autoSyncToggle ? 'Waiting for mapping' : 'Global Closed'}\n                              </span>\n                          )}\n                      </div>\n                  </div>\n\n                  {/* 2. DÄ°ÄžER EÅžLEÅžTÄ°RMELER */}\n                  {mappableLeftItems.map(item => {\n                      const leftName = item.name;\n                      const mapping = mappings.find(m => \n                          syncDirection === 'excel-to-notion' \n                              ? m.excel_column === leftName \n                              : m.notion_property === leftName\n                      ) || { excel_column: '', notion_property: '', data_type: '' };\n                      \n                      const selectedRight =\n                          syncDirection === 'excel-to-notion' ? mapping.notion_property : mapping.excel_column;\n                      \n                      // ID zaten ayrÄ± bir bÃ¶lÃ¼mde iÅŸlendiÄŸi iÃ§in burada tekrar kontrol etmiyoruz\n                      const isAutoSynced = autoSyncColumns.includes(leftName); \n                      \n                      return (\n                          <div className={`mapping-row ${selectedRight ? 'is-mapped' : ''}`} key={leftName}>\n                              <div className=\"mapping-left\">{leftName}</div>\n                              <div className=\"mapping-right\">\n                                  <select\n                                      value={selectedRight || ''}\n                                      onChange={e => handleMappingChange(leftName, e.target.value)}\n                                  >\n                                      <option value=\"\">Do Not Map</option>\n                                      {rightItems.map(p => (\n                                          <option key={p.name} value={p.name}>\n                                              {syncDirection === 'excel-to-notion' && 'type' in p && p.type\n                                                  ? `${p.name} (${p.type})`\n                                                  : p.name}\n                                          </option>\n                                      ))}\n                                  </select>\n                              </div>\n                              <div className=\"mapping-autosync\">\n                                  <label className=\"auto-sync-checkbox-label\">\n                                      <input\n                                          type=\"checkbox\"\n                                          disabled={!autoSyncToggle || !selectedRight} // Global kapalÄ±ysa veya eÅŸleÅŸme yapÄ±lmadÄ±ysa devre dÄ±ÅŸÄ±\n                                          checked={isAutoSynced}\n                                          onChange={e => handleAutoSyncColumnChange(leftName, e.target.checked)}\n                                      />\n                                      {isAutoSynced ? 'AÃ§Ä±k' : 'KapalÄ±'}\n                                  </label>\n                              </div>\n                          </div>\n                      );\n                  })}\n              </div>\n              \n              {/* 3. NOTION'DA OLMAYAN SÃœTUNLARI OLUÅžTURMA */}\n              {syncDirection === 'excel-to-notion' && unmatchedColumns.length > 0 && (\n                  <div className=\"unmatched-columns-card\">\n                      <h3>Excel Columns Not In Notion</h3>\n                      <p>Mark these columns to add them as new <strong> Rich Text </strong> properties in Notion:</p>\n                      <div className=\"column-creation-options\">\n                          {unmatchedColumns.map(c => (\n                              <label key={c} className=\"checkbox-label\">\n                                  <input\n                                      type=\"checkbox\"\n                                      checked={selectedColumnsToCreate.includes(c)}\n                                      onChange={e => handleCreateColumnChange(c, e.target.checked)}\n                                  />\n                                  {c}\n                              </label>\n                          ))}\n                      </div>\n                  </div>\n              )}\n\n              {/* 4. SENKRONÄ°ZASYONU BAÅžLAT BUTONU */}\n              <div className=\"sync-buttons step-actions\">\n                  <button\n                      className=\"btn btn-primary btn-lg\"\n                      onClick={saveMappings}\n                      disabled={!idSelectedRight}\n                  >\n                      Start Synchronization\n                  </button>\n              </div>\n          </div>\n      );\n  };\n\n  const renderCompleteStep = () => (\n    <div className=\"step-container\">\n      <h2>Sync Complete!</h2>\n      <p>{message}</p>\n      <button className=\"primary-btn\" onClick={() => setStep('select')}>New Synchronization</button>\n      <button className=\"secondary-btn\" onClick={() => setStep('dashboard')} style={{marginLeft: '10px'}}>Go to Dashboard</button>\n    </div>\n  );\n  \n\n  \n\n  const renderConnectStepHomeOrApp = () => {\n      \n\n      // DiÄŸer uygulama adÄ±mlarÄ±\n      switch (step) {\n          case 'home':\n              return <Home setStep={setStep} />;\n          case 'privacy':\n              return <PrivacyPolicy />;\n          case 'quick_start': // ðŸ‘ˆ YENÄ°\n              return <QuickStart setStep={setStep} />;     \n          case 'terms':\n              return <TermsAndConditions />;    \n          case 'connect':\n              return renderConnectStep();\n          case 'notion_connect':\n              return renderNotionConnectStep();\n          case 'pricing': \n              return <Pricing setStep={setStep} />;    \n          case 'select':\n              return renderSelectStep();\n          case 'mapping':\n              return renderMappingStep();\n          case 'complete':\n              return renderCompleteStep();\n          case 'dashboard':\n              return <Dashboard />;\n          case 'profile': // YENÄ° EKLENTÄ°\n                return <Profile setStep={function (step: 'home' | 'connect'): void {\n                    throw new Error('Function not implemented.');\n                } } />;\n          case 'faq':\n                return <FAQPage setStep={setStep as (step: string) => void} />; \n          case 'features': // <-- YENÄ° CASE\n                return <Features setStep={setStep} />;      \n          default:\n              return null;\n      }\n  }\n\n\n  return (\n    <div className=\"App\">\n      {/* ðŸš¨ HeaderComponent her zaman gÃ¶rÃ¼nÃ¼r, iÃ§eriÄŸi login durumuna gÃ¶re deÄŸiÅŸir */}\n      <HeaderComponent setStep={setStep} userEmail={userEmail} />\n\n      {/* --- ANA BAÅžLIK BÃ–LÃœMÃœNÃœ KALDIRIYORUZ --- */}\n      {/* Ana baÅŸlÄ±k ve global Sync butonlarÄ±nÄ± artÄ±k HeaderComponent veya Dashboard'da yÃ¶neteceÄŸiz */}\n      {/* AÅŸaÄŸÄ±daki <header> bloÄŸu artÄ±k gereksizdir ve kaldÄ±rÄ±lmalÄ±dÄ±r. */}\n\n      <main>\n        {/* AdÄ±mÄ± render eden fonksiyona yÃ¶nlendiriyoruz */}\n        {renderConnectStepHomeOrApp()}\n      </main>\n\n      {/* ðŸš¨ GLOBAL FOOTER: setStep'i ileterek her sayfada gÃ¶rÃ¼nmesini saÄŸlÄ±yoruz */}\n      <FooterComponent setStep={setStep} /> \n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}