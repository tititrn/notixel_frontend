{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\AutoSyncDashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [selectedFileId, setSelectedFileId] = useState(\"\");\n  const [columns, setColumns] = useState([]);\n  const [selectedColumns, setSelectedColumns] = useState([]);\n  const [userId, setUserId] = useState(1); // varsayılan kullanıcı ID\n\n  const backendBase = \"http://localhost:8000\";\n\n  // Excel dosyalarını çek\n  const fetchExcelFiles = async () => {\n    try {\n      const res = await axios.get(`${backendBase}/get-excel-files`, {\n        params: {\n          user_id: userId\n        }\n      });\n      setExcelFiles(res.data.files);\n    } catch (err) {\n      console.error(\"Excel dosyaları alınamadı:\", err);\n    }\n  };\n\n  // Seçilen dosyanın sütunlarını çek\n  const fetchColumns = async fileId => {\n    if (!fileId) return;\n    try {\n      const res = await axios.get(`${backendBase}/get-excel-columns`, {\n        params: {\n          excel_file_id: fileId,\n          user_id: userId\n        }\n      });\n      setColumns(res.data.columns);\n      // Varsayılan olarak daha önce seçilmiş otomatik sync sütunlarını getir\n      const autoSyncRes = await axios.get(`${backendBase}/autosync-columns`, {\n        params: {\n          user_id: userId\n        }\n      });\n      selectedColumns.filter(c => res.data.columns.includes(c));\n    } catch (err) {\n      console.error(\"Sütunlar alınamadı:\", err);\n    }\n  };\n\n  // Otomatik sync sütunlarını kaydet\n  const saveAutoSyncColumns = async () => {\n    try {\n      await axios.post(`${backendBase}/autosync-columns`, {\n        user_id: userId,\n        columns: selectedColumns\n      });\n      alert(\"Otomatik sync sütunları kaydedildi.\");\n    } catch (err) {\n      console.error(\"Kaydetme hatası:\", err);\n      alert(\"Otomatik sync kaydedilemedi.\");\n    }\n  };\n\n  // Checkbox toggle\n  const toggleColumn = col => {\n    if (selectedColumns.includes(col)) {\n      setSelectedColumns(selectedColumns.filter(c => c !== col));\n    } else {\n      setSelectedColumns([...selectedColumns, col]);\n    }\n  };\n  useEffect(() => {\n    fetchExcelFiles();\n  }, []);\n  useEffect(() => {\n    fetchColumns(selectedFileId);\n  }, [selectedFileId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Excel \\u2192 Notion Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block font-semibold mb-1\",\n        children: \"Excel Dosyas\\u0131 Se\\xE7in:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedFileId,\n        onChange: e => setSelectedFileId(e.target.value),\n        className: \"border p-2 rounded\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Dosya Se\\xE7in --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), excelFiles.map(file => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: file.id,\n          children: file.name\n        }, file.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), columns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"font-semibold mb-2\",\n        children: \"Otomatik Sync S\\xFCtunlar\\u0131\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 gap-2\",\n        children: columns.map(col => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedColumns.includes(col),\n            onChange: () => toggleColumn(col)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: col\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this)]\n        }, col, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveAutoSyncColumns,\n        className: \"mt-2 bg-blue-500 text-white px-4 py-2 rounded\",\n        children: \"Kaydet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"Uoov0EMPvWM/L7+g+wDv5QMwZ/0=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","Dashboard","_s","excelFiles","setExcelFiles","selectedFileId","setSelectedFileId","columns","setColumns","selectedColumns","setSelectedColumns","userId","setUserId","backendBase","fetchExcelFiles","res","get","params","user_id","data","files","err","console","error","fetchColumns","fileId","excel_file_id","autoSyncRes","filter","c","includes","saveAutoSyncColumns","post","alert","toggleColumn","col","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","file","id","name","length","type","checked","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/AutoSyncDashboard.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\ntype ExcelFile = { id: string; name: string };\r\ntype Column = string;\r\n\r\ninterface AutoSyncColumnsResponse {\r\n  columns: string[];\r\n}\r\n\r\nexport default function Dashboard() {\r\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\r\n  const [selectedFileId, setSelectedFileId] = useState<string>(\"\");\r\n  const [columns, setColumns] = useState<Column[]>([]);\r\n  const [selectedColumns, setSelectedColumns] = useState<Column[]>([]);\r\n  const [userId, setUserId] = useState<number>(1); // varsayılan kullanıcı ID\r\n\r\n  const backendBase = \"http://localhost:8000\";\r\n\r\n  // Excel dosyalarını çek\r\n  const fetchExcelFiles = async () => {\r\n    try {\r\n      const res = await axios.get(`${backendBase}/get-excel-files`, { params: { user_id: userId } });\r\n      setExcelFiles(res.data.files);\r\n    } catch (err) {\r\n      console.error(\"Excel dosyaları alınamadı:\", err);\r\n    }\r\n  };\r\n\r\n  // Seçilen dosyanın sütunlarını çek\r\n  const fetchColumns = async (fileId: string) => {\r\n    if (!fileId) return;\r\n    try {\r\n      const res = await axios.get(`${backendBase}/get-excel-columns`, {\r\n        params: { excel_file_id: fileId, user_id: userId },\r\n      });\r\n      setColumns(res.data.columns);\r\n      // Varsayılan olarak daha önce seçilmiş otomatik sync sütunlarını getir\r\n      const autoSyncRes = await axios.get<AutoSyncColumnsResponse>(`${backendBase}/autosync-columns`, { params: { user_id: userId } });\r\n      selectedColumns.filter((c: string) => res.data.columns.includes(c))\r\n    } catch (err) {\r\n      console.error(\"Sütunlar alınamadı:\", err);\r\n    }\r\n  };\r\n\r\n  // Otomatik sync sütunlarını kaydet\r\n  const saveAutoSyncColumns = async () => {\r\n    try {\r\n      await axios.post(`${backendBase}/autosync-columns`, { user_id: userId, columns: selectedColumns });\r\n      alert(\"Otomatik sync sütunları kaydedildi.\");\r\n    } catch (err) {\r\n      console.error(\"Kaydetme hatası:\", err);\r\n      alert(\"Otomatik sync kaydedilemedi.\");\r\n    }\r\n  };\r\n\r\n  // Checkbox toggle\r\n  const toggleColumn = (col: Column) => {\r\n    if (selectedColumns.includes(col)) {\r\n      setSelectedColumns(selectedColumns.filter((c) => c !== col));\r\n    } else {\r\n      setSelectedColumns([...selectedColumns, col]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchExcelFiles();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchColumns(selectedFileId);\r\n  }, [selectedFileId]);\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Excel → Notion Dashboard</h1>\r\n\r\n      {/* Excel Dosyaları */}\r\n      <div className=\"mb-4\">\r\n        <label className=\"block font-semibold mb-1\">Excel Dosyası Seçin:</label>\r\n        <select\r\n          value={selectedFileId}\r\n          onChange={(e) => setSelectedFileId(e.target.value)}\r\n          className=\"border p-2 rounded\"\r\n        >\r\n          <option value=\"\">-- Dosya Seçin --</option>\r\n          {excelFiles.map((file) => (\r\n            <option key={file.id} value={file.id}>{file.name}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      {/* Otomatik Sync Sütunları */}\r\n      {columns.length > 0 && (\r\n        <div className=\"mb-4\">\r\n          <h2 className=\"font-semibold mb-2\">Otomatik Sync Sütunları</h2>\r\n          <div className=\"grid grid-cols-2 gap-2\">\r\n            {columns.map((col) => (\r\n              <label key={col} className=\"flex items-center space-x-2\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={selectedColumns.includes(col)}\r\n                  onChange={() => toggleColumn(col)}\r\n                />\r\n                <span>{col}</span>\r\n              </label>\r\n            ))}\r\n          </div>\r\n          <button\r\n            onClick={saveAutoSyncColumns}\r\n            className=\"mt-2 bg-blue-500 text-white px-4 py-2 rounded\"\r\n          >\r\n            Kaydet\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}