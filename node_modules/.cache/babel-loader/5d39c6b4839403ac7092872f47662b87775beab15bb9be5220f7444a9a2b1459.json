{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\notion-excel-sync\\\\excel-notion-ui\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:8000';\nfunction App() {\n  _s();\n  const [step, setStep] = useState('connect');\n  const [excelFiles, setExcelFiles] = useState([]);\n  const [excelColumns, setExcelColumns] = useState([]);\n  const [notionProperties, setNotionProperties] = useState([]);\n  const [selectedExcelId, setSelectedExcelId] = useState('');\n  const [notionDbId, setNotionDbId] = useState('');\n  const [message, setMessage] = useState('');\n  const [userId, setUserId] = useState(null);\n  const [mappings, setMappings] = useState([]);\n  // Yeni state: Otomatik oluşturulacak sütunları tutmak için\n  const [unmatchedColumns, setUnmatchedColumns] = useState([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState([]);\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const authError = params.get('auth_error');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (authError === 'true') {\n      setMessage(`Yetkilendirme hatası: ${params.get('message')}`);\n      setStep('connect');\n    } else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    } else {\n      setStep('connect');\n    }\n  }, []);\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n  const handleNotionConnect = () => {\n    setMessage('Notion hesabınızı bağlamak için, Notion\\'da herhangi bir veritabanı veya sayfasına gidin, \"...\" menüsünden \"Add connections\"ı seçin ve oluşturduğunuz entegrasyonu (\"Excel Sync\") ekleyin.');\n  };\n  const fetchExcelFiles = async currentUserId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setExcelFiles(data.files);\n      } else {\n        setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchExcelColumns = async fileId => {\n    if (!userId) return;\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await response.json();\n      if (response.ok) {\n        const columns = data.columns.map(name => ({\n          name\n        }));\n        const hasIdColumn = columns.some(col => col.name.toLowerCase() === 'id');\n        if (!hasIdColumn) {\n          setMessage('Seçtiğiniz Excel dosyasında \"ID\" adında bir sütun bulunmuyor. Senkronizasyon için bir \"ID\" sütunu gereklidir. Lütfen dosyanızı güncelleyin veya başka bir dosya seçin.');\n          setExcelColumns([]);\n          setMappings([]);\n          return;\n        }\n        setExcelColumns(columns);\n        setMappings(data.columns.map(name => ({\n          excel_column: name,\n          notion_property: '',\n          data_type: ''\n        })));\n        setMessage('');\n      } else {\n        setMessage(`Excel sütunları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen bir Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await response.json();\n      if (response.ok) {\n        const notionPropNames = data.properties.map(p => p.name);\n        const mappedExcelColumns = new Set(excelColumns.map(c => c.name));\n\n        // Eşleşmeyen tüm sütunları belirle\n        const unmatched = Array.from(mappedExcelColumns).filter(colName => !notionPropNames.includes(colName));\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate(unmatched); // Varsayılan olarak hepsini seçili yap\n\n        // Eşleşebilen sütunlar için mapping oluştur\n        const initialMappings = Array.from(mappedExcelColumns).map(colName => {\n          var _data$properties$find;\n          return {\n            excel_column: colName,\n            notion_property: notionPropNames.includes(colName) ? colName : '',\n            data_type: notionPropNames.includes(colName) ? ((_data$properties$find = data.properties.find(p => p.name === colName)) === null || _data$properties$find === void 0 ? void 0 : _data$properties$find.type) || '' : ''\n          };\n        });\n        setNotionProperties(data.properties);\n        setMappings(initialMappings);\n        setStep('mapping');\n        setMessage('');\n      } else {\n        setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n  };\n  const handleExcelFileChange = e => {\n    const fileId = e.target.value;\n    setSelectedExcelId(fileId);\n    if (fileId) {\n      fetchExcelColumns(fileId);\n    }\n  };\n  const handleMappingChange = (excelColumnName, notionPropertyName) => {\n    setMappings(prevMappings => {\n      const newMappings = [...prevMappings];\n      const mappingIndex = newMappings.findIndex(m => m.excel_column === excelColumnName);\n      if (mappingIndex > -1) {\n        const selectedNotionProp = notionProperties.find(p => p.name === notionPropertyName);\n        newMappings[mappingIndex] = {\n          ...newMappings[mappingIndex],\n          notion_property: notionPropertyName,\n          data_type: (selectedNotionProp === null || selectedNotionProp === void 0 ? void 0 : selectedNotionProp.type) || ''\n        };\n      }\n      return newMappings;\n    });\n  };\n  const handleCreateColumnChange = (columnName, isChecked) => {\n    if (isChecked) {\n      setSelectedColumnsToCreate(prev => [...prev, columnName]);\n    } else {\n      setSelectedColumnsToCreate(prev => prev.filter(c => c !== columnName));\n    }\n  };\n  const saveMappingAndStartSync = async syncDirection => {\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı. Lütfen tekrar giriş yapın.');\n      return;\n    }\n    try {\n      const syncResponse = await fetch(`${API_BASE_URL}/sync/${syncDirection}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          columns_to_create: selectedColumnsToCreate,\n          mappings: mappings // YENİ EKLENDİ\n        })\n      });\n      if (!syncResponse.ok) {\n        const syncError = await syncResponse.json();\n        setMessage(`Senkronizasyon başlatılamadı: ${syncError.detail || syncError.error}`);\n        return;\n      }\n      setStep('complete');\n      setMessage('Senkronizasyon başarıyla tamamlandı!');\n    } catch (error) {\n      setMessage('Eşleme kaydetme veya senkronizasyon başlatma sırasında ağ hatası oluştu.');\n    }\n  };\n  const renderConnectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMicrosoftConnect,\n      children: \"Microsoft Hesab\\u0131n\\u0131 Ba\\u011Fla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n  const renderSelectStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Excel Dosyas\\u0131n\\u0131 ve Notion Veritaban\\u0131n\\u0131 Se\\xE7in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Excel Dosyas\\u0131 Se\\xE7in:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedExcelId,\n          onChange: handleExcelFileChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Dosya Se\\xE7iniz...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this), excelFiles.map(file => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: file.id,\n            children: file.name\n          }, file.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Notion Veritaban\\u0131 ID'si:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: notionDbId,\n          onChange: e => setNotionDbId(e.target.value),\n          placeholder: \"Veritaban\\u0131 ID'sini yap\\u0131\\u015Ft\\u0131r\\u0131n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchNotionProperties,\n      disabled: !selectedExcelId || !notionDbId,\n      children: \"Notion \\xD6zelliklerini Getir\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n  const renderMappingStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"S\\xFCtunlar\\u0131 E\\u015Fle\\u015Ftirin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mapping-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Excel S\\xFCtunlar\\u0131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: excelColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"excel-name\",\n              children: column.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapping-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notion \\xD6zellikleri\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: mappings.map((mapping, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: mapping.notion_property,\n              onChange: e => handleMappingChange(mapping.excel_column, e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Se\\xE7iniz...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 19\n              }, this), notionProperties.map(prop => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: prop.name,\n                children: [prop.name, \" (\", prop.type, \")\"]\n              }, prop.name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), unmatchedColumns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unmatched-columns-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"E\\u015Fle\\u015Fmeyen S\\xFCtunlar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Notion'da olu\\u015Fturmak istedi\\u011Finiz s\\xFCtunlar\\u0131 se\\xE7in:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: unmatchedColumns.map(colName => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\"\n              // Artık bu kontrolü kullan\n              ,\n              checked: selectedColumnsToCreate.includes(colName),\n              onChange: e => handleCreateColumnChange(colName, e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 19\n            }, this), colName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 17\n          }, this)\n        }, colName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sync-buttons-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveMappingAndStartSync('excel-to-notion'),\n        disabled: !mappings.length,\n        children: \"Excel'den Notion'a E\\u015Fitle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveMappingAndStartSync('notion-to-excel'),\n        disabled: !mappings.length,\n        children: \"Notion'dan Excel'e E\\u015Fitle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n  const renderCompleteStep = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Senkronizasyon Ba\\u015Far\\u0131l\\u0131!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Se\\xE7ti\\u011Finiz y\\xF6nde senkronizasyon tamamland\\u0131. Uygulama, dosyan\\u0131zdaki de\\u011Fi\\u015Fiklikleri takip etmeye ve verileri otomatik olarak senkronize etmeye devam edecektir.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setStep('select'),\n      children: \"Yeni Senkronizasyon Ba\\u015Flat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 310,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Notion & Excel Senkronizasyonu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 21\n      }, this), step === 'connect' && renderConnectStep(), step === 'select' && renderSelectStep(), step === 'mapping' && renderMappingStep(), step === 'complete' && renderCompleteStep()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"c3WNaq/g3dsAkk+D9wYXhYk+vlE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","step","setStep","excelFiles","setExcelFiles","excelColumns","setExcelColumns","notionProperties","setNotionProperties","selectedExcelId","setSelectedExcelId","notionDbId","setNotionDbId","message","setMessage","userId","setUserId","mappings","setMappings","unmatchedColumns","setUnmatchedColumns","selectedColumnsToCreate","setSelectedColumnsToCreate","params","URLSearchParams","window","location","search","authSuccess","get","authError","receivedUserId","storedUserId","localStorage","getItem","setItem","fetchExcelFiles","history","replaceState","document","title","pathname","handleMicrosoftConnect","href","handleNotionConnect","currentUserId","response","fetch","data","json","ok","files","error","fetchExcelColumns","fileId","columns","map","name","hasIdColumn","some","col","toLowerCase","excel_column","notion_property","data_type","fetchNotionProperties","notionPropNames","properties","p","mappedExcelColumns","Set","c","unmatched","Array","from","filter","colName","includes","initialMappings","_data$properties$find","find","type","handleExcelFileChange","e","target","value","handleMappingChange","excelColumnName","notionPropertyName","prevMappings","newMappings","mappingIndex","findIndex","m","selectedNotionProp","handleCreateColumnChange","columnName","isChecked","prev","saveMappingAndStartSync","syncDirection","syncResponse","method","headers","body","JSON","stringify","excel_file_id","notion_database_id","user_id","parseInt","columns_to_create","syncError","detail","renderConnectStep","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","renderSelectStep","onChange","file","id","placeholder","disabled","renderMappingStep","column","index","mapping","prop","length","checked","renderCompleteStep","_c","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/notion-excel-sync/excel-notion-ui/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\ntype AppStep = 'connect' | 'select' | 'mapping' | 'complete';\ntype ExcelFile = { id: string; name: string };\ntype ExcelColumn = { name: string };\ntype NotionProperty = { name: string; type: string };\ntype Mapping = { excel_column: string; notion_property: string; data_type: string };\n\nconst API_BASE_URL = 'http://127.0.0.1:8000';\n\nfunction App() {\n  const [step, setStep] = useState<AppStep>('connect');\n  const [excelFiles, setExcelFiles] = useState<ExcelFile[]>([]);\n  const [excelColumns, setExcelColumns] = useState<ExcelColumn[]>([]);\n  const [notionProperties, setNotionProperties] = useState<NotionProperty[]>([]);\n  const [selectedExcelId, setSelectedExcelId] = useState<string>('');\n  const [notionDbId, setNotionDbId] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n  const [userId, setUserId] = useState<string | null>(null);\n  const [mappings, setMappings] = useState<Mapping[]>([]);\n  // Yeni state: Otomatik oluşturulacak sütunları tutmak için\n  const [unmatchedColumns, setUnmatchedColumns] = useState<string[]>([]);\n  const [selectedColumnsToCreate, setSelectedColumnsToCreate] = useState<string[]>([]);\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const authSuccess = params.get('auth_success');\n    const authError = params.get('auth_error');\n    const receivedUserId = params.get('user_id');\n    const storedUserId = localStorage.getItem('user_id');\n\n    if (authSuccess === 'true' && receivedUserId) {\n      setUserId(receivedUserId);\n      setStep('select');\n      localStorage.setItem('user_id', receivedUserId);\n      fetchExcelFiles(receivedUserId);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } \n    else if (authError === 'true') {\n      setMessage(`Yetkilendirme hatası: ${params.get('message')}`);\n      setStep('connect');\n    }\n    else if (storedUserId) {\n      setUserId(storedUserId);\n      setStep('select');\n      fetchExcelFiles(storedUserId);\n    }\n    else {\n      setStep('connect');\n    }\n\n  }, []);\n\n  const handleMicrosoftConnect = () => {\n    window.location.href = `${API_BASE_URL}/connect/microsoft`;\n  };\n\n  const handleNotionConnect = () => {\n    setMessage('Notion hesabınızı bağlamak için, Notion\\'da herhangi bir veritabanı veya sayfasına gidin, \"...\" menüsünden \"Add connections\"ı seçin ve oluşturduğunuz entegrasyonu (\"Excel Sync\") ekleyin.');\n  };\n\n  const fetchExcelFiles = async (currentUserId: string) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-files?user_id=${currentUserId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setExcelFiles(data.files);\n      } else {\n        setMessage(`Excel dosyaları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel dosyaları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchExcelColumns = async (fileId: string) => {\n    if (!userId) return;\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-excel-columns?excel_file_id=${fileId}&user_id=${userId}`);\n      const data = await response.json();\n      if (response.ok) {\n        const columns = data.columns.map((name: string) => ({ name }));\n        \n        const hasIdColumn = columns.some((col: any) => col.name.toLowerCase() === 'id');\n        if (!hasIdColumn) {\n            setMessage('Seçtiğiniz Excel dosyasında \"ID\" adında bir sütun bulunmuyor. Senkronizasyon için bir \"ID\" sütunu gereklidir. Lütfen dosyanızı güncelleyin veya başka bir dosya seçin.');\n            setExcelColumns([]);\n            setMappings([]);\n            return;\n        }\n\n        setExcelColumns(columns);\n        setMappings(data.columns.map((name: string) => ({ excel_column: name, notion_property: '', data_type: '' })));\n        setMessage('');\n\n      } else {\n        setMessage(`Excel sütunları alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Excel sütunları alınırken ağ hatası oluştu.');\n    }\n  };\n\n  const fetchNotionProperties = async () => {\n    if (!notionDbId) {\n      setMessage('Lütfen bir Notion Veritabanı ID\\'si girin.');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/get-notion-properties?notion_database_id=${notionDbId}`);\n      const data = await response.json();\n      if (response.ok) {\n        const notionPropNames = data.properties.map((p: NotionProperty) => p.name);\n        const mappedExcelColumns = new Set(excelColumns.map(c => c.name));\n\n        // Eşleşmeyen tüm sütunları belirle\n        const unmatched = Array.from(mappedExcelColumns).filter(colName => !notionPropNames.includes(colName));\n        setUnmatchedColumns(unmatched);\n        setSelectedColumnsToCreate(unmatched); // Varsayılan olarak hepsini seçili yap\n\n        // Eşleşebilen sütunlar için mapping oluştur\n        const initialMappings = Array.from(mappedExcelColumns).map(colName => ({\n            excel_column: colName,\n            notion_property: notionPropNames.includes(colName) ? colName : '',\n            data_type: notionPropNames.includes(colName) ? data.properties.find((p: NotionProperty) => p.name === colName)?.type || '' : ''\n        }));\n\n        setNotionProperties(data.properties);\n        setMappings(initialMappings);\n        setStep('mapping');\n        setMessage('');\n      } else {\n        setMessage(`Notion özellikleri alınamadı: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Notion özelliklerini alırken ağ hatası oluştu.');\n    }\n};\n\n  const handleExcelFileChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const fileId = e.target.value;\n    setSelectedExcelId(fileId);\n    if (fileId) {\n      fetchExcelColumns(fileId);\n    }\n  };\n\n  const handleMappingChange = (excelColumnName: string, notionPropertyName: string) => {\n    setMappings(prevMappings => {\n      const newMappings = [...prevMappings];\n      const mappingIndex = newMappings.findIndex(m => m.excel_column === excelColumnName);\n\n      if (mappingIndex > -1) {\n        const selectedNotionProp = notionProperties.find(p => p.name === notionPropertyName);\n        newMappings[mappingIndex] = {\n          ...newMappings[mappingIndex],\n          notion_property: notionPropertyName,\n          data_type: selectedNotionProp?.type || ''\n        };\n      }\n      return newMappings;\n    });\n  };\n\n  const handleCreateColumnChange = (columnName: string, isChecked: boolean) => {\n  if (isChecked) {\n    setSelectedColumnsToCreate(prev => [...prev, columnName]);\n  } else {\n    setSelectedColumnsToCreate(prev => prev.filter(c => c !== columnName));\n  }\n};\n\n  const saveMappingAndStartSync = async (syncDirection: 'excel-to-notion' | 'notion-to-excel') => {\n    if (!userId) {\n      setMessage('Kullanıcı kimliği bulunamadı. Lütfen tekrar giriş yapın.');\n      return;\n    }\n\n    try {\n      const syncResponse = await fetch(`${API_BASE_URL}/sync/${syncDirection}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          excel_file_id: selectedExcelId,\n          notion_database_id: notionDbId,\n          user_id: parseInt(userId, 10),\n          columns_to_create: selectedColumnsToCreate,\n          mappings: mappings, // YENİ EKLENDİ\n        }),\n      });\n\n      if (!syncResponse.ok) {\n        const syncError = await syncResponse.json();\n        setMessage(`Senkronizasyon başlatılamadı: ${syncError.detail || syncError.error}`);\n        return;\n      }\n\n      setStep('complete');\n      setMessage('Senkronizasyon başarıyla tamamlandı!');\n\n    } catch (error) {\n      setMessage('Eşleme kaydetme veya senkronizasyon başlatma sırasında ağ hatası oluştu.');\n    }\n  };\n\n  const renderConnectStep = () => (\n    <div className=\"step-container\">\n      <button onClick={handleMicrosoftConnect}>Microsoft Hesabını Bağla</button>\n    </div>\n  );\n\n  const renderSelectStep = () => (\n    <div className=\"step-container\">\n      <h2>Excel Dosyasını ve Notion Veritabanını Seçin</h2>\n      <div>\n        <label>\n          Excel Dosyası Seçin:\n          <select value={selectedExcelId} onChange={handleExcelFileChange}>\n            <option value=\"\">Dosya Seçiniz...</option>\n            {excelFiles.map(file => (\n              <option key={file.id} value={file.id}>{file.name}</option>\n            ))}\n          </select>\n        </label>\n      </div>\n      <div>\n        <label>\n          Notion Veritabanı ID'si:\n          <input\n            type=\"text\"\n            value={notionDbId}\n            onChange={(e) => setNotionDbId(e.target.value)}\n            placeholder=\"Veritabanı ID'sini yapıştırın\"\n          />\n        </label>\n      </div>\n      <button onClick={fetchNotionProperties} disabled={!selectedExcelId || !notionDbId}>Notion Özelliklerini Getir</button>\n    </div>\n  );\n\n  const renderMappingStep = () => (\n    <div className=\"step-container\">\n      <h2>Sütunları Eşleştirin</h2>\n      <div className=\"mapping-grid\">\n        <div className=\"mapping-section\">\n          <h3>Excel Sütunları</h3>\n          <ul>\n            {excelColumns.map((column, index) => (\n              <li key={index}>\n                <span className=\"excel-name\">{column.name}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"mapping-section\">\n          <h3>Notion Özellikleri</h3>\n          <ul>\n            {mappings.map((mapping, index) => (\n              <li key={index}>\n                <select\n                  value={mapping.notion_property}\n                  onChange={(e) => handleMappingChange(mapping.excel_column, e.target.value)}\n                >\n                  <option value=\"\">Seçiniz...</option>\n                  {notionProperties.map(prop => (\n                    <option key={prop.name} value={prop.name}>{prop.name} ({prop.type})</option>\n                  ))}\n                </select>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n      {/* EŞLEŞMEYEN SÜTUNLAR BÖLÜMÜ */}\n      {unmatchedColumns.length > 0 && (\n        <div className=\"unmatched-columns-section\">\n          <h3>Eşleşmeyen Sütunlar</h3>\n          <p>Notion'da oluşturmak istediğiniz sütunları seçin:</p>\n          <ul>\n            {unmatchedColumns.map(colName => (\n              <li key={colName}>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    // Artık bu kontrolü kullan\n                    checked={selectedColumnsToCreate.includes(colName)}\n                    onChange={(e) => handleCreateColumnChange(colName, e.target.checked)}\n                  />\n                  {colName}\n                </label>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <div className=\"sync-buttons-container\">\n        <button onClick={() => saveMappingAndStartSync('excel-to-notion')} disabled={!mappings.length}>\n          Excel'den Notion'a Eşitle\n        </button>\n        <button onClick={() => saveMappingAndStartSync('notion-to-excel')} disabled={!mappings.length}>\n          Notion'dan Excel'e Eşitle\n        </button>\n      </div>\n    </div>\n  );\n  \n  const renderCompleteStep = () => (\n    <div className=\"step-container\">\n      <h2>Senkronizasyon Başarılı!</h2>\n      <p>Seçtiğiniz yönde senkronizasyon tamamlandı. Uygulama, dosyanızdaki değişiklikleri takip etmeye ve verileri otomatik olarak senkronize etmeye devam edecektir.</p>\n      <button onClick={() => setStep('select')}>Yeni Senkronizasyon Başlat</button>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Notion & Excel Senkronizasyonu</h1>\n        \n        {message && <p className=\"message\">{message}</p>}\n\n        {step === 'connect' && renderConnectStep()}\n        {step === 'select' && renderSelectStep()}\n        {step === 'mapping' && renderMappingStep()}\n        {step === 'complete' && renderCompleteStep()}\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}